/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
export const AnalyzeAction = {
    type: {
        name: "Composite",
        className: "AnalyzeAction",
        uberParent: "AnalyzeAction",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AnalyzeTextTaskResult = {
    type: {
        name: "Composite",
        className: "AnalyzeTextTaskResult",
        uberParent: "AnalyzeTextTaskResult",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: {
            kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            }
        }
    }
};
export const ErrorModel = {
    type: {
        name: "Composite",
        className: "ErrorModel",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorModel"
                        }
                    }
                }
            },
            innererror: {
                serializedName: "innererror",
                type: {
                    name: "Composite",
                    className: "InnerErrorModel"
                }
            }
        }
    }
};
export const InnerErrorModel = {
    type: {
        name: "Composite",
        className: "InnerErrorModel",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            innererror: {
                serializedName: "innererror",
                type: {
                    name: "Composite",
                    className: "InnerErrorModel"
                }
            }
        }
    }
};
export const AnalyzeTextJobsInput = {
    type: {
        name: "Composite",
        className: "AnalyzeTextJobsInput",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            analysisInput: {
                serializedName: "analysisInput",
                type: {
                    name: "Composite",
                    className: "MultiLanguageAnalysisInput"
                }
            },
            tasks: {
                serializedName: "tasks",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AnalyzeBatchAction"
                        }
                    }
                }
            }
        }
    }
};
export const MultiLanguageAnalysisInput = {
    type: {
        name: "Composite",
        className: "MultiLanguageAnalysisInput",
        modelProperties: {
            documents: {
                serializedName: "documents",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TextDocumentInput"
                        }
                    }
                }
            }
        }
    }
};
export const TextDocumentInput = {
    type: {
        name: "Composite",
        className: "TextDocumentInput",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const BatchActionState = {
    type: {
        name: "Composite",
        className: "BatchActionState",
        modelProperties: {
            actionName: {
                serializedName: "taskName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const JobState = {
    type: {
        name: "Composite",
        className: "JobState",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            createdOn: {
                serializedName: "createdDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            expiresOn: {
                serializedName: "expirationDateTime",
                type: {
                    name: "DateTime"
                }
            },
            id: {
                serializedName: "jobId",
                required: true,
                type: {
                    name: "String"
                }
            },
            modifiedOn: {
                serializedName: "lastUpdatedDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorModel"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TasksState = {
    type: {
        name: "Composite",
        className: "TasksState",
        modelProperties: {
            tasks: {
                serializedName: "tasks",
                type: {
                    name: "Composite",
                    className: "TasksStateTasks"
                }
            }
        }
    }
};
export const TasksStateTasks = {
    type: {
        name: "Composite",
        className: "TasksStateTasks",
        modelProperties: {
            completed: {
                serializedName: "completed",
                required: true,
                type: {
                    name: "Number"
                }
            },
            failed: {
                serializedName: "failed",
                required: true,
                type: {
                    name: "Number"
                }
            },
            inProgress: {
                serializedName: "inProgress",
                required: true,
                type: {
                    name: "Number"
                }
            },
            total: {
                serializedName: "total",
                required: true,
                type: {
                    name: "Number"
                }
            },
            items: {
                serializedName: "items",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AnalyzeTextLROResult"
                        }
                    }
                }
            }
        }
    }
};
export const TaskState = {
    type: {
        name: "Composite",
        className: "TaskState",
        modelProperties: {
            lastUpdateDateTime: {
                serializedName: "lastUpdateDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AnalyzeTextJobStatistics = {
    type: {
        name: "Composite",
        className: "AnalyzeTextJobStatistics",
        modelProperties: {
            statistics: {
                serializedName: "statistics",
                type: {
                    name: "Composite",
                    className: "TextDocumentBatchStatistics"
                }
            }
        }
    }
};
export const TextDocumentBatchStatistics = {
    type: {
        name: "Composite",
        className: "TextDocumentBatchStatistics",
        modelProperties: {
            documentCount: {
                serializedName: "documentsCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            validDocumentCount: {
                serializedName: "validDocumentsCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            erroneousDocumentCount: {
                serializedName: "erroneousDocumentsCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            transactionCount: {
                serializedName: "transactionsCount",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const LanguageDetectionAnalysisInput = {
    type: {
        name: "Composite",
        className: "LanguageDetectionAnalysisInput",
        modelProperties: {
            documents: {
                serializedName: "documents",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LanguageDetectionInput"
                        }
                    }
                }
            }
        }
    }
};
export const LanguageDetectionInput = {
    type: {
        name: "Composite",
        className: "LanguageDetectionInput",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            countryHint: {
                serializedName: "countryHint",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ActionCommon = {
    type: {
        name: "Composite",
        className: "ActionCommon",
        modelProperties: {
            disableServiceLogs: {
                defaultValue: false,
                serializedName: "loggingOptOut",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const CustomResult = {
    type: {
        name: "Composite",
        className: "CustomResult",
        modelProperties: {
            errors: {
                serializedName: "errors",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DocumentError"
                        }
                    }
                }
            },
            statistics: {
                serializedName: "statistics",
                type: {
                    name: "Composite",
                    className: "TextDocumentBatchStatistics"
                }
            },
            projectName: {
                serializedName: "projectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            deploymentName: {
                serializedName: "deploymentName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DocumentError = {
    type: {
        name: "Composite",
        className: "DocumentError",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            }
        }
    }
};
export const Entity = {
    type: {
        name: "Composite",
        className: "Entity",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "category",
                required: true,
                type: {
                    name: "String"
                }
            },
            subCategory: {
                serializedName: "subcategory",
                type: {
                    name: "String"
                }
            },
            offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            },
            confidenceScore: {
                serializedName: "confidenceScore",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const DocumentResult = {
    type: {
        name: "Composite",
        className: "DocumentResult",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            warnings: {
                serializedName: "warnings",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DocumentWarning"
                        }
                    }
                }
            },
            statistics: {
                serializedName: "statistics",
                type: {
                    name: "Composite",
                    className: "TextDocumentStatistics"
                }
            }
        }
    }
};
export const DocumentWarning = {
    type: {
        name: "Composite",
        className: "DocumentWarning",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TextDocumentStatistics = {
    type: {
        name: "Composite",
        className: "TextDocumentStatistics",
        modelProperties: {
            characterCount: {
                serializedName: "charactersCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            transactionCount: {
                serializedName: "transactionsCount",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const ClassificationCategory = {
    type: {
        name: "Composite",
        className: "ClassificationCategory",
        modelProperties: {
            category: {
                serializedName: "category",
                required: true,
                type: {
                    name: "String"
                }
            },
            confidenceScore: {
                serializedName: "confidenceScore",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const HealthcareEntity = {
    type: {
        name: "Composite",
        className: "HealthcareEntity",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "category",
                required: true,
                type: {
                    name: "String"
                }
            },
            subCategory: {
                serializedName: "subcategory",
                type: {
                    name: "String"
                }
            },
            offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            },
            confidenceScore: {
                serializedName: "confidenceScore",
                required: true,
                type: {
                    name: "Number"
                }
            },
            assertion: {
                serializedName: "assertion",
                type: {
                    name: "Composite",
                    className: "HealthcareAssertion"
                }
            },
            normalizedText: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            dataSources: {
                serializedName: "links",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityDataSource"
                        }
                    }
                }
            }
        }
    }
};
export const HealthcareAssertion = {
    type: {
        name: "Composite",
        className: "HealthcareAssertion",
        modelProperties: {
            conditionality: {
                serializedName: "conditionality",
                type: {
                    name: "Enum",
                    allowedValues: ["hypothetical", "conditional"]
                }
            },
            certainty: {
                serializedName: "certainty",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "positive",
                        "positivePossible",
                        "neutralPossible",
                        "negativePossible",
                        "negative"
                    ]
                }
            },
            association: {
                serializedName: "association",
                type: {
                    name: "Enum",
                    allowedValues: ["subject", "other"]
                }
            }
        }
    }
};
export const EntityDataSource = {
    type: {
        name: "Composite",
        className: "EntityDataSource",
        modelProperties: {
            name: {
                serializedName: "dataSource",
                required: true,
                type: {
                    name: "String"
                }
            },
            entityId: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const HealthcareRelation = {
    type: {
        name: "Composite",
        className: "HealthcareRelation",
        modelProperties: {
            relationType: {
                serializedName: "relationType",
                required: true,
                type: {
                    name: "String"
                }
            },
            confidenceScore: {
                serializedName: "confidenceScore",
                type: {
                    name: "Number"
                }
            },
            entities: {
                serializedName: "entities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthcareRelationEntity"
                        }
                    }
                }
            }
        }
    }
};
export const HealthcareRelationEntity = {
    type: {
        name: "Composite",
        className: "HealthcareRelationEntity",
        modelProperties: {
            ref: {
                serializedName: "ref",
                required: true,
                type: {
                    name: "String"
                }
            },
            role: {
                serializedName: "role",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PreBuiltResult = {
    type: {
        name: "Composite",
        className: "PreBuiltResult",
        modelProperties: {
            errors: {
                serializedName: "errors",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DocumentError"
                        }
                    }
                }
            },
            statistics: {
                serializedName: "statistics",
                type: {
                    name: "Composite",
                    className: "TextDocumentBatchStatistics"
                }
            },
            modelVersion: {
                serializedName: "modelVersion",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SentimentConfidenceScores = {
    type: {
        name: "Composite",
        className: "SentimentConfidenceScores",
        modelProperties: {
            positive: {
                serializedName: "positive",
                required: true,
                type: {
                    name: "Number"
                }
            },
            neutral: {
                serializedName: "neutral",
                required: true,
                type: {
                    name: "Number"
                }
            },
            negative: {
                serializedName: "negative",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const SentenceSentiment = {
    type: {
        name: "Composite",
        className: "SentenceSentiment",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            sentiment: {
                serializedName: "sentiment",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["positive", "neutral", "negative"]
                }
            },
            confidenceScores: {
                serializedName: "confidenceScores",
                type: {
                    name: "Composite",
                    className: "SentimentConfidenceScores"
                }
            },
            offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            },
            targets: {
                serializedName: "targets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SentenceTarget"
                        }
                    }
                }
            },
            assessments: {
                serializedName: "assessments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssessmentSentiment"
                        }
                    }
                }
            }
        }
    }
};
export const SentenceTarget = {
    type: {
        name: "Composite",
        className: "SentenceTarget",
        modelProperties: {
            sentiment: {
                serializedName: "sentiment",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["positive", "mixed", "negative"]
                }
            },
            confidenceScores: {
                serializedName: "confidenceScores",
                type: {
                    name: "Composite",
                    className: "TargetConfidenceScores"
                }
            },
            offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            },
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            relations: {
                serializedName: "relations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TargetRelation"
                        }
                    }
                }
            }
        }
    }
};
export const TargetConfidenceScores = {
    type: {
        name: "Composite",
        className: "TargetConfidenceScores",
        modelProperties: {
            positive: {
                serializedName: "positive",
                required: true,
                type: {
                    name: "Number"
                }
            },
            negative: {
                serializedName: "negative",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const TargetRelation = {
    type: {
        name: "Composite",
        className: "TargetRelation",
        modelProperties: {
            relationType: {
                serializedName: "relationType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["assessment", "target"]
                }
            },
            ref: {
                serializedName: "ref",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AssessmentSentiment = {
    type: {
        name: "Composite",
        className: "AssessmentSentiment",
        modelProperties: {
            sentiment: {
                serializedName: "sentiment",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["positive", "mixed", "negative"]
                }
            },
            confidenceScores: {
                serializedName: "confidenceScores",
                type: {
                    name: "Composite",
                    className: "TargetConfidenceScores"
                }
            },
            offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            },
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            isNegated: {
                serializedName: "isNegated",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const LinkedEntity = {
    type: {
        name: "Composite",
        className: "LinkedEntity",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            matches: {
                serializedName: "matches",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Match"
                        }
                    }
                }
            },
            language: {
                serializedName: "language",
                required: true,
                type: {
                    name: "String"
                }
            },
            dataSourceEntityId: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            dataSource: {
                serializedName: "dataSource",
                required: true,
                type: {
                    name: "String"
                }
            },
            bingEntitySearchApiId: {
                serializedName: "bingId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Match = {
    type: {
        name: "Composite",
        className: "Match",
        modelProperties: {
            confidenceScore: {
                serializedName: "confidenceScore",
                required: true,
                type: {
                    name: "Number"
                }
            },
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const SummarySentence = {
    type: {
        name: "Composite",
        className: "SummarySentence",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            rankScore: {
                serializedName: "rankScore",
                required: true,
                type: {
                    name: "Number"
                }
            },
            offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const DetectedLanguage = {
    type: {
        name: "Composite",
        className: "DetectedLanguage",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            iso6391Name: {
                serializedName: "iso6391Name",
                required: true,
                type: {
                    name: "String"
                }
            },
            confidenceScore: {
                serializedName: "confidenceScore",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const Pagination = {
    type: {
        name: "Composite",
        className: "Pagination",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const JobErrors = {
    type: {
        name: "Composite",
        className: "JobErrors",
        modelProperties: {
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorModel"
                        }
                    }
                }
            }
        }
    }
};
export const AbstractiveSummarizationTaskParametersBase = {
    type: {
        name: "Composite",
        className: "AbstractiveSummarizationTaskParametersBase",
        modelProperties: {
            sentenceCount: {
                serializedName: "sentenceCount",
                type: {
                    name: "Number"
                }
            },
            stringIndexType: {
                defaultValue: "Utf16CodeUnit",
                serializedName: "stringIndexType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AbstractiveSummarizationResultBase = {
    type: {
        name: "Composite",
        className: "AbstractiveSummarizationResultBase",
        modelProperties: {
            documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AbstractiveSummaryDocumentResult"
                        }
                    }
                }
            }
        }
    }
};
export const AbstractiveSummary = {
    type: {
        name: "Composite",
        className: "AbstractiveSummary",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "String"
                }
            },
            contexts: {
                serializedName: "contexts",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SummaryContext"
                        }
                    }
                }
            }
        }
    }
};
export const SummaryContext = {
    type: {
        name: "Composite",
        className: "SummaryContext",
        modelProperties: {
            offset: {
                serializedName: "offset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const AnalyzeTextEntityLinkingInput = {
    serializedName: "EntityLinking",
    type: {
        name: "Composite",
        className: "AnalyzeTextEntityLinkingInput",
        uberParent: "AnalyzeAction",
        polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeAction.type.modelProperties), { analysisInput: {
                serializedName: "analysisInput",
                type: {
                    name: "Composite",
                    className: "MultiLanguageAnalysisInput"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "EntityLinkingAction"
                }
            } })
    }
};
export const AnalyzeTextEntityRecognitionInput = {
    serializedName: "EntityRecognition",
    type: {
        name: "Composite",
        className: "AnalyzeTextEntityRecognitionInput",
        uberParent: "AnalyzeAction",
        polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeAction.type.modelProperties), { analysisInput: {
                serializedName: "analysisInput",
                type: {
                    name: "Composite",
                    className: "MultiLanguageAnalysisInput"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "EntityRecognitionAction"
                }
            } })
    }
};
export const AnalyzeTextKeyPhraseExtractionInput = {
    serializedName: "KeyPhraseExtraction",
    type: {
        name: "Composite",
        className: "AnalyzeTextKeyPhraseExtractionInput",
        uberParent: "AnalyzeAction",
        polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeAction.type.modelProperties), { analysisInput: {
                serializedName: "analysisInput",
                type: {
                    name: "Composite",
                    className: "MultiLanguageAnalysisInput"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "KeyPhraseExtractionAction"
                }
            } })
    }
};
export const AnalyzeTextPiiEntitiesRecognitionInput = {
    serializedName: "PiiEntityRecognition",
    type: {
        name: "Composite",
        className: "AnalyzeTextPiiEntitiesRecognitionInput",
        uberParent: "AnalyzeAction",
        polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeAction.type.modelProperties), { analysisInput: {
                serializedName: "analysisInput",
                type: {
                    name: "Composite",
                    className: "MultiLanguageAnalysisInput"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "PiiEntityRecognitionAction"
                }
            } })
    }
};
export const AnalyzeTextLanguageDetectionInput = {
    serializedName: "LanguageDetection",
    type: {
        name: "Composite",
        className: "AnalyzeTextLanguageDetectionInput",
        uberParent: "AnalyzeAction",
        polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeAction.type.modelProperties), { analysisInput: {
                serializedName: "analysisInput",
                type: {
                    name: "Composite",
                    className: "LanguageDetectionAnalysisInput"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "LanguageDetectionAction"
                }
            } })
    }
};
export const AnalyzeTextSentimentAnalysisInput = {
    serializedName: "SentimentAnalysis",
    type: {
        name: "Composite",
        className: "AnalyzeTextSentimentAnalysisInput",
        uberParent: "AnalyzeAction",
        polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeAction.type.modelProperties), { analysisInput: {
                serializedName: "analysisInput",
                type: {
                    name: "Composite",
                    className: "MultiLanguageAnalysisInput"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "SentimentAnalysisAction"
                }
            } })
    }
};
export const SentimentTaskResult = {
    serializedName: "SentimentAnalysisResults",
    type: {
        name: "Composite",
        className: "SentimentTaskResult",
        uberParent: "AnalyzeTextTaskResult",
        polymorphicDiscriminator: AnalyzeTextTaskResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextTaskResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "SentimentResponse"
                }
            } })
    }
};
export const EntitiesTaskResult = {
    serializedName: "EntityRecognitionResults",
    type: {
        name: "Composite",
        className: "EntitiesTaskResult",
        uberParent: "AnalyzeTextTaskResult",
        polymorphicDiscriminator: AnalyzeTextTaskResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextTaskResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "EntitiesResult"
                }
            } })
    }
};
export const EntityLinkingTaskResult = {
    serializedName: "EntityLinkingResults",
    type: {
        name: "Composite",
        className: "EntityLinkingTaskResult",
        uberParent: "AnalyzeTextTaskResult",
        polymorphicDiscriminator: AnalyzeTextTaskResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextTaskResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "EntityLinkingResult"
                }
            } })
    }
};
export const PiiTaskResult = {
    serializedName: "PiiEntityRecognitionResults",
    type: {
        name: "Composite",
        className: "PiiTaskResult",
        uberParent: "AnalyzeTextTaskResult",
        polymorphicDiscriminator: AnalyzeTextTaskResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextTaskResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "PiiResult"
                }
            } })
    }
};
export const KeyPhraseTaskResult = {
    serializedName: "KeyPhraseExtractionResults",
    type: {
        name: "Composite",
        className: "KeyPhraseTaskResult",
        uberParent: "AnalyzeTextTaskResult",
        polymorphicDiscriminator: AnalyzeTextTaskResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextTaskResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "KeyPhraseResult"
                }
            } })
    }
};
export const LanguageDetectionTaskResult = {
    serializedName: "LanguageDetectionResults",
    type: {
        name: "Composite",
        className: "LanguageDetectionTaskResult",
        uberParent: "AnalyzeTextTaskResult",
        polymorphicDiscriminator: AnalyzeTextTaskResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextTaskResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "LanguageDetectionResult"
                }
            } })
    }
};
export const AnalyzeBatchAction = {
    serializedName: "AnalyzeBatchAction",
    type: {
        name: "Composite",
        className: "AnalyzeBatchAction",
        uberParent: "BatchActionState",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, BatchActionState.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const AnalyzeTextLROResult = {
    serializedName: "AnalyzeTextLROResult",
    type: {
        name: "Composite",
        className: "AnalyzeTextLROResult",
        uberParent: "TaskState",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign(Object.assign({}, TaskState.type.modelProperties), BatchActionState.type.modelProperties), { kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const AnalyzeTextJobState = {
    type: {
        name: "Composite",
        className: "AnalyzeTextJobState",
        modelProperties: Object.assign(Object.assign(Object.assign({}, JobState.type.modelProperties), TasksState.type.modelProperties), AnalyzeTextJobStatistics.type.modelProperties)
    }
};
export const ActionPrebuilt = {
    type: {
        name: "Composite",
        className: "ActionPrebuilt",
        modelProperties: Object.assign(Object.assign({}, ActionCommon.type.modelProperties), { modelVersion: {
                defaultValue: "latest",
                serializedName: "modelVersion",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ActionCustom = {
    type: {
        name: "Composite",
        className: "ActionCustom",
        modelProperties: Object.assign(Object.assign({}, ActionCommon.type.modelProperties), { projectName: {
                serializedName: "projectName",
                required: true,
                type: {
                    name: "String"
                }
            }, deploymentName: {
                serializedName: "deploymentName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const CustomEntitiesResult = {
    type: {
        name: "Composite",
        className: "CustomEntitiesResult",
        modelProperties: Object.assign(Object.assign({}, CustomResult.type.modelProperties), { documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomEntitiesResultDocumentsItem"
                        }
                    }
                }
            } })
    }
};
export const CustomLabelClassificationResult = {
    type: {
        name: "Composite",
        className: "CustomLabelClassificationResult",
        modelProperties: Object.assign(Object.assign({}, CustomResult.type.modelProperties), { documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomLabelClassificationResultDocumentsItem"
                        }
                    }
                }
            } })
    }
};
export const EntitiesDocumentResult = {
    type: {
        name: "Composite",
        className: "EntitiesDocumentResult",
        modelProperties: Object.assign(Object.assign({}, DocumentResult.type.modelProperties), { entities: {
                serializedName: "entities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Entity"
                        }
                    }
                }
            } })
    }
};
export const ClassificationDocumentResult = {
    type: {
        name: "Composite",
        className: "ClassificationDocumentResult",
        modelProperties: Object.assign(Object.assign({}, DocumentResult.type.modelProperties), { classifications: {
                serializedName: "class",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClassificationCategory"
                        }
                    }
                }
            } })
    }
};
export const HealthcareEntitiesDocumentResult = {
    type: {
        name: "Composite",
        className: "HealthcareEntitiesDocumentResult",
        modelProperties: Object.assign(Object.assign({}, DocumentResult.type.modelProperties), { entities: {
                serializedName: "entities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthcareEntity"
                        }
                    }
                }
            }, relations: {
                serializedName: "relations",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthcareRelation"
                        }
                    }
                }
            } })
    }
};
export const SentimentDocumentResult = {
    type: {
        name: "Composite",
        className: "SentimentDocumentResult",
        modelProperties: Object.assign(Object.assign({}, DocumentResult.type.modelProperties), { sentiment: {
                serializedName: "sentiment",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["positive", "neutral", "negative", "mixed"]
                }
            }, confidenceScores: {
                serializedName: "confidenceScores",
                type: {
                    name: "Composite",
                    className: "SentimentConfidenceScores"
                }
            }, sentences: {
                serializedName: "sentences",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SentenceSentiment"
                        }
                    }
                }
            } })
    }
};
export const LinkedEntitiesDocumentResult = {
    type: {
        name: "Composite",
        className: "LinkedEntitiesDocumentResult",
        modelProperties: Object.assign(Object.assign({}, DocumentResult.type.modelProperties), { entities: {
                serializedName: "entities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedEntity"
                        }
                    }
                }
            } })
    }
};
export const PiiEntitiesDocumentResult = {
    type: {
        name: "Composite",
        className: "PiiEntitiesDocumentResult",
        modelProperties: Object.assign(Object.assign({}, DocumentResult.type.modelProperties), { redactedText: {
                serializedName: "redactedText",
                required: true,
                type: {
                    name: "String"
                }
            }, entities: {
                serializedName: "entities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Entity"
                        }
                    }
                }
            } })
    }
};
export const ExtractedSummaryDocumentResult = {
    type: {
        name: "Composite",
        className: "ExtractedSummaryDocumentResult",
        modelProperties: Object.assign(Object.assign({}, DocumentResult.type.modelProperties), { sentences: {
                serializedName: "sentences",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SummarySentence"
                        }
                    }
                }
            } })
    }
};
export const KeyPhrasesDocumentResult = {
    type: {
        name: "Composite",
        className: "KeyPhrasesDocumentResult",
        modelProperties: Object.assign(Object.assign({}, DocumentResult.type.modelProperties), { keyPhrases: {
                serializedName: "keyPhrases",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
export const LanguageDetectionDocumentResult = {
    type: {
        name: "Composite",
        className: "LanguageDetectionDocumentResult",
        modelProperties: Object.assign(Object.assign({}, DocumentResult.type.modelProperties), { detectedLanguage: {
                serializedName: "detectedLanguage",
                type: {
                    name: "Composite",
                    className: "DetectedLanguage"
                }
            } })
    }
};
export const AbstractiveSummaryDocumentResult = {
    type: {
        name: "Composite",
        className: "AbstractiveSummaryDocumentResult",
        modelProperties: Object.assign(Object.assign({}, DocumentResult.type.modelProperties), { summaries: {
                serializedName: "summaries",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AbstractiveSummary"
                        }
                    }
                }
            } })
    }
};
export const HealthcareResult = {
    type: {
        name: "Composite",
        className: "HealthcareResult",
        modelProperties: Object.assign(Object.assign({}, PreBuiltResult.type.modelProperties), { documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthcareResultDocumentsItem"
                        }
                    }
                }
            } })
    }
};
export const SentimentResponse = {
    type: {
        name: "Composite",
        className: "SentimentResponse",
        modelProperties: Object.assign(Object.assign({}, PreBuiltResult.type.modelProperties), { documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SentimentResponseDocumentsItem"
                        }
                    }
                }
            } })
    }
};
export const EntitiesResult = {
    type: {
        name: "Composite",
        className: "EntitiesResult",
        modelProperties: Object.assign(Object.assign({}, PreBuiltResult.type.modelProperties), { documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntitiesResultDocumentsItem"
                        }
                    }
                }
            } })
    }
};
export const EntityLinkingResult = {
    type: {
        name: "Composite",
        className: "EntityLinkingResult",
        modelProperties: Object.assign(Object.assign({}, PreBuiltResult.type.modelProperties), { documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EntityLinkingResultDocumentsItem"
                        }
                    }
                }
            } })
    }
};
export const PiiResult = {
    type: {
        name: "Composite",
        className: "PiiResult",
        modelProperties: Object.assign(Object.assign({}, PreBuiltResult.type.modelProperties), { documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PiiResultDocumentsItem"
                        }
                    }
                }
            } })
    }
};
export const ExtractiveSummarizationResult = {
    type: {
        name: "Composite",
        className: "ExtractiveSummarizationResult",
        modelProperties: Object.assign(Object.assign({}, PreBuiltResult.type.modelProperties), { documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExtractedSummaryDocumentResult"
                        }
                    }
                }
            } })
    }
};
export const KeyPhraseResult = {
    type: {
        name: "Composite",
        className: "KeyPhraseResult",
        modelProperties: Object.assign(Object.assign({}, PreBuiltResult.type.modelProperties), { documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KeyPhraseResultDocumentsItem"
                        }
                    }
                }
            } })
    }
};
export const LanguageDetectionResult = {
    type: {
        name: "Composite",
        className: "LanguageDetectionResult",
        modelProperties: Object.assign(Object.assign({}, PreBuiltResult.type.modelProperties), { documents: {
                serializedName: "documents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LanguageDetectionDocumentResult"
                        }
                    }
                }
            } })
    }
};
export const AbstractiveSummarizationResult = {
    type: {
        name: "Composite",
        className: "AbstractiveSummarizationResult",
        modelProperties: Object.assign(Object.assign({}, AbstractiveSummarizationResultBase.type.modelProperties), PreBuiltResult.type.modelProperties)
    }
};
export const AbstractiveSummarizationAction = {
    type: {
        name: "Composite",
        className: "AbstractiveSummarizationAction",
        modelProperties: Object.assign(Object.assign({}, AbstractiveSummarizationTaskParametersBase.type.modelProperties), ActionPrebuilt.type.modelProperties)
    }
};
export const CustomEntitiesLROTask = {
    serializedName: "CustomEntityRecognition",
    type: {
        name: "Composite",
        className: "CustomEntitiesLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "CustomEntityRecognitionAction"
                }
            } })
    }
};
export const CustomSingleLabelClassificationLROTask = {
    serializedName: "CustomSingleLabelClassification",
    type: {
        name: "Composite",
        className: "CustomSingleLabelClassificationLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "CustomSingleLabelClassificationAction"
                }
            } })
    }
};
export const CustomMultiLabelClassificationLROTask = {
    serializedName: "CustomMultiLabelClassification",
    type: {
        name: "Composite",
        className: "CustomMultiLabelClassificationLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "CustomMultiLabelClassificationAction"
                }
            } })
    }
};
export const HealthcareLROTask = {
    serializedName: "Healthcare",
    type: {
        name: "Composite",
        className: "HealthcareLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "HealthcareAction"
                }
            } })
    }
};
export const SentimentAnalysisLROTask = {
    serializedName: "SentimentAnalysis",
    type: {
        name: "Composite",
        className: "SentimentAnalysisLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "SentimentAnalysisAction"
                }
            } })
    }
};
export const EntitiesLROTask = {
    serializedName: "EntityRecognition",
    type: {
        name: "Composite",
        className: "EntitiesLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "EntityRecognitionAction"
                }
            } })
    }
};
export const EntityLinkingLROTask = {
    serializedName: "EntityLinking",
    type: {
        name: "Composite",
        className: "EntityLinkingLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "EntityLinkingAction"
                }
            } })
    }
};
export const PiiLROTask = {
    serializedName: "PiiEntityRecognition",
    type: {
        name: "Composite",
        className: "PiiLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "PiiEntityRecognitionAction"
                }
            } })
    }
};
export const ExtractiveSummarizationLROTask = {
    serializedName: "ExtractiveSummarization",
    type: {
        name: "Composite",
        className: "ExtractiveSummarizationLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "ExtractiveSummarizationAction"
                }
            } })
    }
};
export const KeyPhraseLROTask = {
    serializedName: "KeyPhraseExtraction",
    type: {
        name: "Composite",
        className: "KeyPhraseLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "KeyPhraseExtractionAction"
                }
            } })
    }
};
export const AbstractiveSummarizationLROTask = {
    serializedName: "AbstractiveSummarization",
    type: {
        name: "Composite",
        className: "AbstractiveSummarizationLROTask",
        uberParent: "AnalyzeBatchAction",
        polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeBatchAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "AbstractiveSummarizationAction"
                }
            } })
    }
};
export const EntityRecognitionLROResult = {
    serializedName: "EntityRecognitionLROResults",
    type: {
        name: "Composite",
        className: "EntityRecognitionLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "EntitiesResult"
                }
            } })
    }
};
export const CustomEntityRecognitionLROResult = {
    serializedName: "CustomEntityRecognitionLROResults",
    type: {
        name: "Composite",
        className: "CustomEntityRecognitionLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "CustomEntitiesResult"
                }
            } })
    }
};
export const CustomSingleLabelClassificationLROResult = {
    serializedName: "CustomSingleLabelClassificationLROResults",
    type: {
        name: "Composite",
        className: "CustomSingleLabelClassificationLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "CustomLabelClassificationResult"
                }
            } })
    }
};
export const CustomMultiLabelClassificationLROResult = {
    serializedName: "CustomMultiLabelClassificationLROResults",
    type: {
        name: "Composite",
        className: "CustomMultiLabelClassificationLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "CustomLabelClassificationResult"
                }
            } })
    }
};
export const EntityLinkingLROResult = {
    serializedName: "EntityLinkingLROResults",
    type: {
        name: "Composite",
        className: "EntityLinkingLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "EntityLinkingResult"
                }
            } })
    }
};
export const PiiEntityRecognitionLROResult = {
    serializedName: "PiiEntityRecognitionLROResults",
    type: {
        name: "Composite",
        className: "PiiEntityRecognitionLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "PiiResult"
                }
            } })
    }
};
export const ExtractiveSummarizationLROResult = {
    serializedName: "ExtractiveSummarizationLROResults",
    type: {
        name: "Composite",
        className: "ExtractiveSummarizationLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "ExtractiveSummarizationResult"
                }
            } })
    }
};
export const HealthcareLROResult = {
    serializedName: "HealthcareLROResults",
    type: {
        name: "Composite",
        className: "HealthcareLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "HealthcareResult"
                }
            } })
    }
};
export const SentimentLROResult = {
    serializedName: "SentimentAnalysisLROResults",
    type: {
        name: "Composite",
        className: "SentimentLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "SentimentResponse"
                }
            } })
    }
};
export const KeyPhraseExtractionLROResult = {
    serializedName: "KeyPhraseExtractionLROResults",
    type: {
        name: "Composite",
        className: "KeyPhraseExtractionLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "KeyPhraseResult"
                }
            } })
    }
};
export const AbstractiveSummarizationLROResult = {
    serializedName: "AbstractiveSummarizationLROResults",
    type: {
        name: "Composite",
        className: "AbstractiveSummarizationLROResult",
        uberParent: "AnalyzeTextLROResult",
        polymorphicDiscriminator: AnalyzeTextLROResult.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AnalyzeTextLROResult.type.modelProperties), { results: {
                serializedName: "results",
                type: {
                    name: "Composite",
                    className: "AbstractiveSummarizationResult"
                }
            } })
    }
};
export const EntityLinkingAction = {
    type: {
        name: "Composite",
        className: "EntityLinkingAction",
        modelProperties: Object.assign(Object.assign({}, ActionPrebuilt.type.modelProperties), { stringIndexType: {
                defaultValue: "Utf16CodeUnit",
                serializedName: "stringIndexType",
                type: {
                    name: "String"
                }
            } })
    }
};
export const EntityRecognitionAction = {
    type: {
        name: "Composite",
        className: "EntityRecognitionAction",
        modelProperties: Object.assign(Object.assign({}, ActionPrebuilt.type.modelProperties), { stringIndexType: {
                defaultValue: "Utf16CodeUnit",
                serializedName: "stringIndexType",
                type: {
                    name: "String"
                }
            } })
    }
};
export const KeyPhraseExtractionAction = {
    type: {
        name: "Composite",
        className: "KeyPhraseExtractionAction",
        modelProperties: Object.assign({}, ActionPrebuilt.type.modelProperties)
    }
};
export const PiiEntityRecognitionAction = {
    type: {
        name: "Composite",
        className: "PiiEntityRecognitionAction",
        modelProperties: Object.assign(Object.assign({}, ActionPrebuilt.type.modelProperties), { domainFilter: {
                defaultValue: "none",
                serializedName: "domain",
                type: {
                    name: "String"
                }
            }, categoriesFilter: {
                constraints: {
                    UniqueItems: true
                },
                serializedName: "piiCategories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, stringIndexType: {
                defaultValue: "Utf16CodeUnit",
                serializedName: "stringIndexType",
                type: {
                    name: "String"
                }
            } })
    }
};
export const LanguageDetectionAction = {
    type: {
        name: "Composite",
        className: "LanguageDetectionAction",
        modelProperties: Object.assign({}, ActionPrebuilt.type.modelProperties)
    }
};
export const SentimentAnalysisAction = {
    type: {
        name: "Composite",
        className: "SentimentAnalysisAction",
        modelProperties: Object.assign(Object.assign({}, ActionPrebuilt.type.modelProperties), { includeOpinionMining: {
                defaultValue: false,
                serializedName: "opinionMining",
                type: {
                    name: "Boolean"
                }
            }, stringIndexType: {
                defaultValue: "Utf16CodeUnit",
                serializedName: "stringIndexType",
                type: {
                    name: "String"
                }
            } })
    }
};
export const HealthcareAction = {
    type: {
        name: "Composite",
        className: "HealthcareAction",
        modelProperties: Object.assign(Object.assign({}, ActionPrebuilt.type.modelProperties), { stringIndexType: {
                defaultValue: "Utf16CodeUnit",
                serializedName: "stringIndexType",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ExtractiveSummarizationAction = {
    type: {
        name: "Composite",
        className: "ExtractiveSummarizationAction",
        modelProperties: Object.assign(Object.assign({}, ActionPrebuilt.type.modelProperties), { maxSentenceCount: {
                defaultValue: 3,
                serializedName: "sentenceCount",
                type: {
                    name: "Number"
                }
            }, orderBy: {
                defaultValue: "Offset",
                serializedName: "sortBy",
                type: {
                    name: "String"
                }
            }, stringIndexType: {
                defaultValue: "Utf16CodeUnit",
                serializedName: "stringIndexType",
                type: {
                    name: "String"
                }
            } })
    }
};
export const CustomEntityRecognitionAction = {
    type: {
        name: "Composite",
        className: "CustomEntityRecognitionAction",
        modelProperties: Object.assign(Object.assign({}, ActionCustom.type.modelProperties), { stringIndexType: {
                defaultValue: "Utf16CodeUnit",
                serializedName: "stringIndexType",
                type: {
                    name: "String"
                }
            } })
    }
};
export const CustomSingleLabelClassificationAction = {
    type: {
        name: "Composite",
        className: "CustomSingleLabelClassificationAction",
        modelProperties: Object.assign({}, ActionCustom.type.modelProperties)
    }
};
export const CustomMultiLabelClassificationAction = {
    type: {
        name: "Composite",
        className: "CustomMultiLabelClassificationAction",
        modelProperties: Object.assign({}, ActionCustom.type.modelProperties)
    }
};
export const CustomEntitiesResultDocumentsItem = {
    type: {
        name: "Composite",
        className: "CustomEntitiesResultDocumentsItem",
        modelProperties: Object.assign({}, EntitiesDocumentResult.type.modelProperties)
    }
};
export const EntitiesResultDocumentsItem = {
    type: {
        name: "Composite",
        className: "EntitiesResultDocumentsItem",
        modelProperties: Object.assign({}, EntitiesDocumentResult.type.modelProperties)
    }
};
export const CustomLabelClassificationResultDocumentsItem = {
    type: {
        name: "Composite",
        className: "CustomLabelClassificationResultDocumentsItem",
        modelProperties: Object.assign({}, ClassificationDocumentResult.type.modelProperties)
    }
};
export const HealthcareResultDocumentsItem = {
    type: {
        name: "Composite",
        className: "HealthcareResultDocumentsItem",
        modelProperties: Object.assign({}, HealthcareEntitiesDocumentResult.type.modelProperties)
    }
};
export const SentimentResponseDocumentsItem = {
    type: {
        name: "Composite",
        className: "SentimentResponseDocumentsItem",
        modelProperties: Object.assign({}, SentimentDocumentResult.type.modelProperties)
    }
};
export const EntityLinkingResultDocumentsItem = {
    type: {
        name: "Composite",
        className: "EntityLinkingResultDocumentsItem",
        modelProperties: Object.assign({}, LinkedEntitiesDocumentResult.type.modelProperties)
    }
};
export const PiiResultDocumentsItem = {
    type: {
        name: "Composite",
        className: "PiiResultDocumentsItem",
        modelProperties: Object.assign({}, PiiEntitiesDocumentResult.type.modelProperties)
    }
};
export const KeyPhraseResultDocumentsItem = {
    type: {
        name: "Composite",
        className: "KeyPhraseResultDocumentsItem",
        modelProperties: Object.assign({}, KeyPhrasesDocumentResult.type.modelProperties)
    }
};
export const GeneratedClientAnalyzeBatchHeaders = {
    type: {
        name: "Composite",
        className: "GeneratedClientAnalyzeBatchHeaders",
        modelProperties: {
            operationLocation: {
                serializedName: "operation-location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AnalyzeTextCancelJobHeaders = {
    type: {
        name: "Composite",
        className: "AnalyzeTextCancelJobHeaders",
        modelProperties: {
            operationLocation: {
                serializedName: "operation-location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export let discriminators = {
    AnalyzeAction: AnalyzeAction,
    AnalyzeTextTaskResult: AnalyzeTextTaskResult,
    "AnalyzeAction.EntityLinking": AnalyzeTextEntityLinkingInput,
    "AnalyzeAction.EntityRecognition": AnalyzeTextEntityRecognitionInput,
    "AnalyzeAction.KeyPhraseExtraction": AnalyzeTextKeyPhraseExtractionInput,
    "AnalyzeAction.PiiEntityRecognition": AnalyzeTextPiiEntitiesRecognitionInput,
    "AnalyzeAction.LanguageDetection": AnalyzeTextLanguageDetectionInput,
    "AnalyzeAction.SentimentAnalysis": AnalyzeTextSentimentAnalysisInput,
    "AnalyzeTextTaskResult.SentimentAnalysisResults": SentimentTaskResult,
    "AnalyzeTextTaskResult.EntityRecognitionResults": EntitiesTaskResult,
    "AnalyzeTextTaskResult.EntityLinkingResults": EntityLinkingTaskResult,
    "AnalyzeTextTaskResult.PiiEntityRecognitionResults": PiiTaskResult,
    "AnalyzeTextTaskResult.KeyPhraseExtractionResults": KeyPhraseTaskResult,
    "AnalyzeTextTaskResult.LanguageDetectionResults": LanguageDetectionTaskResult,
    "BatchActionState.AnalyzeBatchAction": AnalyzeBatchAction,
    "TaskState.AnalyzeTextLROResult": AnalyzeTextLROResult,
    "AnalyzeBatchAction.CustomEntityRecognition": CustomEntitiesLROTask,
    "AnalyzeBatchAction.CustomSingleLabelClassification": CustomSingleLabelClassificationLROTask,
    "AnalyzeBatchAction.CustomMultiLabelClassification": CustomMultiLabelClassificationLROTask,
    "AnalyzeBatchAction.Healthcare": HealthcareLROTask,
    "AnalyzeBatchAction.SentimentAnalysis": SentimentAnalysisLROTask,
    "AnalyzeBatchAction.EntityRecognition": EntitiesLROTask,
    "AnalyzeBatchAction.EntityLinking": EntityLinkingLROTask,
    "AnalyzeBatchAction.PiiEntityRecognition": PiiLROTask,
    "AnalyzeBatchAction.ExtractiveSummarization": ExtractiveSummarizationLROTask,
    "AnalyzeBatchAction.KeyPhraseExtraction": KeyPhraseLROTask,
    "AnalyzeBatchAction.AbstractiveSummarization": AbstractiveSummarizationLROTask,
    "AnalyzeTextLROResult.EntityRecognitionLROResults": EntityRecognitionLROResult,
    "AnalyzeTextLROResult.CustomEntityRecognitionLROResults": CustomEntityRecognitionLROResult,
    "AnalyzeTextLROResult.CustomSingleLabelClassificationLROResults": CustomSingleLabelClassificationLROResult,
    "AnalyzeTextLROResult.CustomMultiLabelClassificationLROResults": CustomMultiLabelClassificationLROResult,
    "AnalyzeTextLROResult.EntityLinkingLROResults": EntityLinkingLROResult,
    "AnalyzeTextLROResult.PiiEntityRecognitionLROResults": PiiEntityRecognitionLROResult,
    "AnalyzeTextLROResult.ExtractiveSummarizationLROResults": ExtractiveSummarizationLROResult,
    "AnalyzeTextLROResult.HealthcareLROResults": HealthcareLROResult,
    "AnalyzeTextLROResult.SentimentAnalysisLROResults": SentimentLROResult,
    "AnalyzeTextLROResult.KeyPhraseExtractionLROResults": KeyPhraseExtractionLROResult,
    "AnalyzeTextLROResult.AbstractiveSummarizationLROResults": AbstractiveSummarizationLROResult
};
//# sourceMappingURL=mappers.js.map