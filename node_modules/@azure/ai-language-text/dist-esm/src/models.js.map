{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/models.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAmBL,cAAc,EACd,mBAAmB,GAcpB,MAAM,aAAa,CAAC;AA0DrB;;GAEG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG;IAChC,aAAa,EAAE,eAAe;IAC9B,iBAAiB,EAAE,mBAAmB;IACtC,mBAAmB,EAAE,qBAAqB;IAC1C,oBAAoB,EAAE,sBAAsB;IAC5C,iBAAiB,EAAE,mBAAmB;IACtC,iBAAiB,EAAE,mBAAmB;CAC9B,CAAC;AAEX;;GAEG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG;IACrC,iBAAiB,EAAE,mBAAmB;IACtC,iBAAiB,EAAE,mBAAmB;IACtC,oBAAoB,EAAE,sBAAsB;IAC5C,mBAAmB,EAAE,qBAAqB;IAC1C,aAAa,EAAE,eAAe;IAC9B,UAAU,EAAE,YAAY;IACxB,uBAAuB,EAAE,yBAAyB;IAClD,wBAAwB,EAAE,0BAA0B;IACpD,uBAAuB,EAAE,yBAAyB;IAClD,+BAA+B,EAAE,iCAAiC;IAClE,8BAA8B,EAAE,gCAAgC;CACxD,CAAC;AA2CX;;GAEG;AACH,MAAM,CAAC,MAAM,0BAA0B,mCAAQ,cAAc,GAAK,mBAAmB,CAAE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AbstractiveSummary,\n  AssessmentSentiment,\n  ClassificationCategory,\n  CustomEntityRecognitionAction,\n  CustomMultiLabelClassificationAction,\n  CustomSingleLabelClassificationAction,\n  DetectedLanguage,\n  DocumentSentimentLabel,\n  DocumentWarning,\n  Entity,\n  EntityDataSource,\n  EntityLinkingAction,\n  EntityRecognitionAction,\n  ExtractiveSummarizationAction,\n  HealthcareAction,\n  HealthcareAssertion,\n  HealthcareEntityCategory,\n  KeyPhraseExtractionAction,\n  KnownErrorCode,\n  KnownInnerErrorCode,\n  LanguageDetectionAction,\n  LinkedEntity,\n  PiiEntityRecognitionAction,\n  RelationType,\n  SentenceSentimentLabel,\n  SentimentAnalysisAction,\n  SentimentConfidenceScores,\n  StringIndexType,\n  SummarySentence,\n  TargetConfidenceScores,\n  TextDocumentBatchStatistics,\n  TextDocumentStatistics,\n  TokenSentimentLabel,\n} from \"./generated\";\nimport { CommonClientOptions, OperationOptions } from \"@azure/core-client\";\nimport { OperationState, SimplePollerLike } from \"@azure/core-lro\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\n/**\n * Configuration options for {@link TextAnalysisClient}.\n */\nexport interface TextAnalysisClientOptions extends CommonClientOptions {\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  defaultCountryHint?: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  defaultLanguage?: string;\n  /**\n   * The version of the Cognitive Language Service API to use.\n   */\n  serviceVersion?: string;\n}\n\n/**\n * Options common to all operations.\n */\nexport interface TextAnalysisOperationOptions extends OperationOptions {\n  /**\n   * If set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Options for the begin analyze actions operation.\n */\nexport interface BeginAnalyzeBatchOptions extends TextAnalysisOperationOptions {\n  /**\n   * Time delay between poll requests, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * The operation's display name.\n   */\n  displayName?: string;\n}\n\n/**\n * Options for the begin analyze actions operation.\n */\nexport interface RestoreAnalyzeBatchPollerOptions extends TextAnalysisOperationOptions {\n  /**\n   * Time delay between poll requests, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n}\n\n/**\n * Type of actions supported by the {@link TextAnalysisClient.analyze} method.\n */\nexport const AnalyzeActionNames = {\n  EntityLinking: \"EntityLinking\",\n  EntityRecognition: \"EntityRecognition\",\n  KeyPhraseExtraction: \"KeyPhraseExtraction\",\n  PiiEntityRecognition: \"PiiEntityRecognition\",\n  LanguageDetection: \"LanguageDetection\",\n  SentimentAnalysis: \"SentimentAnalysis\",\n} as const;\n\n/**\n * Type of actions supported by the {@link TextAnalysisClient.beginAnalyzeBatch} method.\n */\nexport const AnalyzeBatchActionNames = {\n  SentimentAnalysis: \"SentimentAnalysis\",\n  EntityRecognition: \"EntityRecognition\",\n  PiiEntityRecognition: \"PiiEntityRecognition\",\n  KeyPhraseExtraction: \"KeyPhraseExtraction\",\n  EntityLinking: \"EntityLinking\",\n  Healthcare: \"Healthcare\",\n  ExtractiveSummarization: \"ExtractiveSummarization\",\n  AbstractiveSummarization: \"AbstractiveSummarization\",\n  CustomEntityRecognition: \"CustomEntityRecognition\",\n  CustomSingleLabelClassification: \"CustomSingleLabelClassification\",\n  CustomMultiLabelClassification: \"CustomMultiLabelClassification\",\n} as const;\n\n/**\n * Type of actions supported by the {@link TextAnalysisClient.analyze} method.\n */\nexport type AnalyzeActionName = keyof typeof AnalyzeActionNames;\n\n/**\n * The type of parameters for every action in ${@link AnalyzeActionNames}.\n */\nexport type AnalyzeActionParameters<ActionName extends AnalyzeActionName> = {\n  EntityLinking: EntityLinkingAction;\n  EntityRecognition: EntityRecognitionAction;\n  PiiEntityRecognition: PiiEntityRecognitionAction;\n  KeyPhraseExtraction: KeyPhraseExtractionAction;\n  SentimentAnalysis: SentimentAnalysisAction;\n  LanguageDetection: LanguageDetectionAction;\n}[ActionName];\n\n/**\n * The type of results of every action in ${@link AnalyzeActionNames}.\n */\nexport type AnalyzeResult<ActionName extends AnalyzeActionName> = {\n  EntityLinking: EntityLinkingResult[];\n  EntityRecognition: EntityRecognitionResult[];\n  PiiEntityRecognition: PiiEntityRecognitionResult[];\n  KeyPhraseExtraction: KeyPhraseExtractionResult[];\n  SentimentAnalysis: SentimentAnalysisResult[];\n  LanguageDetection: LanguageDetectionResult[];\n}[ActionName];\n\n/** Options for an Abstractive Summarization action. */\nexport interface AbstractiveSummarizationAction {\n  /** The approximate number of sentences to be part of the summary. */\n  sentenceCount?: number;\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.\n   *\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/**\n * Enum of possible error codes of a {@link TextAnalysisError}.\n */\nexport const KnownTextAnalysisErrorCode = { ...KnownErrorCode, ...KnownInnerErrorCode };\n\n/**\n * Type describing an API error.\n */\nexport interface TextAnalysisError {\n  /**\n   * A code describing the kind of error produced. See {@link KnownTextAnalysisErrorCode}.\n   */\n  readonly code: string;\n  /**\n   * A message from the service explaining the error\n   */\n  readonly message: string;\n  /**\n   * The target of the particular error (for example, the name of an invalid parameter)\n   */\n  readonly target?: string;\n}\n\n/**\n * Base type for results of an action corresponding to a single input document.\n */\nexport interface TextAnalysisSuccessResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * Statistics about the input document and how it was processed by the service.\n   * This property will have a value when includeStatistics is set to true in\n   * the client call.\n   */\n  readonly statistics?: TextDocumentStatistics;\n\n  /**\n   * An array of warning data corresponding to this document.\n   *\n   * If no warnings were returned, this array will be empty.\n   */\n  readonly warnings: DocumentWarning[];\n\n  /**\n   * Discriminant to determine if this is an error result.\n   */\n  readonly error?: undefined;\n}\n\n/**\n * Base type for error results of an action corresponding to a single document.\n */\nexport interface TextAnalysisErrorResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * The Error for this document result.\n   */\n  readonly error: TextAnalysisError;\n}\n\n/**\n * The result of an entity recognition action on a single document.\n */\nexport type EntityRecognitionResult = EntityRecognitionSuccessResult | EntityRecognitionErrorResult;\n\n/**\n * The result of an entity recognition action on a single document, containing\n * a collection of {@link Entity} objects identified in that document.\n */\nexport interface EntityRecognitionSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: Entity[];\n}\n\n/**\n * An error result from an entity recognition action on a single document.\n */\nexport type EntityRecognitionErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of an entity recognition action on a single document.\n */\nexport type PiiEntityRecognitionResult =\n  | PiiEntityRecognitionSuccessResult\n  | PiiEntityRecognitionErrorResult;\n\n/**\n * The result of a pii entity recognition action on a single document,\n * containing the collection of {@link Entity} objects identified in that\n * document.\n */\nexport interface PiiEntityRecognitionSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: Entity[];\n  /**\n   * The text redacted.\n   */\n  readonly redactedText: string;\n}\n\n/**\n * An error result from a pii entity recognition action on a single document.\n */\nexport type PiiEntityRecognitionErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of an entity linking action on a single document.\n */\nexport type EntityLinkingResult = EntityLinkingSuccessResult | EntityLinkingErrorResult;\n\n/**\n * The result of a entity linking action on a single document, containing a\n * collection of the {@link LinkedEntity} objects identified in that document.\n */\nexport interface EntityLinkingSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: LinkedEntity[];\n}\n\n/**\n * An error result from an entity linking action on a single document.\n */\nexport type EntityLinkingErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of a language detection action on a single document.\n */\nexport type LanguageDetectionResult = LanguageDetectionSuccessResult | LanguageDetectionErrorResult;\n\n/**\n * The result of a language detection action on a single document,\n * containing a prediction of what language the document is written in.\n */\nexport interface LanguageDetectionSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The top detected language by confidence score.\n   */\n  readonly primaryLanguage: DetectedLanguage;\n}\n\n/**\n * An error result from a language detection action on a single document.\n */\nexport type LanguageDetectionErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of a sentiment analysis action on a single document.\n */\nexport type KeyPhraseExtractionResult =\n  | KeyPhraseExtractionSuccessResult\n  | KeyPhraseExtractionErrorResult;\n\n/**\n * The result of a key phrase extraction action on a single document,\n * containing a collection of the key phrases identified in that document.\n */\nexport interface KeyPhraseExtractionSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * A list of representative words or phrases. The number of key phrases\n   * returned is proportional to the number of words in the input document.\n   */\n  readonly keyPhrases: string[];\n}\n\n/**\n * An error result from a key phrase extraction action on a single document.\n */\nexport type KeyPhraseExtractionErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of a sentiment analysis action on a single document.\n */\nexport type SentimentAnalysisResult = SentimentAnalysisSuccessResult | SentimentAnalysisErrorResult;\n\n/**\n * The result of a sentiment analysis action on a single document,\n * containing the predicted sentiment for each sentence as well as for the full\n * document.\n */\nexport interface SentimentAnalysisSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * Predicted sentiment for document. For a list of possible values, see {@link DocumentSentimentLabel}\n   */\n  readonly sentiment: DocumentSentimentLabel;\n  /**\n   * Document level sentiment confidence scores between 0 and 1 for each\n   * sentiment class.\n   */\n  readonly confidenceScores: SentimentConfidenceScores;\n  /**\n   * The predicted sentiment for each sentence in the corresponding document.\n   */\n  readonly sentences: SentenceSentiment[];\n}\n\n/**\n * The predicted sentiment for a given span of text. For more information\n * regarding text sentiment, see {@link https://docs.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview}.\n */\nexport interface SentenceSentiment {\n  /**\n   * The sentence text.\n   */\n  readonly text: string;\n  /**\n   * The predicted Sentiment for the sentence. For a list of possible values,\n   * see {@link SentenceSentimentLabel}\n   */\n  readonly sentiment: SentenceSentimentLabel;\n  /**\n   * The sentiment confidence score between 0 and 1 for the sentence for all\n   * classes.\n   */\n  readonly confidenceScores: SentimentConfidenceScores;\n  /**\n   * The sentence text offset from the start of the document.\n   */\n  readonly offset: number;\n  /**\n   * The length of the sentence text.\n   */\n  readonly length: number;\n  /**\n   * The list of opinions mined from this sentence. For example in \"The food is\n   * good, but the service is bad\", the following two opinions will be returned:\n   * \"food is good\" and \"service is bad\".\n   *\n   * It is non-empty only returned if {@link includeOpinionMining} was set to\n   * `true`.\n   */\n  readonly opinions: Opinion[];\n}\n\n/**\n * TargetSentiment contains the predicted sentiment, confidence scores and other\n * information about a target of a product. A target of a product/service is a\n * key component of that product/service. For example in \"The food at Hotel Foo\n * is good\", \"food\" is a target of \"Hotel Foo\".\n */\nexport interface TargetSentiment {\n  /**\n   * The sentiment confidence score between 0 and 1 for the target for\n   * 'positive' and 'negative' labels.\n   */\n  readonly confidenceScores: TargetConfidenceScores;\n  /**\n   * The predicted Sentiment for the Target. For a list of possible values,\n   * see {@link TokenSentimentLabel}\n   */\n  readonly sentiment: TokenSentimentLabel;\n  /**\n   * The target text.\n   */\n  readonly text: string;\n  /**\n   * The Target text offset from the start of the sentence.\n   */\n  readonly offset: number;\n  /**\n   * The length of the Target text.\n   */\n  readonly length: number;\n}\n\n/**\n * A mined opinion object represents an opinion we've extracted from a sentence.\n * It consists of both a target that these assessments are about, and the actual\n * assessments themselves.\n */\nexport interface Opinion {\n  /**\n   * The target of a product/service that this assessment is about.\n   */\n  readonly target: TargetSentiment;\n  /**\n   * The actual assessments of the target.\n   */\n  readonly assessments: AssessmentSentiment[];\n}\n\n/**\n * A healthcare entity represented as a node in a directed graph where the edges are\n * a particular type of relationship between the source and target nodes.\n */\nexport interface HealthcareEntity extends Entity {\n  /**\n   * Normalized name for the entity. For example, the normalized text for \"histologically\" is \"histologic\".\n   */\n  readonly normalizedText?: string;\n  /**\n   * Whether the entity is negated.\n   */\n  readonly assertion?: HealthcareAssertion;\n  /**\n   * Entity references in known data sources.\n   */\n  readonly dataSources: EntityDataSource[];\n  /**\n   * Defines values for HealthcareEntityCategory.\n   * {@link KnownHealthcareEntityCategory} can be used interchangeably with HealthcareEntityCategory,\n   *  this enum contains the known values that the service supports.\n   * ### Known values supported by the service\n   * **BODY_STRUCTURE**\n   * **AGE**\n   * **GENDER**\n   * **EXAMINATION_NAME**\n   * **DATE**\n   * **DIRECTION**\n   * **FREQUENCY**\n   * **MEASUREMENT_VALUE**\n   * **MEASUREMENT_UNIT**\n   * **RELATIONAL_OPERATOR**\n   * **TIME**\n   * **GENE_OR_PROTEIN**\n   * **VARIANT**\n   * **ADMINISTRATIVE_EVENT**\n   * **CARE_ENVIRONMENT**\n   * **HEALTHCARE_PROFESSION**\n   * **DIAGNOSIS**\n   * **SYMPTOM_OR_SIGN**\n   * **CONDITION_QUALIFIER**\n   * **MEDICATION_CLASS**\n   * **MEDICATION_NAME**\n   * **DOSAGE**\n   * **MEDICATION_FORM**\n   * **MEDICATION_ROUTE**\n   * **FAMILY_RELATION**\n   * **TREATMENT_NAME**\n   */\n  readonly category: HealthcareEntityCategory;\n}\n\n/**\n * The type of different roles a healthcare entity can play in a relation.\n */\nexport type HealthcareEntityRelationRoleType = string;\n\n/**\n * A healthcare entity that plays a specific role in a relation.\n */\nexport interface HealthcareEntityRelationRole {\n  /**\n   * A healthcare entity\n   */\n  readonly entity: HealthcareEntity;\n  /**\n   * The role of the healthcare entity in a particular relation.\n   */\n  readonly name: HealthcareEntityRelationRoleType;\n}\n\n/**\n * A relationship between two or more healthcare entities.\n */\nexport interface HealthcareEntityRelation {\n  /**\n   * The type of the healthcare relation.\n   */\n  readonly relationType: RelationType;\n  /**\n   * The list of healthcare entities and their roles in the healthcare relation.\n   */\n  readonly roles: HealthcareEntityRelationRole[];\n  /**\n   * The confidence score between 0 and 1 of the extracted relation.\n   */\n  readonly confidenceScore?: number;\n}\n\n/**\n * The results of a successful healthcare analysis action for a single document.\n */\nexport interface HealthcareSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * Healthcare entities.\n   */\n  readonly entities: HealthcareEntity[];\n  /**\n   * Relations between healthcare entities.\n   */\n  readonly entityRelations: HealthcareEntityRelation[];\n}\n\n/**\n * An error result from the healthcare analysis action on a single document.\n */\nexport type HealthcareErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of the healthcare analysis action on a single document.\n */\nexport type HealthcareResult = HealthcareSuccessResult | HealthcareErrorResult;\n\n/**\n * The result of the extractive summarization action on a single document.\n */\nexport type ExtractiveSummarizationResult =\n  | ExtractiveSummarizationSuccessResult\n  | ExtractiveSummarizationErrorResult;\n\n/**\n * The result of the extractive summarization action on a single document,\n * containing a collection of the summary identified in that document.\n */\nexport interface ExtractiveSummarizationSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * A list of sentences composing a summary of the input document.\n   */\n  readonly sentences: SummarySentence[];\n}\n\n/**\n * An error result from the extractive summarization action on a single document.\n */\nexport type ExtractiveSummarizationErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of the abstractive summarization action on a single document.\n */\nexport type AbstractiveSummarizationResult =\n  | AbstractiveSummarizationSuccessResult\n  | AbstractiveSummarizationErrorResult;\n\n/**\n * The result of the abstractive summarization action on a single document,\n * containing a collection of the summaries identified for that document.\n */\nexport interface AbstractiveSummarizationSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * A list of summaries of the input document.\n   */\n  readonly summaries: AbstractiveSummary[];\n}\n\n/**\n * An error result from the abstractive summarization action on a single document.\n */\nexport type AbstractiveSummarizationErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of the custom entity recognition action on a single document.\n */\nexport type CustomEntityRecognitionResult =\n  | CustomEntityRecognitionSuccessResult\n  | CustomEntityRecognitionErrorResult;\n\n/**\n * The result of the custom entity recognition action on a single document,\n * containing a collection of the entities identified in that document.\n */\nexport interface CustomEntityRecognitionSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: Entity[];\n}\n\n/**\n * An error result from the custom entity recognition action on a single document.\n */\nexport type CustomEntityRecognitionErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of the single-label classification action on a single document.\n */\nexport type CustomSingleLabelClassificationResult =\n  | CustomSingleLabelClassificationSuccessResult\n  | CustomSingleLabelClassificationErrorResult;\n\n/**\n * The result of a successful single-label classification action on a single document,\n * containing the result of the classification.\n */\nexport interface CustomSingleLabelClassificationSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of classifications in the input document.\n   */\n  readonly classifications: ClassificationCategory[];\n}\n\n/**\n * An error result from the single-label classification action on a single document.\n */\nexport type CustomSingleLabelClassificationErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of the multi-label classification action on a multi document.\n */\nexport type CustomMultiLabelClassificationResult =\n  | CustomMultiLabelClassificationSuccessResult\n  | CustomMultiLabelClassificationErrorResult;\n\n/**\n * The result of a successful multi-label classification action on a multi document,\n * containing the result of the classification.\n */\nexport interface CustomMultiLabelClassificationSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of classifications in the input document.\n   */\n  readonly classifications: ClassificationCategory[];\n}\n\n/**\n * An error result from the multi-label classification action on a multi document.\n */\nexport type CustomMultiLabelClassificationErrorResult = TextAnalysisErrorResult;\n\n/**\n * Options common to all batch actions.\n */\nexport interface AnalyzeBatchActionCommon {\n  /**\n   * The name of the action.\n   */\n  actionName?: string;\n}\n\n/** Options for an entity linking batch action. */\nexport interface EntityLinkingBatchAction extends AnalyzeBatchActionCommon, EntityLinkingAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"EntityLinking\";\n}\n\n/** Options for an entity recognition batch action. */\nexport interface EntityRecognitionBatchAction\n  extends AnalyzeBatchActionCommon,\n    EntityRecognitionAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"EntityRecognition\";\n}\n\n/** Options for an key phrase extraction batch action. */\nexport interface KeyPhraseExtractionBatchAction\n  extends AnalyzeBatchActionCommon,\n    KeyPhraseExtractionAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"KeyPhraseExtraction\";\n}\n\n/** Options for a pii entity recognition batch action. */\nexport interface PiiEntityRecognitionBatchAction\n  extends AnalyzeBatchActionCommon,\n    PiiEntityRecognitionAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"PiiEntityRecognition\";\n}\n\n/** Options for a healthcare batch action. */\nexport interface HealthcareBatchAction extends AnalyzeBatchActionCommon, HealthcareAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"Healthcare\";\n}\n\n/** Options for a sentiment analysis batch action. */\nexport interface SentimentAnalysisBatchAction\n  extends AnalyzeBatchActionCommon,\n    SentimentAnalysisAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"SentimentAnalysis\";\n}\n\n/** Options for an extractive summarization batch action. */\nexport interface ExtractiveSummarizationBatchAction\n  extends AnalyzeBatchActionCommon,\n    ExtractiveSummarizationAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"ExtractiveSummarization\";\n}\n\n/** Options for an abstractive summarization batch action. */\nexport interface AbstractiveSummarizationBatchAction\n  extends AnalyzeBatchActionCommon,\n    AbstractiveSummarizationAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"AbstractiveSummarization\";\n}\n\n/** Options for a custom entity recognition batch action. */\nexport interface CustomEntityRecognitionBatchAction\n  extends AnalyzeBatchActionCommon,\n    CustomEntityRecognitionAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"CustomEntityRecognition\";\n}\n\n/** Options for a custom single-label classification batch action. */\nexport interface CustomSingleLabelClassificationBatchAction\n  extends AnalyzeBatchActionCommon,\n    CustomSingleLabelClassificationAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"CustomSingleLabelClassification\";\n}\n\n/** Options for a custom multi-label classification batch action. */\nexport interface CustomMultiLabelClassificationBatchAction\n  extends AnalyzeBatchActionCommon,\n    CustomMultiLabelClassificationAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"CustomMultiLabelClassification\";\n}\n\n/**\n * Batch of actions.\n */\nexport type AnalyzeBatchAction =\n  | EntityLinkingBatchAction\n  | EntityRecognitionBatchAction\n  | KeyPhraseExtractionBatchAction\n  | PiiEntityRecognitionBatchAction\n  | HealthcareBatchAction\n  | SentimentAnalysisBatchAction\n  | ExtractiveSummarizationBatchAction\n  | AbstractiveSummarizationBatchAction\n  | CustomEntityRecognitionBatchAction\n  | CustomSingleLabelClassificationBatchAction\n  | CustomMultiLabelClassificationBatchAction;\n\n/**\n * Type of actions supported by the {@link TextAnalysisClient.beginAnalyzeBatch} method.\n */\nexport type AnalyzeBatchActionName = keyof typeof AnalyzeBatchActionNames;\n\n/** The State of a batched action */\nexport interface BatchActionState<Kind extends AnalyzeBatchActionName> {\n  /**\n   * The kind of the action results.\n   */\n  readonly kind: Kind;\n  /**\n   * The name of the action.\n   */\n  readonly actionName?: string;\n  /**\n   * Action statistics.\n   */\n  readonly statistics?: TextDocumentBatchStatistics;\n}\n\n/**\n * Action metadata.\n */\nexport interface ActionMetadata {\n  /**\n   * The model version used to perform the action.\n   */\n  readonly modelVersion: string;\n}\n\n/**\n * Custom action metadata.\n */\nexport interface CustomActionMetadata {\n  /**\n   * The name of the project used to perform the action.\n   */\n  readonly projectName: string;\n  /**\n   * The name of the deployment used to perform the action.\n   */\n  readonly deploymentName: string;\n}\n\n/**\n * The state of a succeeded batched action.\n */\nexport interface BatchActionSuccessResult<T, Kind extends AnalyzeBatchActionName>\n  extends BatchActionState<Kind> {\n  /**\n   * The list of document results.\n   */\n  readonly results: T[];\n  /**\n   * When this action was completed by the service.\n   */\n  readonly completedOn: Date;\n  /**\n   * Discriminant to determine if that this is an error result.\n   */\n  readonly error?: undefined;\n}\n\n/**\n * The error of an analyze batch action.\n */\nexport interface BatchActionErrorResult<Kind extends AnalyzeBatchActionName>\n  extends BatchActionState<Kind> {\n  /**\n   * When this action was completed by the service.\n   */\n  readonly failedOn: Date;\n  /**\n   * The Error for this action result.\n   */\n  readonly error: TextAnalysisError;\n}\n\n/**\n * The result of a batched action.\n */\nexport type BatchActionResult<T, Kind extends AnalyzeBatchActionName> =\n  | BatchActionSuccessResult<T, Kind>\n  | BatchActionErrorResult<Kind>;\n\n/**\n * The result of an entity linking batch action.\n */\nexport type EntityLinkingBatchResult = ActionMetadata &\n  BatchActionResult<EntityLinkingResult, \"EntityLinking\">;\n\n/**\n * The result of an entity recognition batch action.\n */\nexport type EntityRecognitionBatchResult = ActionMetadata &\n  BatchActionResult<EntityRecognitionResult, \"EntityRecognition\">;\n\n/**\n * The result of a key phrase extraction batch action.\n */\nexport type KeyPhraseExtractionBatchResult = ActionMetadata &\n  BatchActionResult<KeyPhraseExtractionResult, \"KeyPhraseExtraction\">;\n\n/**\n * The result of a pii entity recognition batch action.\n */\nexport type PiiEntityRecognitionBatchResult = ActionMetadata &\n  BatchActionResult<PiiEntityRecognitionResult, \"PiiEntityRecognition\">;\n\n/**\n * The result of a sentiment analysis batch action.\n */\nexport type SentimentAnalysisBatchResult = ActionMetadata &\n  BatchActionResult<SentimentAnalysisResult, \"SentimentAnalysis\">;\n\n/**\n * The result of a healthcare batch action.\n */\nexport type HealthcareBatchResult = ActionMetadata &\n  BatchActionResult<HealthcareResult, \"Healthcare\">;\n\n/**\n * The result of an extractive summarization batch action.\n */\nexport type ExtractiveSummarizationBatchResult = ActionMetadata &\n  BatchActionResult<ExtractiveSummarizationResult, \"ExtractiveSummarization\">;\n\n/**\n * The result of an abstractive summarization batch action.\n */\nexport type AbstractiveSummarizationBatchResult = ActionMetadata &\n  BatchActionResult<AbstractiveSummarizationResult, \"AbstractiveSummarization\">;\n\n/**\n * The result of a custom entity recognition batch action.\n */\nexport type CustomEntityRecognitionBatchResult = CustomActionMetadata &\n  BatchActionResult<CustomEntityRecognitionResult, \"CustomEntityRecognition\">;\n\n/**\n * The result of a custom single-label classification batch action.\n */\nexport type CustomSingleLabelClassificationBatchResult = CustomActionMetadata &\n  BatchActionResult<CustomSingleLabelClassificationResult, \"CustomSingleLabelClassification\">;\n\n/**\n * The result of a custom multi-label classification batch action.\n */\nexport type CustomMultiLabelClassificationBatchResult = CustomActionMetadata &\n  BatchActionResult<CustomMultiLabelClassificationResult, \"CustomMultiLabelClassification\">;\n/**\n * Results of a batch of actions.\n */\nexport type AnalyzeBatchResult =\n  | EntityLinkingBatchResult\n  | EntityRecognitionBatchResult\n  | KeyPhraseExtractionBatchResult\n  | PiiEntityRecognitionBatchResult\n  | SentimentAnalysisBatchResult\n  | HealthcareBatchResult\n  | ExtractiveSummarizationBatchResult\n  | AbstractiveSummarizationBatchResult\n  | CustomEntityRecognitionBatchResult\n  | CustomSingleLabelClassificationBatchResult\n  | CustomMultiLabelClassificationBatchResult;\n\n/**\n * An error result from a sentiment analysis action on a single document.\n */\nexport type SentimentAnalysisErrorResult = TextAnalysisErrorResult;\n\n/**\n * Paged results of the {@link TextAnalysisClient.beginAnalyzeBatch} operation.\n */\nexport type PagedAnalyzeBatchResult = PagedAsyncIterableIterator<AnalyzeBatchResult>;\n\n/**\n * A poller that polls long-running operations started by {@link TextAnalysisClient.beginAnalyzeBatch}.\n */\nexport type AnalyzeBatchPoller = PollerLike<AnalyzeBatchOperationState, PagedAnalyzeBatchResult>;\n\n/**\n * The metadata for long-running operations started by {@link TextAnalysisClient.beginAnalyzeBatch}.\n */\nexport interface AnalyzeBatchOperationMetadata {\n  /**\n   * The date and time the operation was created.\n   */\n  readonly createdOn: Date;\n  /**\n   * The date and time when the operation results will expire on the server.\n   */\n  readonly expiresOn?: Date;\n  /**\n   * The operation id.\n   */\n  readonly id: string;\n  /**\n   * The time the operation status was last updated.\n   */\n  readonly modifiedOn: Date;\n  /**\n   * Number of successfully completed actions.\n   */\n  readonly actionSucceededCount: number;\n  /**\n   * Number of failed actions.\n   */\n  readonly actionFailedCount: number;\n  /**\n   * Number of actions still in progress.\n   */\n  readonly actionInProgressCount: number;\n  /**\n   * The operation's display name.\n   */\n  readonly displayName?: string;\n}\n\n/**\n * The state of the begin analyze polling operation.\n */\nexport interface AnalyzeBatchOperationState\n  extends OperationState<PagedAnalyzeBatchResult>,\n    AnalyzeBatchOperationMetadata {}\n\n/**\n * Abstract representation of a poller, intended to expose just the minimal API that the user needs to work with.\n */\nexport interface PollerLike<TState extends OperationState<TResult>, TResult>\n  extends SimplePollerLike<TState, TResult> {\n  /**\n   * sends a cancellation request.\n   */\n  sendCancellationRequest: () => Promise<void>;\n}\n"]}