{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/logger.ts","../src/util.ts","../src/generated/models/mappers.ts","../src/generated/models/parameters.ts","../src/transforms.ts","../src/lro.ts","../src/generated/operations/analyzeText.ts","../src/generated/generatedClient.ts","../src/azureKeyCredentialPolicy.ts","../src/textAnalysisClient.ts","../src/generated/models/index.ts","../src/models.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The default AAD permissions scope for Cognitive Services.\n * @internal\n */\nexport const DEFAULT_COGNITIVE_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n\n/**\n * @internal\n */\nexport const SDK_VERSION = \"1.1.0\";\n\n/**\n * @internal\n */\nexport const clientName = \"TextAnalysisClient\";\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The `@azure/logger` configuration for this package.\n * @internal\n */\nexport const logger = createClientLogger(\"ai-language-text\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ErrorModel, LanguageDetectionInput, TextDocumentInput } from \"./generated\";\nimport { TextAnalysisOperationOptions } from \"./models\";\nimport { logger } from \"./logger\";\n\n/**\n * Given a sorted array of input objects (with a unique ID) and an unsorted array of results,\n * return a sorted array of results.\n *\n * @internal\n * @param sortedIds - An array of sorted IDs\n * @param unsortedArray - An array of entries that contain `id` but are not sorted\n */\nexport function sortResponseIdObjects<U extends { id: string }>(\n  sortedIds: string[],\n  unsortedArray: U[]\n): U[] {\n  const unsortedMap = new Map<string, U>();\n  for (const item of unsortedArray) {\n    unsortedMap.set(item.id, item);\n  }\n\n  if (unsortedArray.length !== sortedIds.length) {\n    const ordinal = unsortedArray.length > sortedIds.length ? \"more\" : \"fewer\";\n    logger.warning(\n      `The service returned ${ordinal} responses than inputs. Some errors may be treated as fatal.`\n    );\n  }\n\n  const result: U[] = [];\n  /**\n   * When the results are returned in pages, sortedArray will probably have more\n   * items than unsortedArray so it is ok to ignore the case when a sorted item\n   * ID is not found in `unsortedMap`.\n   */\n  for (const id of sortedIds) {\n    const item = unsortedMap.get(id);\n    if (item) {\n      result.push(item);\n    }\n  }\n  return result;\n}\n\n/**\n * @internal\n */\nexport interface AssessmentIndex {\n  document: number;\n  sentence: number;\n  assessment: number;\n}\n\n/**\n * @internal\n */\nexport function parseAssessmentIndex(pointer: string): AssessmentIndex {\n  const regex = new RegExp(/#\\/documents\\/(\\d+)\\/sentences\\/(\\d+)\\/assessments\\/(\\d+)/);\n  const res = regex.exec(pointer);\n  if (res !== null) {\n    const assessmentIndex: AssessmentIndex = {\n      document: parseInt(res[1]),\n      sentence: parseInt(res[2]),\n      assessment: parseInt(res[3]),\n    };\n    return assessmentIndex;\n  } else {\n    throw new Error(`Pointer \"${pointer}\" is not a valid Assessment pointer`);\n  }\n}\n\n/**\n * Parses the index of the healthcare entity from a JSON pointer.\n * @param pointer - a JSON pointer representing an entity\n * @internal\n */\nexport function parseHealthcareEntityIndex(pointer: string): number {\n  const regex = new RegExp(/#\\/results\\/documents\\/(\\d+)\\/entities\\/(\\d+)/);\n  const res = regex.exec(pointer);\n  if (res !== null) {\n    return parseInt(res[2]);\n  } else {\n    throw new Error(`Pointer \"${pointer}\" is not a valid healthcare entity pointer`);\n  }\n}\n\n/**\n * @internal\n */\nexport function isStringArray(documents: unknown[]): documents is string[] {\n  return typeof documents[0] === \"string\";\n}\n\n/**\n * @internal\n */\nexport function convertToTextDocumentInput(\n  inputs: string[],\n  language?: string\n): TextDocumentInput[] {\n  return inputs.map((text: string, index): TextDocumentInput => {\n    return {\n      id: String(index),\n      language,\n      text,\n    };\n  });\n}\n\n/**\n * @internal\n */\nexport function convertToLanguageDetectionInput(\n  inputs: string[],\n  countryHint?: string\n): LanguageDetectionInput[] {\n  return inputs.map((text: string, index): LanguageDetectionInput => {\n    return {\n      id: String(index),\n      countryHint,\n      text,\n    };\n  });\n}\n\n/**\n * @internal\n */\nexport function getOperationOptions<OptionsT extends TextAnalysisOperationOptions>(\n  options: OptionsT\n): {\n  options: TextAnalysisOperationOptions;\n  rest: Omit<\n    OptionsT,\n    | \"onResponse\"\n    | \"abortSignal\"\n    | \"includeStatistics\"\n    | \"requestOptions\"\n    | \"serializerOptions\"\n    | \"tracingOptions\"\n  >;\n} {\n  const {\n    abortSignal,\n    includeStatistics,\n    onResponse,\n    requestOptions,\n    serializerOptions,\n    tracingOptions,\n    ...rest\n  } = options;\n  return {\n    options: {\n      abortSignal,\n      includeStatistics,\n      onResponse,\n      requestOptions,\n      serializerOptions,\n      tracingOptions,\n    },\n    rest,\n  };\n}\n\n/**\n *\n * @param error - error with the target in the JSON error pointer format \"#/items/0\n * @returns number: the position of the task with error\n */\nexport function extractErrorPointerIndex(error: ErrorModel): number {\n  if (!error.target) {\n    throw new Error(\"Unexpected response from service - no target present\");\n  }\n  const position = parseInt(error.target.split(\"/\").pop() as string);\n\n  if (isNaN(position)) {\n    throw new Error(\n      `Unexpected response from service - action pointer \"${error.target}\" is not a valid action pointer.`\n    );\n  }\n\n  return position;\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const AnalyzeAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeAction\",\n    uberParent: \"AnalyzeAction\",\n    polymorphicDiscriminator: {\n      serializedName: \"kind\",\n      clientName: \"kind\"\n    },\n    modelProperties: {\n      kind: {\n        serializedName: \"kind\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextTaskResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextTaskResult\",\n    uberParent: \"AnalyzeTextTaskResult\",\n    polymorphicDiscriminator: {\n      serializedName: \"kind\",\n      clientName: \"kind\"\n    },\n    modelProperties: {\n      kind: {\n        serializedName: \"kind\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ErrorModel\"\n            }\n          }\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const InnerErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InnerErrorModel\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextJobsInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextJobsInput\",\n    modelProperties: {\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      analysisInput: {\n        serializedName: \"analysisInput\",\n        type: {\n          name: \"Composite\",\n          className: \"MultiLanguageAnalysisInput\"\n        }\n      },\n      tasks: {\n        serializedName: \"tasks\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AnalyzeBatchAction\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MultiLanguageAnalysisInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"MultiLanguageAnalysisInput\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextDocumentInput\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentInput\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BatchActionState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BatchActionState\",\n    modelProperties: {\n      actionName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const JobState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JobState\",\n    modelProperties: {\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdOn: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      expiresOn: {\n        serializedName: \"expirationDateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      id: {\n        serializedName: \"jobId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      modifiedOn: {\n        serializedName: \"lastUpdatedDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ErrorModel\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TasksState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksState\",\n    modelProperties: {\n      tasks: {\n        serializedName: \"tasks\",\n        type: {\n          name: \"Composite\",\n          className: \"TasksStateTasks\"\n        }\n      }\n    }\n  }\n};\n\nexport const TasksStateTasks: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TasksStateTasks\",\n    modelProperties: {\n      completed: {\n        serializedName: \"completed\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      failed: {\n        serializedName: \"failed\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      inProgress: {\n        serializedName: \"inProgress\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      items: {\n        serializedName: \"items\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AnalyzeTextLROResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TaskState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TaskState\",\n    modelProperties: {\n      lastUpdateDateTime: {\n        serializedName: \"lastUpdateDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextJobStatistics: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextJobStatistics\",\n    modelProperties: {\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentBatchStatistics: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentBatchStatistics\",\n    modelProperties: {\n      documentCount: {\n        serializedName: \"documentsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      validDocumentCount: {\n        serializedName: \"validDocumentsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      erroneousDocumentCount: {\n        serializedName: \"erroneousDocumentsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      transactionCount: {\n        serializedName: \"transactionsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageDetectionAnalysisInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LanguageDetectionAnalysisInput\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LanguageDetectionInput\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageDetectionInput: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LanguageDetectionInput\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      countryHint: {\n        serializedName: \"countryHint\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ActionCommon: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ActionCommon\",\n    modelProperties: {\n      disableServiceLogs: {\n        defaultValue: false,\n        serializedName: \"loggingOptOut\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomResult\",\n    modelProperties: {\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      projectName: {\n        serializedName: \"projectName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deploymentName: {\n        serializedName: \"deploymentName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentError\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const Entity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Entity\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      category: {\n        serializedName: \"category\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      subCategory: {\n        serializedName: \"subcategory\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentResult\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      warnings: {\n        serializedName: \"warnings\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentWarning: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentWarning\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentStatistics: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentStatistics\",\n    modelProperties: {\n      characterCount: {\n        serializedName: \"charactersCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      transactionCount: {\n        serializedName: \"transactionsCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClassificationCategory: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClassificationCategory\",\n    modelProperties: {\n      category: {\n        serializedName: \"category\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareEntity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareEntity\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      category: {\n        serializedName: \"category\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      subCategory: {\n        serializedName: \"subcategory\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      assertion: {\n        serializedName: \"assertion\",\n        type: {\n          name: \"Composite\",\n          className: \"HealthcareAssertion\"\n        }\n      },\n      normalizedText: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSources: {\n        serializedName: \"links\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EntityDataSource\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareAssertion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareAssertion\",\n    modelProperties: {\n      conditionality: {\n        serializedName: \"conditionality\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"hypothetical\", \"conditional\"]\n        }\n      },\n      certainty: {\n        serializedName: \"certainty\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"positive\",\n            \"positivePossible\",\n            \"neutralPossible\",\n            \"negativePossible\",\n            \"negative\"\n          ]\n        }\n      },\n      association: {\n        serializedName: \"association\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"subject\", \"other\"]\n        }\n      }\n    }\n  }\n};\n\nexport const EntityDataSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntityDataSource\",\n    modelProperties: {\n      name: {\n        serializedName: \"dataSource\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entityId: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareRelation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareRelation\",\n    modelProperties: {\n      relationType: {\n        serializedName: \"relationType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareRelationEntity\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareRelationEntity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareRelationEntity\",\n    modelProperties: {\n      ref: {\n        serializedName: \"ref\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      role: {\n        serializedName: \"role\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PreBuiltResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PreBuiltResult\",\n    modelProperties: {\n      errors: {\n        serializedName: \"errors\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        serializedName: \"modelVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentConfidenceScores: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentConfidenceScores\",\n    modelProperties: {\n      positive: {\n        serializedName: \"positive\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      neutral: {\n        serializedName: \"neutral\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      negative: {\n        serializedName: \"negative\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentenceSentiment: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentenceSentiment\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"neutral\", \"negative\"]\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentConfidenceScores\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      targets: {\n        serializedName: \"targets\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentenceTarget\"\n            }\n          }\n        }\n      },\n      assessments: {\n        serializedName: \"assessments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AssessmentSentiment\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SentenceTarget: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentenceTarget\",\n    modelProperties: {\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"mixed\", \"negative\"]\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"TargetConfidenceScores\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      relations: {\n        serializedName: \"relations\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TargetRelation\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TargetConfidenceScores: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TargetConfidenceScores\",\n    modelProperties: {\n      positive: {\n        serializedName: \"positive\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      negative: {\n        serializedName: \"negative\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const TargetRelation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TargetRelation\",\n    modelProperties: {\n      relationType: {\n        serializedName: \"relationType\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"assessment\", \"target\"]\n        }\n      },\n      ref: {\n        serializedName: \"ref\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AssessmentSentiment: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AssessmentSentiment\",\n    modelProperties: {\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"mixed\", \"negative\"]\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"TargetConfidenceScores\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      isNegated: {\n        serializedName: \"isNegated\",\n        required: true,\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const LinkedEntity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LinkedEntity\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      matches: {\n        serializedName: \"matches\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Match\"\n            }\n          }\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSourceEntityId: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSource: {\n        serializedName: \"dataSource\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      bingEntitySearchApiId: {\n        serializedName: \"bingId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Match: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Match\",\n    modelProperties: {\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SummarySentence: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SummarySentence\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      rankScore: {\n        serializedName: \"rankScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DetectedLanguage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DetectedLanguage\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      iso6391Name: {\n        serializedName: \"iso6391Name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      confidenceScore: {\n        serializedName: \"confidenceScore\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Pagination: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Pagination\",\n    modelProperties: {\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const JobErrors: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JobErrors\",\n    modelProperties: {\n      errors: {\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ErrorModel\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AbstractiveSummarizationTaskParametersBase: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AbstractiveSummarizationTaskParametersBase\",\n    modelProperties: {\n      sentenceCount: {\n        serializedName: \"sentenceCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      stringIndexType: {\n        defaultValue: \"Utf16CodeUnit\",\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AbstractiveSummarizationResultBase: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AbstractiveSummarizationResultBase\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AbstractiveSummaryDocumentResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AbstractiveSummary: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AbstractiveSummary\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contexts: {\n        serializedName: \"contexts\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SummaryContext\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SummaryContext: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SummaryContext\",\n    modelProperties: {\n      offset: {\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextEntityLinkingInput: coreClient.CompositeMapper = {\n  serializedName: \"EntityLinking\",\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextEntityLinkingInput\",\n    uberParent: \"AnalyzeAction\",\n    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeAction.type.modelProperties,\n      analysisInput: {\n        serializedName: \"analysisInput\",\n        type: {\n          name: \"Composite\",\n          className: \"MultiLanguageAnalysisInput\"\n        }\n      },\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"EntityLinkingAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextEntityRecognitionInput: coreClient.CompositeMapper = {\n  serializedName: \"EntityRecognition\",\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextEntityRecognitionInput\",\n    uberParent: \"AnalyzeAction\",\n    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeAction.type.modelProperties,\n      analysisInput: {\n        serializedName: \"analysisInput\",\n        type: {\n          name: \"Composite\",\n          className: \"MultiLanguageAnalysisInput\"\n        }\n      },\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"EntityRecognitionAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextKeyPhraseExtractionInput: coreClient.CompositeMapper = {\n  serializedName: \"KeyPhraseExtraction\",\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextKeyPhraseExtractionInput\",\n    uberParent: \"AnalyzeAction\",\n    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeAction.type.modelProperties,\n      analysisInput: {\n        serializedName: \"analysisInput\",\n        type: {\n          name: \"Composite\",\n          className: \"MultiLanguageAnalysisInput\"\n        }\n      },\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyPhraseExtractionAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextPiiEntitiesRecognitionInput: coreClient.CompositeMapper = {\n  serializedName: \"PiiEntityRecognition\",\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextPiiEntitiesRecognitionInput\",\n    uberParent: \"AnalyzeAction\",\n    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeAction.type.modelProperties,\n      analysisInput: {\n        serializedName: \"analysisInput\",\n        type: {\n          name: \"Composite\",\n          className: \"MultiLanguageAnalysisInput\"\n        }\n      },\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"PiiEntityRecognitionAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextLanguageDetectionInput: coreClient.CompositeMapper = {\n  serializedName: \"LanguageDetection\",\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextLanguageDetectionInput\",\n    uberParent: \"AnalyzeAction\",\n    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeAction.type.modelProperties,\n      analysisInput: {\n        serializedName: \"analysisInput\",\n        type: {\n          name: \"Composite\",\n          className: \"LanguageDetectionAnalysisInput\"\n        }\n      },\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"LanguageDetectionAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextSentimentAnalysisInput: coreClient.CompositeMapper = {\n  serializedName: \"SentimentAnalysis\",\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextSentimentAnalysisInput\",\n    uberParent: \"AnalyzeAction\",\n    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeAction.type.modelProperties,\n      analysisInput: {\n        serializedName: \"analysisInput\",\n        type: {\n          name: \"Composite\",\n          className: \"MultiLanguageAnalysisInput\"\n        }\n      },\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentAnalysisAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentTaskResult: coreClient.CompositeMapper = {\n  serializedName: \"SentimentAnalysisResults\",\n  type: {\n    name: \"Composite\",\n    className: \"SentimentTaskResult\",\n    uberParent: \"AnalyzeTextTaskResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextTaskResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextTaskResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentResponse\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesTaskResult: coreClient.CompositeMapper = {\n  serializedName: \"EntityRecognitionResults\",\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesTaskResult\",\n    uberParent: \"AnalyzeTextTaskResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextTaskResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextTaskResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"EntitiesResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingTaskResult: coreClient.CompositeMapper = {\n  serializedName: \"EntityLinkingResults\",\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingTaskResult\",\n    uberParent: \"AnalyzeTextTaskResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextTaskResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextTaskResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"EntityLinkingResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiTaskResult: coreClient.CompositeMapper = {\n  serializedName: \"PiiEntityRecognitionResults\",\n  type: {\n    name: \"Composite\",\n    className: \"PiiTaskResult\",\n    uberParent: \"AnalyzeTextTaskResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextTaskResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextTaskResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"PiiResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseTaskResult: coreClient.CompositeMapper = {\n  serializedName: \"KeyPhraseExtractionResults\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseTaskResult\",\n    uberParent: \"AnalyzeTextTaskResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextTaskResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextTaskResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyPhraseResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageDetectionTaskResult: coreClient.CompositeMapper = {\n  serializedName: \"LanguageDetectionResults\",\n  type: {\n    name: \"Composite\",\n    className: \"LanguageDetectionTaskResult\",\n    uberParent: \"AnalyzeTextTaskResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextTaskResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextTaskResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"LanguageDetectionResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeBatchAction: coreClient.CompositeMapper = {\n  serializedName: \"AnalyzeBatchAction\",\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeBatchAction\",\n    uberParent: \"BatchActionState\",\n    polymorphicDiscriminator: {\n      serializedName: \"kind\",\n      clientName: \"kind\"\n    },\n    modelProperties: {\n      ...BatchActionState.type.modelProperties,\n      kind: {\n        serializedName: \"kind\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextLROResult: coreClient.CompositeMapper = {\n  serializedName: \"AnalyzeTextLROResult\",\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextLROResult\",\n    uberParent: \"TaskState\",\n    polymorphicDiscriminator: {\n      serializedName: \"kind\",\n      clientName: \"kind\"\n    },\n    modelProperties: {\n      ...TaskState.type.modelProperties,\n      ...BatchActionState.type.modelProperties,\n      kind: {\n        serializedName: \"kind\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextJobState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextJobState\",\n    modelProperties: {\n      ...JobState.type.modelProperties,\n      ...TasksState.type.modelProperties,\n      ...AnalyzeTextJobStatistics.type.modelProperties\n    }\n  }\n};\n\nexport const ActionPrebuilt: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ActionPrebuilt\",\n    modelProperties: {\n      ...ActionCommon.type.modelProperties,\n      modelVersion: {\n        defaultValue: \"latest\",\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ActionCustom: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ActionCustom\",\n    modelProperties: {\n      ...ActionCommon.type.modelProperties,\n      projectName: {\n        serializedName: \"projectName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      deploymentName: {\n        serializedName: \"deploymentName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomEntitiesResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntitiesResult\",\n    modelProperties: {\n      ...CustomResult.type.modelProperties,\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CustomEntitiesResultDocumentsItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CustomLabelClassificationResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomLabelClassificationResult\",\n    modelProperties: {\n      ...CustomResult.type.modelProperties,\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CustomLabelClassificationResultDocumentsItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesDocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesDocumentResult\",\n    modelProperties: {\n      ...DocumentResult.type.modelProperties,\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Entity\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ClassificationDocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ClassificationDocumentResult\",\n    modelProperties: {\n      ...DocumentResult.type.modelProperties,\n      classifications: {\n        serializedName: \"class\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ClassificationCategory\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareEntitiesDocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareEntitiesDocumentResult\",\n    modelProperties: {\n      ...DocumentResult.type.modelProperties,\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareEntity\"\n            }\n          }\n        }\n      },\n      relations: {\n        serializedName: \"relations\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareRelation\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentDocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentDocumentResult\",\n    modelProperties: {\n      ...DocumentResult.type.modelProperties,\n      sentiment: {\n        serializedName: \"sentiment\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"positive\", \"neutral\", \"negative\", \"mixed\"]\n        }\n      },\n      confidenceScores: {\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentConfidenceScores\"\n        }\n      },\n      sentences: {\n        serializedName: \"sentences\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentenceSentiment\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const LinkedEntitiesDocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LinkedEntitiesDocumentResult\",\n    modelProperties: {\n      ...DocumentResult.type.modelProperties,\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LinkedEntity\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PiiEntitiesDocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiEntitiesDocumentResult\",\n    modelProperties: {\n      ...DocumentResult.type.modelProperties,\n      redactedText: {\n        serializedName: \"redactedText\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        serializedName: \"entities\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Entity\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractedSummaryDocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtractedSummaryDocumentResult\",\n    modelProperties: {\n      ...DocumentResult.type.modelProperties,\n      sentences: {\n        serializedName: \"sentences\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SummarySentence\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhrasesDocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhrasesDocumentResult\",\n    modelProperties: {\n      ...DocumentResult.type.modelProperties,\n      keyPhrases: {\n        serializedName: \"keyPhrases\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageDetectionDocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LanguageDetectionDocumentResult\",\n    modelProperties: {\n      ...DocumentResult.type.modelProperties,\n      detectedLanguage: {\n        serializedName: \"detectedLanguage\",\n        type: {\n          name: \"Composite\",\n          className: \"DetectedLanguage\"\n        }\n      }\n    }\n  }\n};\n\nexport const AbstractiveSummaryDocumentResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AbstractiveSummaryDocumentResult\",\n    modelProperties: {\n      ...DocumentResult.type.modelProperties,\n      summaries: {\n        serializedName: \"summaries\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AbstractiveSummary\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareResult\",\n    modelProperties: {\n      ...PreBuiltResult.type.modelProperties,\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"HealthcareResultDocumentsItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentResponse\",\n    modelProperties: {\n      ...PreBuiltResult.type.modelProperties,\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentimentResponseDocumentsItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesResult\",\n    modelProperties: {\n      ...PreBuiltResult.type.modelProperties,\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EntitiesResultDocumentsItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingResult\",\n    modelProperties: {\n      ...PreBuiltResult.type.modelProperties,\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EntityLinkingResultDocumentsItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PiiResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiResult\",\n    modelProperties: {\n      ...PreBuiltResult.type.modelProperties,\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PiiResultDocumentsItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractiveSummarizationResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtractiveSummarizationResult\",\n    modelProperties: {\n      ...PreBuiltResult.type.modelProperties,\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExtractedSummaryDocumentResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseResult\",\n    modelProperties: {\n      ...PreBuiltResult.type.modelProperties,\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"KeyPhraseResultDocumentsItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageDetectionResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LanguageDetectionResult\",\n    modelProperties: {\n      ...PreBuiltResult.type.modelProperties,\n      documents: {\n        serializedName: \"documents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LanguageDetectionDocumentResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AbstractiveSummarizationResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AbstractiveSummarizationResult\",\n    modelProperties: {\n      ...AbstractiveSummarizationResultBase.type.modelProperties,\n      ...PreBuiltResult.type.modelProperties\n    }\n  }\n};\n\nexport const AbstractiveSummarizationAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AbstractiveSummarizationAction\",\n    modelProperties: {\n      ...AbstractiveSummarizationTaskParametersBase.type.modelProperties,\n      ...ActionPrebuilt.type.modelProperties\n    }\n  }\n};\n\nexport const CustomEntitiesLROTask: coreClient.CompositeMapper = {\n  serializedName: \"CustomEntityRecognition\",\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntitiesLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomEntityRecognitionAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomSingleLabelClassificationLROTask: coreClient.CompositeMapper = {\n  serializedName: \"CustomSingleLabelClassification\",\n  type: {\n    name: \"Composite\",\n    className: \"CustomSingleLabelClassificationLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomSingleLabelClassificationAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomMultiLabelClassificationLROTask: coreClient.CompositeMapper = {\n  serializedName: \"CustomMultiLabelClassification\",\n  type: {\n    name: \"Composite\",\n    className: \"CustomMultiLabelClassificationLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomMultiLabelClassificationAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareLROTask: coreClient.CompositeMapper = {\n  serializedName: \"Healthcare\",\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"HealthcareAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentAnalysisLROTask: coreClient.CompositeMapper = {\n  serializedName: \"SentimentAnalysis\",\n  type: {\n    name: \"Composite\",\n    className: \"SentimentAnalysisLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentAnalysisAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesLROTask: coreClient.CompositeMapper = {\n  serializedName: \"EntityRecognition\",\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"EntityRecognitionAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingLROTask: coreClient.CompositeMapper = {\n  serializedName: \"EntityLinking\",\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"EntityLinkingAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiLROTask: coreClient.CompositeMapper = {\n  serializedName: \"PiiEntityRecognition\",\n  type: {\n    name: \"Composite\",\n    className: \"PiiLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"PiiEntityRecognitionAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractiveSummarizationLROTask: coreClient.CompositeMapper = {\n  serializedName: \"ExtractiveSummarization\",\n  type: {\n    name: \"Composite\",\n    className: \"ExtractiveSummarizationLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"ExtractiveSummarizationAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseLROTask: coreClient.CompositeMapper = {\n  serializedName: \"KeyPhraseExtraction\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyPhraseExtractionAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const AbstractiveSummarizationLROTask: coreClient.CompositeMapper = {\n  serializedName: \"AbstractiveSummarization\",\n  type: {\n    name: \"Composite\",\n    className: \"AbstractiveSummarizationLROTask\",\n    uberParent: \"AnalyzeBatchAction\",\n    polymorphicDiscriminator: AnalyzeBatchAction.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeBatchAction.type.modelProperties,\n      parameters: {\n        serializedName: \"parameters\",\n        type: {\n          name: \"Composite\",\n          className: \"AbstractiveSummarizationAction\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityRecognitionLROResult: coreClient.CompositeMapper = {\n  serializedName: \"EntityRecognitionLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"EntityRecognitionLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"EntitiesResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomEntityRecognitionLROResult: coreClient.CompositeMapper = {\n  serializedName: \"CustomEntityRecognitionLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntityRecognitionLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomEntitiesResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomSingleLabelClassificationLROResult: coreClient.CompositeMapper = {\n  serializedName: \"CustomSingleLabelClassificationLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"CustomSingleLabelClassificationLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomLabelClassificationResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomMultiLabelClassificationLROResult: coreClient.CompositeMapper = {\n  serializedName: \"CustomMultiLabelClassificationLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"CustomMultiLabelClassificationLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomLabelClassificationResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingLROResult: coreClient.CompositeMapper = {\n  serializedName: \"EntityLinkingLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"EntityLinkingResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const PiiEntityRecognitionLROResult: coreClient.CompositeMapper = {\n  serializedName: \"PiiEntityRecognitionLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"PiiEntityRecognitionLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"PiiResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractiveSummarizationLROResult: coreClient.CompositeMapper = {\n  serializedName: \"ExtractiveSummarizationLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"ExtractiveSummarizationLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"ExtractiveSummarizationResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareLROResult: coreClient.CompositeMapper = {\n  serializedName: \"HealthcareLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"HealthcareResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentLROResult: coreClient.CompositeMapper = {\n  serializedName: \"SentimentAnalysisLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"SentimentLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentResponse\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseExtractionLROResult: coreClient.CompositeMapper = {\n  serializedName: \"KeyPhraseExtractionLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseExtractionLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyPhraseResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const AbstractiveSummarizationLROResult: coreClient.CompositeMapper = {\n  serializedName: \"AbstractiveSummarizationLROResults\",\n  type: {\n    name: \"Composite\",\n    className: \"AbstractiveSummarizationLROResult\",\n    uberParent: \"AnalyzeTextLROResult\",\n    polymorphicDiscriminator:\n      AnalyzeTextLROResult.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AnalyzeTextLROResult.type.modelProperties,\n      results: {\n        serializedName: \"results\",\n        type: {\n          name: \"Composite\",\n          className: \"AbstractiveSummarizationResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingAction\",\n    modelProperties: {\n      ...ActionPrebuilt.type.modelProperties,\n      stringIndexType: {\n        defaultValue: \"Utf16CodeUnit\",\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityRecognitionAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntityRecognitionAction\",\n    modelProperties: {\n      ...ActionPrebuilt.type.modelProperties,\n      stringIndexType: {\n        defaultValue: \"Utf16CodeUnit\",\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseExtractionAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseExtractionAction\",\n    modelProperties: {\n      ...ActionPrebuilt.type.modelProperties\n    }\n  }\n};\n\nexport const PiiEntityRecognitionAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiEntityRecognitionAction\",\n    modelProperties: {\n      ...ActionPrebuilt.type.modelProperties,\n      domainFilter: {\n        defaultValue: \"none\",\n        serializedName: \"domain\",\n        type: {\n          name: \"String\"\n        }\n      },\n      categoriesFilter: {\n        constraints: {\n          UniqueItems: true\n        },\n        serializedName: \"piiCategories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      stringIndexType: {\n        defaultValue: \"Utf16CodeUnit\",\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageDetectionAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"LanguageDetectionAction\",\n    modelProperties: {\n      ...ActionPrebuilt.type.modelProperties\n    }\n  }\n};\n\nexport const SentimentAnalysisAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentAnalysisAction\",\n    modelProperties: {\n      ...ActionPrebuilt.type.modelProperties,\n      includeOpinionMining: {\n        defaultValue: false,\n        serializedName: \"opinionMining\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      stringIndexType: {\n        defaultValue: \"Utf16CodeUnit\",\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const HealthcareAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareAction\",\n    modelProperties: {\n      ...ActionPrebuilt.type.modelProperties,\n      stringIndexType: {\n        defaultValue: \"Utf16CodeUnit\",\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtractiveSummarizationAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtractiveSummarizationAction\",\n    modelProperties: {\n      ...ActionPrebuilt.type.modelProperties,\n      maxSentenceCount: {\n        defaultValue: 3,\n        serializedName: \"sentenceCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orderBy: {\n        defaultValue: \"Offset\",\n        serializedName: \"sortBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      stringIndexType: {\n        defaultValue: \"Utf16CodeUnit\",\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomEntityRecognitionAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntityRecognitionAction\",\n    modelProperties: {\n      ...ActionCustom.type.modelProperties,\n      stringIndexType: {\n        defaultValue: \"Utf16CodeUnit\",\n        serializedName: \"stringIndexType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomSingleLabelClassificationAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomSingleLabelClassificationAction\",\n    modelProperties: {\n      ...ActionCustom.type.modelProperties\n    }\n  }\n};\n\nexport const CustomMultiLabelClassificationAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomMultiLabelClassificationAction\",\n    modelProperties: {\n      ...ActionCustom.type.modelProperties\n    }\n  }\n};\n\nexport const CustomEntitiesResultDocumentsItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomEntitiesResultDocumentsItem\",\n    modelProperties: {\n      ...EntitiesDocumentResult.type.modelProperties\n    }\n  }\n};\n\nexport const EntitiesResultDocumentsItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesResultDocumentsItem\",\n    modelProperties: {\n      ...EntitiesDocumentResult.type.modelProperties\n    }\n  }\n};\n\nexport const CustomLabelClassificationResultDocumentsItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomLabelClassificationResultDocumentsItem\",\n    modelProperties: {\n      ...ClassificationDocumentResult.type.modelProperties\n    }\n  }\n};\n\nexport const HealthcareResultDocumentsItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"HealthcareResultDocumentsItem\",\n    modelProperties: {\n      ...HealthcareEntitiesDocumentResult.type.modelProperties\n    }\n  }\n};\n\nexport const SentimentResponseDocumentsItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SentimentResponseDocumentsItem\",\n    modelProperties: {\n      ...SentimentDocumentResult.type.modelProperties\n    }\n  }\n};\n\nexport const EntityLinkingResultDocumentsItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingResultDocumentsItem\",\n    modelProperties: {\n      ...LinkedEntitiesDocumentResult.type.modelProperties\n    }\n  }\n};\n\nexport const PiiResultDocumentsItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PiiResultDocumentsItem\",\n    modelProperties: {\n      ...PiiEntitiesDocumentResult.type.modelProperties\n    }\n  }\n};\n\nexport const KeyPhraseResultDocumentsItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseResultDocumentsItem\",\n    modelProperties: {\n      ...KeyPhrasesDocumentResult.type.modelProperties\n    }\n  }\n};\n\nexport const GeneratedClientAnalyzeBatchHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientAnalyzeBatchHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeTextCancelJobHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeTextCancelJobHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  AnalyzeAction: AnalyzeAction,\n  AnalyzeTextTaskResult: AnalyzeTextTaskResult,\n  \"AnalyzeAction.EntityLinking\": AnalyzeTextEntityLinkingInput,\n  \"AnalyzeAction.EntityRecognition\": AnalyzeTextEntityRecognitionInput,\n  \"AnalyzeAction.KeyPhraseExtraction\": AnalyzeTextKeyPhraseExtractionInput,\n  \"AnalyzeAction.PiiEntityRecognition\": AnalyzeTextPiiEntitiesRecognitionInput,\n  \"AnalyzeAction.LanguageDetection\": AnalyzeTextLanguageDetectionInput,\n  \"AnalyzeAction.SentimentAnalysis\": AnalyzeTextSentimentAnalysisInput,\n  \"AnalyzeTextTaskResult.SentimentAnalysisResults\": SentimentTaskResult,\n  \"AnalyzeTextTaskResult.EntityRecognitionResults\": EntitiesTaskResult,\n  \"AnalyzeTextTaskResult.EntityLinkingResults\": EntityLinkingTaskResult,\n  \"AnalyzeTextTaskResult.PiiEntityRecognitionResults\": PiiTaskResult,\n  \"AnalyzeTextTaskResult.KeyPhraseExtractionResults\": KeyPhraseTaskResult,\n  \"AnalyzeTextTaskResult.LanguageDetectionResults\": LanguageDetectionTaskResult,\n  \"BatchActionState.AnalyzeBatchAction\": AnalyzeBatchAction,\n  \"TaskState.AnalyzeTextLROResult\": AnalyzeTextLROResult,\n  \"AnalyzeBatchAction.CustomEntityRecognition\": CustomEntitiesLROTask,\n  \"AnalyzeBatchAction.CustomSingleLabelClassification\": CustomSingleLabelClassificationLROTask,\n  \"AnalyzeBatchAction.CustomMultiLabelClassification\": CustomMultiLabelClassificationLROTask,\n  \"AnalyzeBatchAction.Healthcare\": HealthcareLROTask,\n  \"AnalyzeBatchAction.SentimentAnalysis\": SentimentAnalysisLROTask,\n  \"AnalyzeBatchAction.EntityRecognition\": EntitiesLROTask,\n  \"AnalyzeBatchAction.EntityLinking\": EntityLinkingLROTask,\n  \"AnalyzeBatchAction.PiiEntityRecognition\": PiiLROTask,\n  \"AnalyzeBatchAction.ExtractiveSummarization\": ExtractiveSummarizationLROTask,\n  \"AnalyzeBatchAction.KeyPhraseExtraction\": KeyPhraseLROTask,\n  \"AnalyzeBatchAction.AbstractiveSummarization\": AbstractiveSummarizationLROTask,\n  \"AnalyzeTextLROResult.EntityRecognitionLROResults\": EntityRecognitionLROResult,\n  \"AnalyzeTextLROResult.CustomEntityRecognitionLROResults\": CustomEntityRecognitionLROResult,\n  \"AnalyzeTextLROResult.CustomSingleLabelClassificationLROResults\": CustomSingleLabelClassificationLROResult,\n  \"AnalyzeTextLROResult.CustomMultiLabelClassificationLROResults\": CustomMultiLabelClassificationLROResult,\n  \"AnalyzeTextLROResult.EntityLinkingLROResults\": EntityLinkingLROResult,\n  \"AnalyzeTextLROResult.PiiEntityRecognitionLROResults\": PiiEntityRecognitionLROResult,\n  \"AnalyzeTextLROResult.ExtractiveSummarizationLROResults\": ExtractiveSummarizationLROResult,\n  \"AnalyzeTextLROResult.HealthcareLROResults\": HealthcareLROResult,\n  \"AnalyzeTextLROResult.SentimentAnalysisLROResults\": SentimentLROResult,\n  \"AnalyzeTextLROResult.KeyPhraseExtractionLROResults\": KeyPhraseExtractionLROResult,\n  \"AnalyzeTextLROResult.AbstractiveSummarizationLROResults\": AbstractiveSummarizationLROResult\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  AnalyzeAction as AnalyzeActionMapper,\n  AnalyzeTextJobsInput as AnalyzeTextJobsInputMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: AnalyzeActionMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const endpoint: OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    serializedName: \"Endpoint\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2023-04-01\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const includeStatistics: OperationQueryParameter = {\n  parameterPath: [\"options\", \"includeStatistics\"],\n  mapper: {\n    serializedName: \"showStats\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const body1: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: AnalyzeTextJobsInputMapper\n};\n\nexport const jobId: OperationURLParameter = {\n  parameterPath: \"jobId\",\n  mapper: {\n    serializedName: \"jobId\",\n    required: true,\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\n\nexport const top: OperationQueryParameter = {\n  parameterPath: [\"options\", \"top\"],\n  mapper: {\n    serializedName: \"top\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const skip: OperationQueryParameter = {\n  parameterPath: [\"options\", \"skip\"],\n  mapper: {\n    serializedName: \"skip\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AbstractiveSummarizationLROResult,\n  AnalyzeResponse,\n  AnalyzeTextLROResultUnion,\n  AssessmentSentiment,\n  CustomEntityRecognitionLROResult,\n  CustomMultiLabelClassificationLROResult,\n  CustomSingleLabelClassificationLROResult,\n  DocumentError,\n  EntitiesTaskResult,\n  EntityLinkingLROResult,\n  EntityLinkingTaskResult,\n  EntityRecognitionLROResult,\n  ErrorModel,\n  ErrorResponse,\n  ExtractiveSummarizationLROResult,\n  EntityLinkingResult as GeneratedEntityLinkingResult,\n  EntitiesResult as GeneratedEntityRecognitionResult,\n  HealthcareEntity as GeneratedHealthcareEntity,\n  HealthcareResult as GeneratedHealthcareResult,\n  KeyPhraseResult as GeneratedKeyPhraseExtractionResult,\n  LanguageDetectionResult as GeneratedLanguageDetectionResult,\n  PiiResult as GeneratedPiiEntityRecognitionResult,\n  SentenceSentiment as GeneratedSentenceSentiment,\n  SentimentResponse as GeneratedSentimentAnalysisResult,\n  HealthcareLROResult,\n  HealthcareRelation,\n  HealthcareRelationEntity,\n  InnerErrorModel,\n  KeyPhraseExtractionLROResult,\n  KeyPhraseTaskResult,\n  KnownAnalyzeTextLROResultsKind,\n  LanguageDetectionTaskResult,\n  PiiEntityRecognitionLROResult,\n  PiiTaskResult,\n  SentenceTarget,\n  SentimentLROResult,\n  SentimentTaskResult,\n  TargetRelation,\n  CustomEntitiesResultDocumentsItem,\n  CustomLabelClassificationResultDocumentsItem,\n  HealthcareEntitiesDocumentResult,\n} from \"./generated\";\nimport {\n  AnalyzeActionName,\n  AnalyzeBatchActionName,\n  AnalyzeBatchResult,\n  AnalyzeResult,\n  EntityLinkingResult,\n  EntityRecognitionResult,\n  HealthcareEntity,\n  HealthcareEntityRelation,\n  HealthcareEntityRelationRole,\n  HealthcareResult,\n  HealthcareSuccessResult,\n  KeyPhraseExtractionResult,\n  LanguageDetectionResult,\n  Opinion,\n  PiiEntityRecognitionResult,\n  SentenceSentiment,\n  SentimentAnalysisResult,\n  TextAnalysisError,\n  TextAnalysisErrorResult,\n  TextAnalysisSuccessResult,\n} from \"./models\";\nimport {\n  AssessmentIndex,\n  extractErrorPointerIndex,\n  parseAssessmentIndex,\n  parseHealthcareEntityIndex,\n  sortResponseIdObjects,\n} from \"./util\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\n\n/**\n * Helper function for converting nested service error to the unified\n * TextAnalysisError\n */\nfunction toTextAnalysisError(errorModel: ErrorModel | InnerErrorModel): TextAnalysisError {\n  // Return the deepest error.\n  if (errorModel.innererror !== undefined) {\n    return toTextAnalysisError(errorModel.innererror);\n  }\n\n  return {\n    ...errorModel,\n  };\n}\n\nfunction makeTextAnalysisErrorResult(id: string, error: ErrorModel): TextAnalysisErrorResult {\n  return {\n    id,\n    error: toTextAnalysisError(error),\n  };\n}\n\n/**\n * combines successful and erroneous results into a single array of results and\n * sort them so that the IDs order match that of the input documents array.\n * @param ids - the array of input document IDs.\n * @param response - the response received from the service.\n * @param options - an options bag that includes functions to process the results.\n */\nfunction transformDocumentResults<\n  DocumentSuccess extends TextAnalysisSuccessResult,\n  PublicDocumentSuccess extends TextAnalysisSuccessResult = DocumentSuccess,\n  TError extends TextAnalysisErrorResult = TextAnalysisErrorResult\n>(\n  ids: string[],\n  response: {\n    documents: DocumentSuccess[];\n    errors: DocumentError[];\n  },\n  options?: {\n    processSuccess?: (successResult: DocumentSuccess) => PublicDocumentSuccess;\n    processError?: (id: string, error: ErrorModel) => TError;\n  }\n): (PublicDocumentSuccess | TextAnalysisErrorResult)[] {\n  const { processError = makeTextAnalysisErrorResult, processSuccess } = options || {};\n  const successResults = processSuccess\n    ? response.documents.map(processSuccess)\n    : response.documents;\n  const unsortedResults = (\n    successResults as (PublicDocumentSuccess | TextAnalysisErrorResult)[]\n  ).concat(response.errors.map((error) => processError(error.id, error.error)));\n\n  return sortResponseIdObjects(ids, unsortedResults);\n}\n\nfunction toLanguageDetectionResult(\n  docIds: string[],\n  results: GeneratedLanguageDetectionResult\n): LanguageDetectionResult[] {\n  return transformDocumentResults(docIds, results, {\n    processSuccess: ({ detectedLanguage, ...rest }) => ({\n      primaryLanguage: detectedLanguage,\n      ...rest,\n    }),\n  });\n}\n\nfunction toPiiEntityRecognitionResult(\n  docIds: string[],\n  results: GeneratedPiiEntityRecognitionResult\n): PiiEntityRecognitionResult[] {\n  return transformDocumentResults(docIds, results);\n}\n\nfunction toSentimentAnalysisResult(\n  docIds: string[],\n  results: GeneratedSentimentAnalysisResult\n): SentimentAnalysisResult[] {\n  return transformDocumentResults(docIds, results, {\n    processSuccess: ({ sentences, ...rest }) => ({\n      ...rest,\n      sentences: sentences.map((sentence) =>\n        convertGeneratedSentenceSentiment(sentence, sentences)\n      ),\n    }),\n  });\n}\n\n/**\n * Converts a sentence sentiment object returned by the service to another that\n * is user-friendly.\n *\n * @param sentence - The sentence sentiment object to be converted.\n * @param response - The entire response returned by the service.\n * @returns The user-friendly sentence sentiment object.\n * @internal\n */\nfunction convertGeneratedSentenceSentiment(\n  { targets, assessments: _, ...rest }: GeneratedSentenceSentiment,\n  sentences: GeneratedSentenceSentiment[]\n): SentenceSentiment {\n  return {\n    ...rest,\n    opinions:\n      targets?.map(\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        ({ relations, ...rest }: SentenceTarget): Opinion => ({\n          target: rest,\n          assessments: relations\n            .filter((relation) => relation.relationType === \"assessment\")\n            .map((relation) => convertTargetRelationToAssessmentSentiment(relation, sentences)),\n        })\n      ) ?? [],\n  };\n}\n\n/**\n * Converts a target relation object returned by the service to an assessment\n * sentiment object where JSON pointers in the former are realized in the\n * latter.\n *\n * @param targetRelation - The target relation object to be converted.\n * @param response - The entire response returned by the service.\n * @returns The user-friendly assessment sentiment object.\n * @internal\n */\nfunction convertTargetRelationToAssessmentSentiment(\n  targetRelation: TargetRelation,\n  sentences: GeneratedSentenceSentiment[]\n): AssessmentSentiment {\n  const assessmentPtr = targetRelation.ref;\n  const assessmentIndex: AssessmentIndex = parseAssessmentIndex(assessmentPtr);\n  const assessment =\n    sentences?.[assessmentIndex.sentence].assessments?.[assessmentIndex.assessment];\n  if (assessment !== undefined) {\n    return assessment;\n  } else {\n    throw new Error(`Pointer \"${assessmentPtr}\" is not a valid Assessment pointer`);\n  }\n}\n\nfunction toEntityLinkingResult(\n  docIds: string[],\n  results: GeneratedEntityLinkingResult\n): EntityLinkingResult[] {\n  return transformDocumentResults(docIds, results);\n}\n\nfunction toKeyPhraseExtractionResult(\n  docIds: string[],\n  results: GeneratedKeyPhraseExtractionResult\n): KeyPhraseExtractionResult[] {\n  return transformDocumentResults(docIds, results);\n}\n\nfunction toEntityRecognitionResult(\n  docIds: string[],\n  results: GeneratedEntityRecognitionResult\n): EntityRecognitionResult[] {\n  return transformDocumentResults(docIds, results);\n}\n\n/**\n * @internal\n */\nexport function transformActionResult<ActionName extends AnalyzeActionName>(\n  actionName: ActionName,\n  docIds: string[],\n  response: AnalyzeResponse\n): AnalyzeResult<AnalyzeActionName> {\n  switch (response.kind) {\n    case \"EntityLinkingResults\": {\n      return toEntityLinkingResult(docIds, (response as EntityLinkingTaskResult).results);\n    }\n    case \"EntityRecognitionResults\": {\n      return toEntityRecognitionResult(docIds, (response as EntitiesTaskResult).results);\n    }\n    case \"KeyPhraseExtractionResults\": {\n      return toKeyPhraseExtractionResult(docIds, (response as KeyPhraseTaskResult).results);\n    }\n    case \"PiiEntityRecognitionResults\": {\n      return toPiiEntityRecognitionResult(docIds, (response as PiiTaskResult).results);\n    }\n    case \"SentimentAnalysisResults\": {\n      return toSentimentAnalysisResult(docIds, (response as SentimentTaskResult).results);\n    }\n    case \"LanguageDetectionResults\": {\n      return toLanguageDetectionResult(docIds, (response as LanguageDetectionTaskResult).results);\n    }\n    default: {\n      const __exhaust: never = response;\n      throw new Error(`Unsupported results kind: ${__exhaust} for an action of type ${actionName}`);\n    }\n  }\n}\n\nfunction appendReadableErrorMessage(currentMessage: string, innerMessage: string): string {\n  let message = currentMessage;\n  if (message.slice(-1) !== \".\") {\n    message = message + \".\";\n  }\n  return message + \" \" + innerMessage;\n}\n\n/**\n * @internal\n * parses incoming errors from the service/\n * @param error - the incoming error\n */\nfunction transformError(errorResponse: unknown): any {\n  const strongErrorResponse = errorResponse as {\n    response: {\n      parsedBody?: ErrorResponse;\n    };\n    statusCode: number;\n  };\n  if (!strongErrorResponse.response) {\n    throw errorResponse;\n  }\n  const topLevelError = strongErrorResponse.response.parsedBody?.error;\n  if (!topLevelError) return errorResponse;\n  let errorMessage = topLevelError.message;\n  let code = topLevelError.code;\n  function unwrap(error: ErrorModel | InnerErrorModel): ErrorModel {\n    const innerError = error.innererror;\n    if (innerError) {\n      if (innerError.message) {\n        errorMessage = appendReadableErrorMessage(errorMessage, innerError.message);\n      }\n      if (innerError.code) {\n        code = innerError.code;\n      }\n      return unwrap(innerError);\n    }\n    return error as ErrorModel;\n  }\n  unwrap(topLevelError);\n  return new RestError(errorMessage, {\n    code,\n    statusCode: strongErrorResponse.statusCode,\n  });\n}\n\nexport async function throwError<T>(p: Promise<T>): Promise<T> {\n  try {\n    return await p;\n  } catch (e: unknown) {\n    throw transformError(e);\n  }\n}\n\nfunction toHealthcareResult(\n  docIds: string[],\n  results: GeneratedHealthcareResult\n): HealthcareResult[] {\n  function makeHealthcareEntity(entity: GeneratedHealthcareEntity): HealthcareEntity {\n    const { dataSources, ...rest } = entity;\n    return {\n      dataSources: dataSources ?? [],\n      ...rest,\n    };\n  }\n  function makeHealthcareRelation(\n    entities: HealthcareEntity[]\n  ): (relation: HealthcareRelation) => HealthcareEntityRelation {\n    return ({\n      entities: generatedEntities,\n      relationType,\n      confidenceScore,\n    }: HealthcareRelation): HealthcareEntityRelation => ({\n      relationType: relationType,\n      confidenceScore,\n      roles: generatedEntities.map(\n        (role: HealthcareRelationEntity): HealthcareEntityRelationRole => ({\n          entity: entities[parseHealthcareEntityIndex(role.ref)],\n          name: role.role,\n        })\n      ),\n    });\n  }\n  return transformDocumentResults<HealthcareEntitiesDocumentResult, HealthcareSuccessResult>(\n    docIds,\n    results,\n    {\n      processSuccess: ({ entities, relations, ...rest }) => {\n        const newEntities = entities.map(makeHealthcareEntity);\n        return {\n          entities: newEntities,\n          entityRelations: relations.map(makeHealthcareRelation(newEntities)),\n          ...rest,\n        };\n      },\n    }\n  );\n}\n\n/**\n * @internal\n */\nexport function transformAnalyzeBatchResults(\n  docIds: string[],\n  response: AnalyzeTextLROResultUnion[] = [],\n  errors: ErrorModel[] = []\n): AnalyzeBatchResult[] {\n  const errorMap = toIndexErrorMap(errors);\n  return response.map((actionData, idx): AnalyzeBatchResult => {\n    const { lastUpdateDateTime: completedOn, actionName, kind: resultKind } = actionData;\n    const error = errorMap.get(idx);\n    switch (resultKind as KnownAnalyzeTextLROResultsKind) {\n      case \"SentimentAnalysisLROResults\": {\n        const kind = \"SentimentAnalysis\";\n        if (actionData.status === \"failed\") {\n          return returnErrorTask(kind, error, completedOn);\n        }\n        const { results } = actionData as SentimentLROResult;\n        const { modelVersion, statistics } = results;\n        return {\n          kind,\n          results: toSentimentAnalysisResult(docIds, results),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          modelVersion,\n        };\n      }\n      case \"EntityRecognitionLROResults\": {\n        const kind = \"EntityRecognition\";\n        if (actionData.status === \"failed\") {\n          return returnErrorTask(kind, error, completedOn);\n        }\n        const { results } = actionData as EntityRecognitionLROResult;\n        const { modelVersion, statistics } = results;\n        return {\n          kind: \"EntityRecognition\",\n          results: toEntityRecognitionResult(docIds, results),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          modelVersion,\n        };\n      }\n      case \"PiiEntityRecognitionLROResults\": {\n        const kind = \"PiiEntityRecognition\";\n        if (actionData.status === \"failed\") {\n          return returnErrorTask(kind, error, completedOn);\n        }\n        const { results } = actionData as PiiEntityRecognitionLROResult;\n        const { modelVersion, statistics } = results;\n        return {\n          kind,\n          results: toPiiEntityRecognitionResult(docIds, results),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          modelVersion,\n        };\n      }\n      case \"KeyPhraseExtractionLROResults\": {\n        const kind = \"KeyPhraseExtraction\";\n        if (actionData.status === \"failed\") {\n          return returnErrorTask(kind, error, completedOn);\n        }\n        const { results } = actionData as KeyPhraseExtractionLROResult;\n        const { modelVersion, statistics } = results;\n        return {\n          kind,\n          results: toKeyPhraseExtractionResult(docIds, results),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          modelVersion,\n        };\n      }\n      case \"EntityLinkingLROResults\": {\n        const kind = \"EntityLinking\";\n        if (actionData.status === \"failed\") {\n          return returnErrorTask(kind, error, completedOn);\n        }\n        const { results } = actionData as EntityLinkingLROResult;\n        const { modelVersion, statistics } = results;\n        return {\n          kind,\n          results: toEntityLinkingResult(docIds, results),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          modelVersion,\n        };\n      }\n      case \"HealthcareLROResults\": {\n        const kind = \"Healthcare\";\n        if (actionData.status === \"failed\") {\n          return returnErrorTask(kind, error, completedOn);\n        }\n        const { results } = actionData as HealthcareLROResult;\n        const { modelVersion, statistics } = results;\n        return {\n          kind,\n          results: toHealthcareResult(docIds, results),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          modelVersion,\n        };\n      }\n      case \"CustomEntityRecognitionLROResults\": {\n        const kind = \"CustomEntityRecognition\";\n        if (actionData.status === \"failed\") {\n          return returnErrorCustomTask(kind, error, completedOn);\n        }\n        const { results } = actionData as CustomEntityRecognitionLROResult;\n        const { deploymentName, projectName, statistics } = results;\n        return {\n          kind,\n          results: transformDocumentResults<CustomEntitiesResultDocumentsItem>(docIds, results),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          deploymentName,\n          projectName,\n        };\n      }\n      case \"CustomSingleLabelClassificationLROResults\": {\n        const kind = \"CustomSingleLabelClassification\";\n        if (actionData.status === \"failed\") {\n          return returnErrorCustomTask(kind, error, completedOn);\n        }\n        const { results } = actionData as CustomSingleLabelClassificationLROResult;\n        const { deploymentName, projectName, statistics } = results;\n        return {\n          kind,\n          results: transformDocumentResults<CustomLabelClassificationResultDocumentsItem>(\n            docIds,\n            results\n          ),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          deploymentName,\n          projectName,\n        };\n      }\n      case \"CustomMultiLabelClassificationLROResults\": {\n        const kind = \"CustomMultiLabelClassification\";\n        if (actionData.status === \"failed\") {\n          return returnErrorCustomTask(kind, error, completedOn);\n        }\n        const { results } = actionData as CustomMultiLabelClassificationLROResult;\n        const { deploymentName, projectName, statistics } = results;\n        return {\n          kind,\n          results: transformDocumentResults<CustomLabelClassificationResultDocumentsItem>(\n            docIds,\n            results\n          ),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          deploymentName,\n          projectName,\n        };\n      }\n      case \"ExtractiveSummarizationLROResults\": {\n        const kind = \"ExtractiveSummarization\";\n        if (actionData.status === \"failed\") {\n          return returnErrorTask(kind, error, completedOn);\n        }\n        const { results } = actionData as ExtractiveSummarizationLROResult;\n        const { modelVersion, statistics } = results;\n        return {\n          kind: \"ExtractiveSummarization\",\n          results: transformDocumentResults(docIds, results),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          modelVersion,\n        };\n      }\n      case \"AbstractiveSummarizationLROResults\": {\n        const kind = \"AbstractiveSummarization\";\n        if (actionData.status === \"failed\") {\n          return returnErrorTask(kind, error, completedOn);\n        }\n        const { results } = actionData as AbstractiveSummarizationLROResult;\n        const { modelVersion, statistics } = results;\n        return {\n          kind: \"AbstractiveSummarization\",\n          results: transformDocumentResults(docIds, results),\n          completedOn,\n          ...(actionName ? { actionName } : {}),\n          ...(statistics ? { statistics } : {}),\n          modelVersion,\n        };\n      }\n      default: {\n        throw new Error(`Unsupported results kind: ${resultKind}`);\n      }\n    }\n  });\n}\n/**\n * @internal\n * Transform a list of error into index and error Map\n */\nfunction toIndexErrorMap(errors: ErrorModel[]): Map<number, TextAnalysisError> {\n  const errorMap = new Map<number, TextAnalysisError>();\n  for (const error of errors) {\n    const position = extractErrorPointerIndex(error);\n    const { target, ...errorWithoutTarget } = error;\n    errorMap.set(position, toTextAnalysisError(errorWithoutTarget));\n  }\n  return errorMap;\n}\n\n/**\n * Return the error for non-custom task\n *\n * @param kind - non custom task kind\n * @param error - error returned from the service\n * @param failedOn - the LastUpdateDateTime from the service\n * @returns - AnalyzeBatchResult with error\n */\nfunction returnErrorTask(\n  kind: AnalyzeBatchActionName,\n  error: TextAnalysisError | undefined,\n  failedOn: Date\n): AnalyzeBatchResult {\n  if (!error) {\n    throw new Error(\"Unexpected response from service - no errors for missing action results.\");\n  }\n  return {\n    kind,\n    modelVersion: \"\",\n    failedOn,\n    error,\n  } as AnalyzeBatchResult;\n}\n/**\n * Return the error for non-custom task\n *\n * @param kind - non custom task kind\n * @param error - error returned from the service\n * @param failedOn - the LastUpdateDateTime from the service\n * @returns AnalyzeBatchResult for custom task with error\n */\nfunction returnErrorCustomTask(\n  kind: AnalyzeBatchActionName,\n  error: TextAnalysisError | undefined,\n  failedOn: Date\n): AnalyzeBatchResult {\n  if (!error) {\n    throw new Error(\"Unexpected response from service - no errors for missing action results.\");\n  }\n  return {\n    kind,\n    projectName: \"\",\n    deploymentName: \"\",\n    failedOn,\n    error,\n  } as AnalyzeBatchResult;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as Mappers from \"./generated/models/mappers\";\nimport * as Parameters from \"./generated/models/parameters\";\nimport {\n  AnalyzeBatchActionUnion,\n  AnalyzeTextJobStatusOptionalParams,\n  AnalyzeTextJobStatusResponse,\n  GeneratedClient,\n  TextDocumentInput,\n} from \"./generated\";\nimport {\n  AnalyzeBatchOperationState,\n  AnalyzeBatchResult,\n  PagedAnalyzeBatchResult,\n  PollerLike,\n} from \"./models\";\nimport {\n  FullOperationResponse,\n  OperationOptions,\n  OperationSpec,\n  createSerializer,\n} from \"@azure/core-client\";\nimport { LongRunningOperation, LroResponse, SimplePollerLike } from \"@azure/core-lro\";\nimport { PagedResult, getPagedAsyncIterator } from \"@azure/core-paging\";\nimport { throwError, transformAnalyzeBatchResults } from \"./transforms\";\nimport { HttpMethods } from \"@azure/core-rest-pipeline\";\nimport { TracingClient } from \"@azure/core-tracing\";\nimport { clientName } from \"./constants\";\nimport { logger } from \"./logger\";\n\nconst serializer = createSerializer(Mappers, /* isXml */ false);\n\nconst jobStatusOperationSpec: OperationSpec = {\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeTextJobState,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  headerParameters: [Parameters.accept],\n  queryParameters: [Parameters.top, Parameters.skip, Parameters.includeStatistics],\n  serializer,\n};\n\nfunction addOnResponse<TOptions extends OperationOptions>(\n  options: TOptions,\n  cb: (rawResponse: FullOperationResponse, response: unknown, error: unknown) => void\n): TOptions {\n  return {\n    ...options,\n    onResponse: (rawResponse, response, error) => {\n      cb(rawResponse, response, error);\n      options.onResponse?.(rawResponse, response, error);\n    },\n  };\n}\n\nfunction logWarnHeader(rawResponse: FullOperationResponse) {\n  const warnHeader = rawResponse.headers.get(\"warn-text\");\n  if (warnHeader) {\n    warnHeader.split(\";\").map((x) => logger.warning(x));\n  }\n}\n\nasync function getRawResponse<TOptions extends OperationOptions, TResponse>(\n  getResponse: (options: TOptions) => Promise<TResponse>,\n  options: TOptions\n): Promise<LroResponse<TResponse>> {\n  let rawResponse: FullOperationResponse;\n  const flatResponse = await getResponse(\n    addOnResponse(options, (response) => {\n      rawResponse = response;\n    })\n  );\n  return {\n    flatResponse,\n    rawResponse: {\n      statusCode: rawResponse!.status,\n      headers: rawResponse!.headers.toJSON(),\n      body: rawResponse!.parsedBody,\n    },\n  };\n}\n\nasync function sendRequest<TOptions extends OperationOptions>(settings: {\n  client: GeneratedClient;\n  tracing: TracingClient;\n  spec: OperationSpec;\n  spanStr: string;\n  opOptions: TOptions;\n  path: string;\n  httpMethod?: HttpMethods;\n}): Promise<LroResponse<unknown>> {\n  const { client, opOptions, path, spanStr, spec, tracing, httpMethod = \"GET\" } = settings;\n  return tracing.withSpan(spanStr, opOptions, async (finalOptions: TOptions) =>\n    throwError(\n      getRawResponse(\n        (options) =>\n          client.sendOperationRequest(\n            { options },\n            {\n              ...spec,\n              path,\n              httpMethod,\n            }\n          ),\n        finalOptions\n      )\n    )\n  );\n}\n\n/**\n * @internal\n */\nfunction createSendPollRequest<TOptions extends OperationOptions>(settings: {\n  client: GeneratedClient;\n  tracing: TracingClient;\n  options: TOptions;\n  spanStr: string;\n}): (path: string) => Promise<LroResponse<unknown>> {\n  const { client, options, tracing, spanStr } = settings;\n  return async (path: string): Promise<LroResponse<unknown>> => {\n    return throwError(\n      sendRequest({\n        client,\n        opOptions: addOnResponse(options, (_, response) => {\n          const castResponse = response as AnalyzeTextJobStatusResponse;\n          if (castResponse.status.toLowerCase() === \"partiallysucceeded\") {\n            castResponse.status = \"succeeded\";\n          }\n        }),\n        path,\n        spanStr,\n        spec: jobStatusOperationSpec,\n        tracing,\n      })\n    );\n  };\n}\n\n/**\n * @internal\n */\nexport function createAnalyzeBatchLro(settings: {\n  client: GeneratedClient;\n  tracing: TracingClient;\n  commonOptions: OperationOptions;\n  initialRequestOptions: {\n    displayName?: string;\n  };\n  pollRequestOptions: {\n    includeStatistics?: boolean;\n  };\n  documents: TextDocumentInput[];\n  tasks: AnalyzeBatchActionUnion[];\n}): LongRunningOperation {\n  const {\n    client,\n    commonOptions,\n    documents,\n    initialRequestOptions,\n    pollRequestOptions,\n    tasks,\n    tracing,\n  } = settings;\n  return {\n    async sendInitialRequest(): Promise<LroResponse<unknown>> {\n      return tracing.withSpan(\n        `${clientName}.beginAnalyzeBatch`,\n        addOnResponse(\n          {\n            ...commonOptions,\n            ...initialRequestOptions,\n          },\n          logWarnHeader\n        ),\n        async (finalOptions) =>\n          throwError(\n            getRawResponse(\n              (paramOptions) =>\n                client.analyzeBatch(\n                  {\n                    tasks,\n                    analysisInput: {\n                      documents,\n                    },\n                    displayName: initialRequestOptions.displayName,\n                  },\n                  paramOptions\n                ),\n              finalOptions\n            )\n          )\n      );\n    },\n    sendPollRequest: createSendPollRequest({\n      client,\n      options: { ...commonOptions, ...pollRequestOptions },\n      spanStr: `${clientName}.beginAnalyzeBatch`,\n      tracing,\n    }),\n  };\n}\n\n/**\n * @internal\n */\nexport function getDocIDsFromState(serializedState: string): string[] {\n  try {\n    const { docIds } = JSON.parse(serializedState).state;\n    return docIds;\n  } catch (e) {\n    logger.error(\n      `Document IDs are not found in the LRO's state. The results may not be ordered correctly.`\n    );\n    return [];\n  }\n}\n\n/**\n * @internal\n */\nexport function createCreateAnalyzeBatchPollerLro<OptionsT extends OperationOptions>(settings: {\n  client: GeneratedClient;\n  tracing: TracingClient;\n  options: OptionsT;\n}): LongRunningOperation {\n  const { client, options, tracing } = settings;\n  return {\n    async sendInitialRequest(): Promise<LroResponse<unknown>> {\n      throw new Error(`The operation has already started`);\n    },\n    sendPollRequest: createSendPollRequest({\n      client,\n      options,\n      spanStr: `${clientName}.beginAnalyzeBatch`,\n      tracing,\n    }),\n  };\n}\n\n/**\n * @internal\n */\nexport function processAnalyzeResult(options: {\n  client: GeneratedClient;\n  tracing: TracingClient;\n  docIds: string[];\n  opOptions: AnalyzeTextJobStatusOptionalParams;\n  state: { continuationToken: string };\n}): (result: unknown, state: AnalyzeBatchOperationState) => PagedAnalyzeBatchResult {\n  return (): PagedAnalyzeBatchResult => {\n    const { client, docIds, opOptions, tracing, state } = options;\n    const pageURL = state.continuationToken;\n    const pagedResult: PagedResult<AnalyzeBatchResult[]> = {\n      firstPageLink: pageURL,\n      getPage: async (pageLink: string, maxPageSize?: number) => {\n        const response = await sendRequest({\n          client,\n          spec: jobStatusOperationSpec,\n          spanStr: `${clientName}.beginAnalyzeBatch`,\n          // if `top` is set to `undefined`, the default value will not be sent\n          // as part of the request.\n          opOptions: maxPageSize ? { ...opOptions, top: maxPageSize } : opOptions,\n          path: pageLink,\n          tracing,\n        });\n        const flatResponse = response.flatResponse as AnalyzeTextJobStatusResponse;\n        return {\n          page: transformAnalyzeBatchResults(docIds, flatResponse.tasks.items, flatResponse.errors),\n          nextPageLink: flatResponse.nextLink,\n        };\n      },\n    };\n    return getPagedAsyncIterator(pagedResult);\n  };\n}\n\ntype Writable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * @internal\n */\nexport function createUpdateAnalyzeState(docIds?: string[]) {\n  return (state: AnalyzeBatchOperationState, lastResponse: LroResponse): void => {\n    const { createdOn, modifiedOn, id, displayName, expiresOn, tasks, lastUpdateDateTime } =\n      lastResponse.flatResponse as AnalyzeTextJobStatusResponse & { lastUpdateDateTime: string };\n    const mutableState = state as Writable<AnalyzeBatchOperationState> & {\n      docIds?: string[];\n    };\n    mutableState.createdOn = createdOn;\n    // FIXME: remove this mitigation when the service API is fixed\n    mutableState.modifiedOn = modifiedOn ? modifiedOn : new Date(lastUpdateDateTime);\n    mutableState.expiresOn = expiresOn;\n    mutableState.displayName = displayName;\n    mutableState.id = id;\n    mutableState.actionSucceededCount = tasks.completed;\n    mutableState.actionFailedCount = tasks.failed;\n    mutableState.actionInProgressCount = tasks.inProgress;\n    if (mutableState.docIds === undefined && docIds !== undefined) {\n      mutableState.docIds = docIds;\n    }\n  };\n}\n\n/**\n * @internal\n */\nexport function createPollerWithCancellation(settings: {\n  poller: SimplePollerLike<AnalyzeBatchOperationState, PagedAnalyzeBatchResult>;\n  client: GeneratedClient;\n  tracing: TracingClient;\n  options: AnalyzeTextJobStatusOptionalParams;\n  id: string;\n}): PollerLike<AnalyzeBatchOperationState, PagedAnalyzeBatchResult> {\n  const { client, options, poller, id, tracing } = settings;\n  return {\n    ...poller,\n    sendCancellationRequest: async () => {\n      await tracing.withSpan(`${clientName}.beginAnalyzeBatch`, options, async (finalOptions) =>\n        throwError(\n          getRawResponse(\n            (paramOptions) => client.analyzeText.cancelJob(id, paramOptions),\n            finalOptions\n          )\n        )\n      );\n    },\n  };\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { AnalyzeText } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClient } from \"../generatedClient\";\nimport {\n  AnalyzeTextJobStatusOptionalParams,\n  AnalyzeTextJobStatusResponse,\n  AnalyzeTextCancelJobOptionalParams,\n  AnalyzeTextCancelJobResponse\n} from \"../models\";\n\n/** Class containing AnalyzeText operations. */\nexport class AnalyzeTextImpl implements AnalyzeText {\n  private readonly client: GeneratedClient;\n\n  /**\n   * Initialize a new instance of the class AnalyzeText class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are\n   * succeeded, the job will transition to the succeeded state and results will be available for each\n   * task.\n   * @param jobId Job ID\n   * @param options The options parameters.\n   */\n  jobStatus(\n    jobId: string,\n    options?: AnalyzeTextJobStatusOptionalParams\n  ): Promise<AnalyzeTextJobStatusResponse> {\n    return this.client.sendOperationRequest(\n      { jobId, options },\n      jobStatusOperationSpec\n    );\n  }\n\n  /**\n   * Cancel a long-running Text Analysis job.\n   * @param jobId Job ID\n   * @param options The options parameters.\n   */\n  cancelJob(\n    jobId: string,\n    options?: AnalyzeTextCancelJobOptionalParams\n  ): Promise<AnalyzeTextCancelJobResponse> {\n    return this.client.sendOperationRequest(\n      { jobId, options },\n      cancelJobOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst jobStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/analyze-text/jobs/{jobId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeTextJobState\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.includeStatistics,\n    Parameters.top,\n    Parameters.skip\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.jobId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst cancelJobOperationSpec: coreClient.OperationSpec = {\n  path: \"/analyze-text/jobs/{jobId}:cancel\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.AnalyzeTextCancelJobHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.jobId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport {\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest\n} from \"@azure/core-rest-pipeline\";\nimport { AnalyzeTextImpl } from \"./operations\";\nimport { AnalyzeText } from \"./operationsInterfaces\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  GeneratedClientOptionalParams,\n  AnalyzeActionUnion,\n  AnalyzeOptionalParams,\n  AnalyzeResponse,\n  AnalyzeTextJobsInput,\n  AnalyzeBatchOptionalParams,\n  AnalyzeBatchResponse\n} from \"./models\";\n\n/** @internal */\nexport class GeneratedClient extends coreClient.ServiceClient {\n  endpoint: string;\n  apiVersion: string;\n\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param endpoint Supported Cognitive Services endpoint (e.g.,\n   *                 https://<resource-name>.api.cognitiveservices.azure.com).\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: GeneratedClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-ai-language-text/1.1.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint: options.endpoint ?? options.baseUri ?? \"{Endpoint}/language\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.endpoint = endpoint;\n\n    // Assigning values to Constant parameters\n    this.apiVersion = options.apiVersion || \"2023-04-01\";\n    this.analyzeText = new AnalyzeTextImpl(this);\n    this.addCustomApiVersionPolicy(options.apiVersion);\n  }\n\n  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */\n  private addCustomApiVersionPolicy(apiVersion?: string) {\n    if (!apiVersion) {\n      return;\n    }\n    const apiVersionPolicy = {\n      name: \"CustomApiVersionPolicy\",\n      async sendRequest(\n        request: PipelineRequest,\n        next: SendRequest\n      ): Promise<PipelineResponse> {\n        const param = request.url.split(\"?\");\n        if (param.length > 1) {\n          const newParams = param[1].split(\"&\").map((item) => {\n            if (item.indexOf(\"api-version\") > -1) {\n              return \"api-version=\" + apiVersion;\n            } else {\n              return item;\n            }\n          });\n          request.url = param[0] + \"?\" + newParams.join(\"&\");\n        }\n        return next(request);\n      }\n    };\n    this.pipeline.addPolicy(apiVersionPolicy);\n  }\n\n  /**\n   * Submit a collection of text documents for analysis.  Specify a single unique task to be executed\n   * immediately.\n   * @param body Collection of documents to analyze and a single task to execute.\n   * @param options The options parameters.\n   */\n  analyze(\n    body: AnalyzeActionUnion,\n    options?: AnalyzeOptionalParams\n  ): Promise<AnalyzeResponse> {\n    return this.sendOperationRequest({ body, options }, analyzeOperationSpec);\n  }\n\n  /**\n   * Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed\n   * as a long-running operation.\n   * @param body Collection of documents to analyze and one or more tasks to execute.\n   * @param options The options parameters.\n   */\n  analyzeBatch(\n    body: AnalyzeTextJobsInput,\n    options?: AnalyzeBatchOptionalParams\n  ): Promise<AnalyzeBatchResponse> {\n    return this.sendOperationRequest(\n      { body, options },\n      analyzeBatchOperationSpec\n    );\n  }\n\n  analyzeText: AnalyzeText;\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst analyzeOperationSpec: coreClient.OperationSpec = {\n  path: \"/:analyze-text\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeTextTaskResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.apiVersion, Parameters.includeStatistics],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst analyzeBatchOperationSpec: coreClient.OperationSpec = {\n  path: \"/analyze-text/jobs\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.body1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { KeyCredential } from \"@azure/core-auth\";\n\nconst API_KEY_HEADER_NAME = \"Ocp-Apim-Subscription-Key\";\n\n/**\n * The programmatic identifier of the textAnalyticsAzureKeyCredentialPolicy.\n */\nconst textAnalyticsAzureKeyCredentialPolicyName = \"textAnalyticsAzureKeyCredentialPolicy\";\n\n/**\n * Create an HTTP pipeline policy to authenticate a request\n * using an `AzureKeyCredential` for Text Analytics\n * @internal\n */\nexport function textAnalyticsAzureKeyCredentialPolicy(credential: KeyCredential): PipelinePolicy {\n  return {\n    name: textAnalyticsAzureKeyCredentialPolicyName,\n    sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      request.headers.set(API_KEY_HEADER_NAME, credential.key);\n      return next(request);\n    },\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AnalyzeActionName,\n  AnalyzeActionParameters,\n  AnalyzeBatchAction,\n  AnalyzeBatchPoller,\n  AnalyzeResult,\n  BeginAnalyzeBatchOptions,\n  RestoreAnalyzeBatchPollerOptions,\n  TextAnalysisClientOptions,\n  TextAnalysisOperationOptions,\n} from \"./models\";\nimport {\n  AnalyzeBatchActionUnion,\n  GeneratedClientOptionalParams,\n  LanguageDetectionInput,\n  TextDocumentInput,\n} from \"./generated/models\";\nimport { DEFAULT_COGNITIVE_SCOPE, SDK_VERSION } from \"./constants\";\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { TracingClient, createTracingClient } from \"@azure/core-tracing\";\nimport {\n  convertToLanguageDetectionInput,\n  convertToTextDocumentInput,\n  getOperationOptions,\n  isStringArray,\n} from \"./util\";\nimport {\n  createAnalyzeBatchLro,\n  createCreateAnalyzeBatchPollerLro,\n  createPollerWithCancellation,\n  createUpdateAnalyzeState,\n  getDocIDsFromState,\n  processAnalyzeResult,\n} from \"./lro\";\nimport { throwError, transformActionResult } from \"./transforms\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\nimport { createHttpPoller } from \"@azure/core-lro\";\nimport { logger } from \"./logger\";\nimport { textAnalyticsAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\n\n/**\n * A client for interacting with the text analysis features in Azure Cognitive\n * Language Service.\n *\n * The client needs the endpoint of a Language resource and an authentication\n * method such as an API key or AAD. The API key and endpoint can be found in\n * the Language resource page in the Azure portal. They will be located in the\n * resource's Keys and Endpoint page, under Resource Management.\n *\n * ### Examples for authentication:\n *\n * #### API Key\n *\n * ```js\n * import { TextAnalysisClient, AzureKeyCredential } from \"@azure/ai-language-text\";\n *\n * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n * const credential = new AzureKeyCredential(\"<api key>\");\n *\n * const client = new TextAnalysisClient(endpoint, credential);\n * ```\n *\n * #### Azure Active Directory\n *\n * See the [`@azure/identity`](https://npmjs.com/package/\\@azure/identity)\n * package for more information about authenticating with Azure Active Directory.\n *\n * ```js\n * import { TextAnalysisClient } from \"@azure/ai-language-text\";\n * import { DefaultAzureCredential } from \"@azure/identity\";\n *\n * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n * const credential = new DefaultAzureCredential();\n *\n * const client = new TextAnalysisClient(endpoint, credential);\n * ```\n */\nexport class TextAnalysisClient {\n  private readonly _client: GeneratedClient;\n  private readonly _tracing: TracingClient;\n  private readonly defaultCountryHint: string;\n  private readonly defaultLanguage: string;\n\n  /**\n   * Creates an instance of TextAnalysisClient with the endpoint of a Language\n   * resource and an authentication method such as an API key or AAD.\n   *\n   * The API key and endpoint can be found in the Language resource page in the\n   * Azure portal. They will be located in the resource's Keys and Endpoint page,\n   * under Resource Management.\n   *\n   * ### Example\n   *\n   * ```js\n   * import { TextAnalysisClient, AzureKeyCredential } from \"@azure/ai-language-text\";\n   *\n   * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n   * const credential = new AzureKeyCredential(\"<api key>\");\n   *\n   * const client = new TextAnalysisClient(endpoint, credential);\n   * ```\n   *\n   * @param endpointUrl - The URL to the endpoint of a Cognitive Language Service resource\n   * @param credential - Key credential to be used to authenticate requests to the service.\n   * @param options - Used to configure the TextAnalytics client.\n   */\n  constructor(endpointUrl: string, credential: KeyCredential, options?: TextAnalysisClientOptions);\n  /**\n   * Creates an instance of TextAnalysisClient with the endpoint of a Language\n   * resource and an authentication method such as an API key or AAD.\n   *\n   * The API key and endpoint can be found in the Language resource page in the\n   * Azure portal. They will be located in the resource's Keys and Endpoint page,\n   * under Resource Management.\n   *\n   * ### Example\n   *\n   * See the [`@azure/identity`](https://npmjs.com/package/\\@azure/identity)\n   * package for more information about authenticating with Azure Active Directory.\n   *\n   * ```js\n   * import { TextAnalysisClient } from \"@azure/ai-language-text\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n   * const credential = new DefaultAzureCredential();\n   *\n   * const client = new TextAnalysisClient(endpoint, credential);\n   * ```\n   *\n   * @param endpointUrl - The URL to the endpoint of a Cognitive Language Service resource\n   * @param credential - Token credential to be used to authenticate requests to the service.\n   * @param options - Used to configure the TextAnalytics client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential,\n    options?: TextAnalysisClientOptions\n  );\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential | KeyCredential,\n    options: TextAnalysisClientOptions = {}\n  ) {\n    const {\n      defaultCountryHint = \"us\",\n      defaultLanguage = \"en\",\n      serviceVersion,\n      ...pipelineOptions\n    } = options;\n    this.defaultCountryHint = defaultCountryHint;\n    this.defaultLanguage = defaultLanguage;\n\n    const internalPipelineOptions: GeneratedClientOptionalParams = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          additionalAllowedHeaderNames: [\"x-ms-correlation-request-id\", \"x-ms-request-id\"],\n        },\n      },\n      apiVersion: serviceVersion,\n    };\n\n    this._client = new GeneratedClient(endpointUrl, internalPipelineOptions);\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy({ credential, scopes: DEFAULT_COGNITIVE_SCOPE })\n      : textAnalyticsAzureKeyCredentialPolicy(credential);\n\n    this._client.pipeline.addPolicy(authPolicy);\n    this._tracing = createTracingClient({\n      packageName: \"@azure/ai-language-text\",\n      packageVersion: SDK_VERSION,\n      namespace: \"Microsoft.CognitiveServices\",\n    });\n  }\n\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input strings are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}\n   * for data limits.\n   *\n   * ### Examples\n   *\n   * #### Language detection\n   *\n   * ```js\n   * const documents = [<input strings>];\n   * const countryHint = \"us\";\n   * const results = await client.analyze(\"LanguageDetection\", documents, countryHint);\n   *\n   * for (let i = 0; i < results.length; i++) {\n   *   const result = results[i];\n   *   if (result.error) {\n   *     // a document has an error instead of results\n   *   } else {\n   *     const { name, confidenceScore, iso6391Name } = result.primaryLanguage;\n   *   }\n   * }\n   * ```\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/language-detection/overview}\n   * for more information on language detection.\n   *\n   * @param actionName - the name of the action to be performed on the input\n   *   documents, see ${@link AnalyzeActionName}\n   * @param documents - the input documents to be analyzed\n   * @param options - optional action parameters and settings for the operation\n   *\n   * @returns an array of results where each element contains the primary language\n   *   for the corresponding input document.\n   */\n  public async analyze<ActionName extends \"LanguageDetection\">(\n    actionName: ActionName,\n    documents: LanguageDetectionInput[],\n    options?: AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions\n  ): Promise<AnalyzeResult<ActionName>>;\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input strings are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}\n   * for data limits.\n   *\n   * ### Examples\n   *\n   * #### Language detection\n   *\n   * ```js\n   * const documents = [<input strings>];\n   * const countryHint = \"us\";\n   * const results = await client.analyze(\"LanguageDetection\", documents, countryHint);\n   *\n   * for (const result of results) {\n   *   if (result.error) {\n   *     // a document has an error instead of results\n   *   } else {\n   *     const { name, confidenceScore, iso6391Name } = result.primaryLanguage;\n   *   }\n   * }\n   * ```\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/language-detection/overview}\n   * for more information on language detection.\n   *\n   * @param actionName - the name of the action to be performed on the input\n   *   documents, see ${@link AnalyzeActionName}\n   * @param documents - the input documents to be analyzed\n   * @param countryHint - Indicates the country of origin for all of\n   *   the input strings to assist the model in predicting the language they are\n   *   written in.  If unspecified, this value will be set to the default\n   *   country hint in `TextAnalysisClientOptions`. If set to an empty string,\n   *   or the string \"none\", the service will apply a model where the country is\n   *   explicitly unset. The same country hint is applied to all strings in the\n   *   input collection.\n   * @param options - optional action parameters and settings for the operation\n   *\n   * @returns an array of results where each element contains the primary language\n   *   for the corresponding input document.\n   */\n  public async analyze<ActionName extends \"LanguageDetection\">(\n    actionName: ActionName,\n    documents: string[],\n    countryHint?: string,\n    options?: AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions\n  ): Promise<AnalyzeResult<ActionName>>;\n  /**\n   * Runs a predictive model to perform the action of choice on the input\n   * documents. See ${@link AnalyzeActionName} for a list of supported\n   * actions.\n   *\n   * The layout of each item in the results array depends on the action chosen.\n   * For example, each PIIEntityRecognition document result consists of both\n   * `entities` and `redactedText` where the former is a list of all Pii entities\n   * in the text and the latter is the original text after all such Pii entities\n   * have been redacted from it.\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}\n   * for data limits.\n   *\n   * ### Examples\n   *\n   * #### Opinion mining\n   *\n   * ```js\n   * const documents = [{\n   *  id: \"1\",\n   *  text: \"The food and service aren't the best\",\n   *  language: \"en\"\n   * }];\n   * const results = await client.analyze(\"SentimentAnalysis\", documents, {\n   *   includeOpinionMining: true,\n   * });\n   *\n   * for (const result of results) {\n   *   if (result.error) {\n   *     // a document has an error instead of results\n   *   } else {\n   *     const { sentiment, confidenceScores, sentences } = result;\n   *     for (const { sentiment, confidenceScores, opinions } of sentences) {\n   *       for (const { target, assessments } of opinions) {\n   *         const { text, sentiment, confidenceScores } = target;\n   *         for (const { text, sentiment } of assessments) {\n   *           // Do something\n   *         }\n   *       }\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview}\n   * for more information on opinion mining.\n   *\n   * #### Personally identifiable information\n   *\n   * ```js\n   * const documents = [<input documents>];\n   * const categoriesFilter = [KnownPiiCategory.USSocialSecurityNumber];\n   * const domainFilter = KnownPiiDomain.Phi;\n   * const results = await client.analyze(\"PiiEntityRecognition\", documents, {\n   *   domainFilter, categoriesFilter\n   * });\n   *\n   * for (const result of results) {\n   *   if (result.error) {\n   *     // a document has an error instead of results\n   *   } else {\n   *     const { entities, redactedText } = result;\n   *     for (const { text, category, confidenceScore, length, offset } of entities) {\n   *       // Do something\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/personally-identifiable-information/overview}\n   * for more information on personally identifiable information.\n   *\n   * @param actionName - the name of the action to be performed on the input\n   *   documents, see ${@link AnalyzeActionName}\n   * @param documents - the input documents to be analyzed\n   * @param options - optional action parameters and settings for the operation\n   *\n   * @returns an array of results corresponding to the input documents\n   */\n  public async analyze<ActionName extends AnalyzeActionName = AnalyzeActionName>(\n    actionName: ActionName,\n    documents: TextDocumentInput[],\n    options?: AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions\n  ): Promise<AnalyzeResult<ActionName>>;\n\n  /**\n   * Runs a predictive model to perform the action of choice on the input\n   * strings. See ${@link AnalyzeActionName} for a list of supported\n   * actions.\n   *\n   * The layout of each item in the results array depends on the action chosen.\n   * For example, each PIIEntityRecognition document result consists of both\n   * `entities` and `redactedText` where the former is a list of all Pii entities\n   * in the text and the latter is the original text after all such Pii entities\n   * have been redacted from it.\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}\n   * for data limits.\n   *\n   * ### Examples\n   *\n   * #### Opinion mining\n   *\n   * ```js\n   * const documents = [\"The food and service aren't the best\"];\n   * const results = await client.analyze(\"SentimentAnalysis\", documents, {\n   *   includeOpinionMining: true,\n   * });\n   *\n   * for (const result of results) {\n   *   if (result.error) {\n   *     // a document has an error instead of results\n   *   } else {\n   *     const { sentiment, confidenceScores, sentences } = result;\n   *     for (const { sentiment, confidenceScores, opinions } of sentences) {\n   *       for (const { target, assessments } of opinions) {\n   *         const { text, sentiment, confidenceScores } = target;\n   *         for (const { text, sentiment } of assessments) {\n   *           // Do something\n   *         }\n   *       }\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview}\n   * for more information on opinion mining.\n   *\n   * #### Personally identifiable information\n   *\n   * ```js\n   * const documents = [<input strings>];\n   * const languageCode = \"en\";\n   * const categoriesFilter = [KnownPiiCategory.USSocialSecurityNumber];\n   * const domainFilter = KnownPiiDomain.Phi;\n   * const results = await client.analyze(\"PiiEntityRecognition\", documents, languageCode, {\n   *   domainFilter, categoriesFilter\n   * });\n   *\n   * for (const result of results) {\n   *   if (result.error) {\n   *     // a document has an error instead of results\n   *   } else {\n   *     const { entities, redactedText } = result;\n   *     for (const { text, category, confidenceScore, length, offset } of entities) {\n   *       // Do something\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/personally-identifiable-information/overview}\n   * for more information on personally identifiable information.\n   *\n   * @param actionName - the name of the action to be performed on the input\n   *   documents, see ${@link AnalyzeActionName}\n   * @param documents - the input documents to be analyzed\n   * @param languageCode - the code of the language that all the input strings are\n   *    written in. If unspecified, this value will be set to the default\n   *    language in `TextAnalysisClientOptions`. If set to an empty string,\n   *    the service will apply a model where the language is explicitly set to\n   *    \"None\". Language support varies per action, for example, more information\n   *    about the languages supported for Entity Recognition actions can be\n   *    found in {@link https://docs.microsoft.com//azure/cognitive-services/language-service/named-entity-recognition/language-support}.\n   *    If set to \"auto\", the service will automatically infer the language from\n   *    the input text.\n   * @param options - optional action parameters and settings for the operation\n   *\n   * @returns an array of results corresponding to the input documents\n   */\n  public async analyze<ActionName extends AnalyzeActionName = AnalyzeActionName>(\n    actionName: ActionName,\n    documents: string[],\n    languageCode?: string,\n    options?: AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions\n  ): Promise<AnalyzeResult<ActionName>>;\n  // implementation\n  public async analyze<ActionName extends AnalyzeActionName = AnalyzeActionName>(\n    actionName: ActionName,\n    documents: string[] | LanguageDetectionInput[] | TextDocumentInput[],\n    languageOrCountryHintOrOptions?:\n      | string\n      | (AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions),\n    options?: AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions\n  ): Promise<AnalyzeResult<ActionName>> {\n    let realOptions: AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions;\n\n    if (documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    let realInputs: LanguageDetectionInput[] | TextDocumentInput[];\n    if (isStringArray(documents)) {\n      if (actionName === \"LanguageDetection\") {\n        realInputs = convertToLanguageDetectionInput(\n          documents,\n          typeof languageOrCountryHintOrOptions === \"string\"\n            ? languageOrCountryHintOrOptions\n            : this.defaultCountryHint\n        );\n      } else {\n        realInputs = convertToTextDocumentInput(\n          documents,\n          typeof languageOrCountryHintOrOptions === \"string\"\n            ? languageOrCountryHintOrOptions\n            : this.defaultLanguage\n        );\n      }\n      realOptions = options || ({} as any);\n    } else {\n      realInputs = documents;\n      realOptions =\n        (languageOrCountryHintOrOptions as AnalyzeActionParameters<ActionName> &\n          TextAnalysisOperationOptions) || {};\n    }\n    const { options: operationOptions, rest: action } = getOperationOptions(realOptions);\n    return this._tracing.withSpan(\n      \"TextAnalysisClient.analyze\",\n      operationOptions,\n      async (updatedOptions: TextAnalysisOperationOptions) =>\n        throwError(\n          this._client\n            .analyze(\n              {\n                kind: actionName,\n                analysisInput: {\n                  documents: realInputs,\n                },\n                parameters: action,\n              } as any,\n              updatedOptions\n            )\n            .then(\n              (result) =>\n                transformActionResult(\n                  actionName,\n                  realInputs.map(({ id }) => id),\n                  result\n                ) as AnalyzeResult<ActionName>\n            )\n        )\n    );\n  }\n\n  /**\n   * Performs an array (batch) of actions on the input documents. Each action has\n   * a `kind` field that specifies the nature of the action. See ${@link AnalyzeBatchActionNames}\n   * for a list of supported actions. In addition to `kind`, actions could also\n   * have other parameters such as `disableServiceLogs` and `modelVersion`.\n   *\n   * The results array contains the results for those input actions where each\n   * item also has a `kind` field that specifies the type of the results.\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}\n   * for data limits.\n   *\n   * ### Examples\n   *\n   * #### Key phrase extraction and Pii entity recognition\n   *\n   * ```js\n   * const poller = await client.beginAnalyzeBatch(\n   *  [{ kind: \"KeyPhraseExtraction\" }, { kind: \"PiiEntityRecognition\" }],\n   *  documents\n   * );\n   * const actionResults = await poller.pollUntilDone();\n   *\n   * for await (const actionResult of actionResults) {\n   *  if (actionResult.error) {\n   *    throw new Error(`Unexpected error`);\n   *  }\n   *  switch (actionResult.kind) {\n   *    case \"KeyPhraseExtraction\": {\n   *      for (const doc of actionResult.results) {\n   *        // do something\n   *      }\n   *      break;\n   *    }\n   *    case \"PiiEntityRecognition\": {\n   *      for (const doc of actionResult.results) {\n   *        // do something\n   *      }\n   *      break;\n   *    }\n   *  }\n   * }\n   * ```\n   *\n   * @param actions - an array of actions that will be run on the input documents\n   * @param documents - the input documents to be analyzed\n   * @param languageCode - the code of the language that all the input strings are\n   *    written in. If unspecified, this value will be set to the default\n   *    language in `TextAnalysisClientOptions`. If set to an empty string,\n   *    the service will apply a model where the language is explicitly set to\n   *    \"None\". Language support varies per action, for example, more information\n   *    about the languages supported for Entity Recognition actions can be\n   *    found in {@link https://docs.microsoft.com//azure/cognitive-services/language-service/named-entity-recognition/language-support}.\n   *    If set to \"auto\", the service will automatically infer the language from\n   *    the input text.\n   * @param options - optional settings for the operation\n   *\n   * @returns an array of results corresponding to the input actions\n   */\n  async beginAnalyzeBatch(\n    actions: AnalyzeBatchAction[],\n    documents: string[],\n    languageCode?: string,\n    options?: BeginAnalyzeBatchOptions\n  ): Promise<AnalyzeBatchPoller>;\n  /**\n   * Performs an array (batch) of actions on the input documents. Each action has\n   * a `kind` field that specifies the nature of the action. See ${@link AnalyzeBatchActionNames}\n   * for a list of supported actions. In addition to `kind`, actions could also\n   * have other parameters such as `disableServiceLogs` and `modelVersion`.\n   *\n   * The results array contains the results for those input actions where each\n   * item also has a `kind` field that specifies the type of the results.\n   *\n   * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}\n   * for data limits.\n   *\n   * ### Examples\n   *\n   * #### Keyphrase extraction and Pii entity recognition\n   *\n   * ```js\n   * const poller = await client.beginAnalyzeBatch(\n   *  [{ kind: \"KeyPhraseExtraction\" }, { kind: \"PiiEntityRecognition\" }],\n   *  documents\n   * );\n   * const actionResults = await poller.pollUntilDone();\n   *\n   * for await (const actionResult of actionResults) {\n   *  if (actionResult.error) {\n   *    throw new Error(`Unexpected error`);\n   *  }\n   *  switch (actionResult.kind) {\n   *    case \"KeyPhraseExtraction\": {\n   *      for (const doc of actionResult.results) {\n   *        // do something\n   *      }\n   *      break;\n   *    }\n   *    case \"PiiEntityRecognition\": {\n   *      for (const doc of actionResult.results) {\n   *        // do something\n   *      }\n   *      break;\n   *    }\n   *  }\n   * }\n   * ```\n   *\n   * @param actions - an array of actions that will be run on the input documents\n   * @param documents - the input documents to be analyzed\n   * @param options - optional settings for the operation\n   *\n   * @returns an array of results corresponding to the input actions\n   */\n  async beginAnalyzeBatch(\n    actions: AnalyzeBatchAction[],\n    documents: TextDocumentInput[],\n    options?: BeginAnalyzeBatchOptions\n  ): Promise<AnalyzeBatchPoller>;\n  // implementation\n  async beginAnalyzeBatch(\n    actions: AnalyzeBatchAction[],\n    documents: TextDocumentInput[] | string[],\n    languageOrOptions?: BeginAnalyzeBatchOptions | string,\n    options: BeginAnalyzeBatchOptions = {}\n  ): Promise<AnalyzeBatchPoller> {\n    let realOptions: BeginAnalyzeBatchOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const languageCode = (languageOrOptions as string) ?? this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, languageCode);\n      realOptions = options;\n    } else {\n      realInputs = documents;\n      realOptions = languageOrOptions as BeginAnalyzeBatchOptions;\n    }\n    const realActions = actions.map(\n      ({ kind, actionName, ...rest }): AnalyzeBatchActionUnion & { parameters: unknown } => ({\n        kind,\n        actionName,\n        parameters: rest,\n      })\n    );\n    const { includeStatistics, updateIntervalInMs, displayName, ...rest } = realOptions;\n    const lro = createAnalyzeBatchLro({\n      client: this._client,\n      commonOptions: rest,\n      documents: realInputs,\n      initialRequestOptions: { displayName },\n      pollRequestOptions: { includeStatistics },\n      tasks: realActions,\n      tracing: this._tracing,\n    });\n\n    const docIds = realInputs.map(({ id }) => id);\n\n    const state = { continuationToken: \"\" };\n\n    const poller = await createHttpPoller(lro, {\n      intervalInMs: updateIntervalInMs,\n      processResult: processAnalyzeResult({\n        client: this._client,\n        tracing: this._tracing,\n        docIds,\n        opOptions: { ...rest, includeStatistics },\n        state,\n      }),\n      updateState: createUpdateAnalyzeState(docIds),\n      withOperationLocation(operationLocation: string) {\n        state.continuationToken = operationLocation;\n      },\n    });\n\n    await poller.poll();\n    const id = poller.getOperationState().id;\n    return createPollerWithCancellation({\n      id,\n      client: this._client,\n      options,\n      poller,\n      tracing: this._tracing,\n    });\n  }\n\n  /**\n   * Creates a poller from the serialized state of another poller. This can be\n   * useful when you want to create pollers on a different host or a poller\n   * needs to be constructed after the original one is not in scope.\n   *\n   * @param serializedState - the serialized state of another poller. It is the\n   *                          result of `poller.toString()`\n   * @param options - optional settings for the operation\n   *\n   * # Example\n   *\n   * `client.beginAnalyzeBatch` returns a promise that will resolve to a poller.\n   * The state of the poller can be serialized and used to create another as follows:\n   *\n   * ```js\n   * const serializedState = poller.toString();\n   * const rehydratedPoller = await client.createAnalyzeBatchPoller(serializedState);\n   * const actionResults = await rehydratedPoller.pollUntilDone();\n   * ```\n   */\n  async restoreAnalyzeBatchPoller(\n    serializedState: string,\n    options?: RestoreAnalyzeBatchPollerOptions\n  ): Promise<AnalyzeBatchPoller>;\n  // implementation\n  async restoreAnalyzeBatchPoller(\n    serializedState: string,\n    options: RestoreAnalyzeBatchPollerOptions = {}\n  ): Promise<AnalyzeBatchPoller> {\n    const { includeStatistics, updateIntervalInMs, ...rest } = options;\n    const docIds = getDocIDsFromState(serializedState);\n    const lro = createCreateAnalyzeBatchPollerLro({\n      client: this._client,\n      options: { ...rest, includeStatistics },\n      tracing: this._tracing,\n    });\n\n    const state = { continuationToken: \"\" };\n\n    const poller = await createHttpPoller(lro, {\n      intervalInMs: updateIntervalInMs,\n      restoreFrom: serializedState,\n      processResult: processAnalyzeResult({\n        client: this._client,\n        tracing: this._tracing,\n        docIds,\n        opOptions: { ...rest, includeStatistics },\n        state,\n      }),\n      updateState: createUpdateAnalyzeState(),\n      withOperationLocation(operationLocation: string) {\n        state.continuationToken = operationLocation;\n      },\n    });\n\n    await poller.poll();\n    const id = poller.getOperationState().id;\n    return createPollerWithCancellation({\n      id,\n      client: this._client,\n      options,\n      poller,\n      tracing: this._tracing,\n    });\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport type AnalyzeActionUnion =\n  | AnalyzeAction\n  | AnalyzeTextEntityLinkingInput\n  | AnalyzeTextEntityRecognitionInput\n  | AnalyzeTextKeyPhraseExtractionInput\n  | AnalyzeTextPiiEntitiesRecognitionInput\n  | AnalyzeTextLanguageDetectionInput\n  | AnalyzeTextSentimentAnalysisInput;\nexport type AnalyzeTextTaskResultUnion =\n  | AnalyzeTextTaskResult\n  | SentimentTaskResult\n  | EntitiesTaskResult\n  | EntityLinkingTaskResult\n  | PiiTaskResult\n  | KeyPhraseTaskResult\n  | LanguageDetectionTaskResult;\nexport type AnalyzeBatchActionUnion =\n  | AnalyzeBatchAction\n  | CustomEntitiesLROTask\n  | CustomSingleLabelClassificationLROTask\n  | CustomMultiLabelClassificationLROTask\n  | HealthcareLROTask\n  | SentimentAnalysisLROTask\n  | EntitiesLROTask\n  | EntityLinkingLROTask\n  | PiiLROTask\n  | ExtractiveSummarizationLROTask\n  | KeyPhraseLROTask\n  | AbstractiveSummarizationLROTask;\nexport type AnalyzeTextLROResultUnion =\n  | AnalyzeTextLROResult\n  | EntityRecognitionLROResult\n  | CustomEntityRecognitionLROResult\n  | CustomSingleLabelClassificationLROResult\n  | CustomMultiLabelClassificationLROResult\n  | EntityLinkingLROResult\n  | PiiEntityRecognitionLROResult\n  | ExtractiveSummarizationLROResult\n  | HealthcareLROResult\n  | SentimentLROResult\n  | KeyPhraseExtractionLROResult\n  | AbstractiveSummarizationLROResult;\n\nexport interface AnalyzeAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind:\n    | \"EntityLinking\"\n    | \"EntityRecognition\"\n    | \"KeyPhraseExtraction\"\n    | \"PiiEntityRecognition\"\n    | \"LanguageDetection\"\n    | \"SentimentAnalysis\";\n}\n\nexport interface AnalyzeTextTaskResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind:\n    | \"SentimentAnalysisResults\"\n    | \"EntityRecognitionResults\"\n    | \"EntityLinkingResults\"\n    | \"PiiEntityRecognitionResults\"\n    | \"KeyPhraseExtractionResults\"\n    | \"LanguageDetectionResults\";\n}\n\n/** Error response. */\nexport interface ErrorResponse {\n  /** The error object. */\n  error: ErrorModel;\n}\n\n/** The error object. */\nexport interface ErrorModel {\n  /** Describes unknown properties. The value of an unknown property can be of \"any\" type. */\n  [property: string]: any;\n  /** One of a server-defined set of error codes. */\n  code: ErrorCode;\n  /** A human-readable representation of the error. */\n  message: string;\n  /** The target of the error. */\n  target?: string;\n  /** An array of details about specific errors that led to this reported error. */\n  details?: ErrorModel[];\n  /** An object containing more specific information than the current object about the error. */\n  innererror?: InnerErrorModel;\n}\n\n/** An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses. */\nexport interface InnerErrorModel {\n  /** One of a server-defined set of error codes. */\n  code: InnerErrorCode;\n  /** Error message. */\n  message: string;\n  /** Error details. */\n  details?: { [propertyName: string]: string };\n  /** Error target. */\n  target?: string;\n  /** An object containing more specific information than the current object about the error. */\n  innererror?: InnerErrorModel;\n}\n\nexport interface AnalyzeTextJobsInput {\n  /** Optional display name for the analysis job. */\n  displayName?: string;\n  analysisInput: MultiLanguageAnalysisInput;\n  /** The set of tasks to execute on the input documents. */\n  tasks: AnalyzeBatchActionUnion[];\n}\n\nexport interface MultiLanguageAnalysisInput {\n  documents?: TextDocumentInput[];\n}\n\n/** An object representing an individual text document to be analyzed by the Language service. The document contains a unique document ID, the full text of the document, and the language of the document's text. */\nexport interface TextDocumentInput {\n  /** A unique, non-empty document identifier. */\n  id: string;\n  /** The input text to process. */\n  text: string;\n  /** (Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\" for English as default. */\n  language?: string;\n}\n\n/** The State of a batched action */\nexport interface BatchActionState {\n  /** The name of the action */\n  actionName?: string;\n}\n\nexport interface JobState {\n  displayName?: string;\n  createdOn: Date;\n  expiresOn?: Date;\n  id: string;\n  modifiedOn: Date;\n  status: OperationStatus;\n  errors?: ErrorModel[];\n  nextLink?: string;\n}\n\nexport interface TasksState {\n  tasks: TasksStateTasks;\n}\n\nexport interface TasksStateTasks {\n  completed: number;\n  failed: number;\n  inProgress: number;\n  total: number;\n  items?: AnalyzeTextLROResultUnion[];\n}\n\nexport interface TaskState {\n  lastUpdateDateTime: Date;\n  status: State;\n}\n\nexport interface AnalyzeTextJobStatistics {\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n}\n\n/** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\nexport interface TextDocumentBatchStatistics {\n  /** Number of documents submitted in the request. */\n  documentCount: number;\n  /** Number of valid documents. This excludes empty, over-size limit or non-supported languages documents. */\n  validDocumentCount: number;\n  /** Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. */\n  erroneousDocumentCount: number;\n  /** Number of transactions for the request. */\n  transactionCount: number;\n}\n\nexport interface LanguageDetectionAnalysisInput {\n  documents?: LanguageDetectionInput[];\n}\n\n/** An input to the language detection operation. This object specifies a unique document id, as well as the full text of a document and a hint indicating the document's country of origin to assist the Language predictive model in detecting the document's language. */\nexport interface LanguageDetectionInput {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** Full text of the input document. */\n  text: string;\n  /** A hint indicating the document's country of origin to assist the Language predictive model in detecting the document's language. */\n  countryHint?: string;\n}\n\n/** Configuration common to all actions. */\nexport interface ActionCommon {\n  /**\n   * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Cognitive Language Service logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true, disables in logging and may limit our ability to remediate issues that occur.\n   *\n   * Default is false.\n   */\n  disableServiceLogs?: boolean;\n}\n\nexport interface CustomResult {\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates the project name for the model. */\n  projectName: string;\n  /** This field indicates the deployment name for the model. */\n  deploymentName: string;\n}\n\n/** Contains details of errors encountered during a job execution. */\nexport interface DocumentError {\n  /** The ID of the input document. */\n  id: string;\n  /** Error encountered. */\n  error: ErrorModel;\n}\n\n/** A word or phrase identified as an entity that is categorized within a taxonomy of types. The set of categories recognized by the Language service is described at https://docs.microsoft.com/azure/cognitive-services/language-service/named-entity-recognition/concepts/named-entity-categories . */\nexport interface Entity {\n  /** Entity text as appears in the request. */\n  text: string;\n  /** Entity type. */\n  category: string;\n  /** (Optional) Entity sub type. */\n  subCategory?: string;\n  /** Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. */\n  offset: number;\n  /** Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. */\n  length: number;\n  /** Confidence score between 0 and 1 of the extracted entity. */\n  confidenceScore: number;\n}\n\nexport interface DocumentResult {\n  /** Unique, non-empty document identifier. */\n  id: string;\n  /** Warnings encountered while processing document. */\n  warnings: DocumentWarning[];\n  /** if showStats=true was specified in the request this field will contain information about the document payload. */\n  statistics?: TextDocumentStatistics;\n}\n\n/** Represents a warning encountered while processing a document. */\nexport interface DocumentWarning {\n  /** Error code. */\n  code: WarningCode;\n  /** Warning message. */\n  message: string;\n}\n\n/** if includeStatistics=true was specified in the request this field will contain information about the document payload. */\nexport interface TextDocumentStatistics {\n  /** Number of text elements recognized in the document. */\n  characterCount: number;\n  /** Number of transactions for the document. */\n  transactionCount: number;\n}\n\n/** A classification result from a custom classify document single category action */\nexport interface ClassificationCategory {\n  /** Classification type. */\n  category: string;\n  /** Confidence score between 0 and 1 of the recognized class. */\n  confidenceScore: number;\n}\n\n/** A type representing a reference for the healthcare entity into a specific entity catalog. */\nexport interface HealthcareEntity {\n  /** Entity text as appears in the request. */\n  text: string;\n  /** Healthcare Entity Category. */\n  category: HealthcareEntityCategory;\n  /** (Optional) Entity sub type. */\n  subCategory?: string;\n  /** Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. */\n  offset: number;\n  /** Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. */\n  length: number;\n  /** Confidence score between 0 and 1 of the extracted entity. */\n  confidenceScore: number;\n  /** An object that describes metadata about the healthcare entity such as whether it is hypothetical or conditional. */\n  assertion?: HealthcareAssertion;\n  /** Preferred name for the entity. Example: 'histologically' would have a 'name' of 'histologic'. */\n  normalizedText?: string;\n  /** Entity references in known data sources. */\n  dataSources?: EntityDataSource[];\n}\n\n/** An object that describes metadata about the healthcare entity such as whether it is hypothetical or conditional. */\nexport interface HealthcareAssertion {\n  /** Describes any conditionality on the entity. */\n  conditionality?: EntityConditionality;\n  /** Describes the entities certainty and polarity. */\n  certainty?: EntityCertainty;\n  /** Describes if the entity is the subject of the text or if it describes someone else. */\n  association?: EntityAssociation;\n}\n\n/** A type representing a reference for the healthcare entity into a specific entity catalog. */\nexport interface EntityDataSource {\n  /** Entity Catalog. Examples include: UMLS, CHV, MSH, etc. */\n  name: string;\n  /** Entity id in the given source catalog. */\n  entityId: string;\n}\n\n/** Every relation is an entity graph of a certain relationType, where all entities are connected and have specific roles within the relation context. */\nexport interface HealthcareRelation {\n  /** Type of relation. Examples include: `DosageOfMedication` or 'FrequencyOfMedication', etc. */\n  relationType: RelationType;\n  /** Confidence score between 0 and 1 of the extracted relation. */\n  confidenceScore?: number;\n  /** The entities in the relation. */\n  entities: HealthcareRelationEntity[];\n}\n\nexport interface HealthcareRelationEntity {\n  /** Reference link object, using a JSON pointer RFC 6901 (URI Fragment Identifier Representation), pointing to the entity . */\n  ref: string;\n  /** Role of entity in the relationship. For example: 'CD20-positive diffuse large B-cell lymphoma' has the following entities with their roles in parenthesis:  CD20 (GeneOrProtein), Positive (Expression), diffuse large B-cell lymphoma (Diagnosis). */\n  role: string;\n}\n\nexport interface PreBuiltResult {\n  /** Errors by document id. */\n  errors: DocumentError[];\n  /** if includeStatistics=true was specified in the request this field will contain information about the request payload. */\n  statistics?: TextDocumentBatchStatistics;\n  /** This field indicates which model is used for scoring. */\n  modelVersion: string;\n}\n\n/** Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative. */\nexport interface SentimentConfidenceScores {\n  /** Confidence score for positive sentiment */\n  positive: number;\n  /** Confidence score for neutral sentiment */\n  neutral: number;\n  /** Confidence score for negative sentiment */\n  negative: number;\n}\n\n/** The predicted sentiment for a given span of text. For more information regarding text sentiment, seehttps://docs.microsoft.com/azure/cognitive-services/language-service/sentiment-opinion-mining/overview. */\nexport interface SentenceSentiment {\n  /** The sentence text. */\n  text: string;\n  /** The predicted Sentiment for the sentence. */\n  sentiment: SentenceSentimentLabel;\n  /** The sentiment confidence score between 0 and 1 for the sentence for all classes. */\n  confidenceScores: SentimentConfidenceScores;\n  /** The sentence offset from the start of the document. */\n  offset: number;\n  /** The length of the sentence. */\n  length: number;\n  /** The array of sentence targets for the sentence. */\n  targets?: SentenceTarget[];\n  /** The array of assessments for the sentence. */\n  assessments?: AssessmentSentiment[];\n}\n\nexport interface SentenceTarget {\n  /** Targeted sentiment in the sentence. */\n  sentiment: TokenSentimentLabel;\n  /** Target sentiment confidence scores for the target in the sentence. */\n  confidenceScores: TargetConfidenceScores;\n  /** The target offset from the start of the sentence. */\n  offset: number;\n  /** The length of the target. */\n  length: number;\n  /** The target text detected. */\n  text: string;\n  /** The array of either assessment or target objects which is related to the target. */\n  relations: TargetRelation[];\n}\n\n/** Represents the confidence scores across all sentiment classes: positive and negative. */\nexport interface TargetConfidenceScores {\n  /** Confidence score for positive sentiment */\n  positive: number;\n  /** Confidence score for negative sentiment */\n  negative: number;\n}\n\nexport interface TargetRelation {\n  /** The type related to the target. */\n  relationType: TargetRelationType;\n  /** The JSON pointer indicating the linked object. */\n  ref: string;\n}\n\n/** An object that contains the predicted sentiment, confidence scores and other information about an assessment of a target. For example, in the sentence \"The food is good\", the assessment of the target 'food' is 'good'. */\nexport interface AssessmentSentiment {\n  /** Assessment sentiment in the sentence. */\n  sentiment: TokenSentimentLabel;\n  /** Assessment sentiment confidence scores in the sentence. */\n  confidenceScores: TargetConfidenceScores;\n  /** The assessment offset from the start of the sentence. */\n  offset: number;\n  /** The length of the assessment. */\n  length: number;\n  /** The assessment text detected. */\n  text: string;\n  /** The indicator representing if the assessment is negated. */\n  isNegated: boolean;\n}\n\n/** A word or phrase identified as a well-known entity within a database, including its formal (disambiguated) name and a link to the entity information within the source database. */\nexport interface LinkedEntity {\n  /** Entity Linking formal name. */\n  name: string;\n  /** List of instances this entity appears in the text. */\n  matches: Match[];\n  /** Language used in the data source. */\n  language: string;\n  /** Unique identifier of the recognized entity from the data source. */\n  dataSourceEntityId?: string;\n  /** URL for the entity's page from the data source. */\n  url: string;\n  /** Data source used to extract entity linking, such as Wiki/Bing etc. */\n  dataSource: string;\n  /** Bing Entity Search API unique identifier of the recognized entity. */\n  bingEntitySearchApiId?: string;\n}\n\n/** Details about the specific substring in a document that refers to a linked entity identified by the Language model. */\nexport interface Match {\n  /** If a well known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned. */\n  confidenceScore: number;\n  /** Entity text as appears in the request. */\n  text: string;\n  /** Start position for the entity match text. */\n  offset: number;\n  /** Length for the entity match text. */\n  length: number;\n}\n\n/** A sentence that is part of the extracted summary. */\nexport interface SummarySentence {\n  /** The extracted sentence text. */\n  text: string;\n  /** A double value representing the relevance of the sentence within the summary. Higher values indicate higher importance. */\n  rankScore: number;\n  /** The sentence offset from the start of the document, based on the value of the parameter StringIndexType. */\n  offset: number;\n  /** The length of the sentence. */\n  length: number;\n}\n\n/** Information about the language of a document as identified by the Language service. */\nexport interface DetectedLanguage {\n  /** Long name of a detected language (e.g. English, French). */\n  name: string;\n  /** A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr). */\n  iso6391Name: string;\n  /** A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. */\n  confidenceScore: number;\n}\n\nexport interface Pagination {\n  nextLink?: string;\n}\n\nexport interface JobErrors {\n  errors?: ErrorModel[];\n}\n\n/** Supported parameters for an Abstractive Summarization task. */\nexport interface AbstractiveSummarizationTaskParametersBase {\n  /** It controls the approximate number of sentences in the output summaries. */\n  sentenceCount?: number;\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.\n   *\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/** An object representing the summarization results of each document. */\nexport interface AbstractiveSummarizationResultBase {\n  /** Response by document */\n  documents: AbstractiveSummaryDocumentResult[];\n}\n\n/** An object representing a single summary with context for given document. */\nexport interface AbstractiveSummary {\n  /** The text of the summary. */\n  text: string;\n  /** The context list of the summary. */\n  contexts: SummaryContext[];\n}\n\n/** The context of the summary. */\nexport interface SummaryContext {\n  /** Start position for the context. Use of different 'stringIndexType' values can affect the offset returned. */\n  offset: number;\n  /** The length of the context. Use of different 'stringIndexType' values can affect the length returned. */\n  length: number;\n}\n\nexport interface AnalyzeTextEntityLinkingInput extends AnalyzeAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"EntityLinking\";\n  analysisInput?: MultiLanguageAnalysisInput;\n  /** Options for an entity linking action. */\n  parameters?: EntityLinkingAction;\n}\n\nexport interface AnalyzeTextEntityRecognitionInput extends AnalyzeAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"EntityRecognition\";\n  analysisInput?: MultiLanguageAnalysisInput;\n  /** Options for an entity recognition action. */\n  parameters?: EntityRecognitionAction;\n}\n\nexport interface AnalyzeTextKeyPhraseExtractionInput extends AnalyzeAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"KeyPhraseExtraction\";\n  analysisInput?: MultiLanguageAnalysisInput;\n  /** Options for a key phrase recognition action. */\n  parameters?: KeyPhraseExtractionAction;\n}\n\nexport interface AnalyzeTextPiiEntitiesRecognitionInput extends AnalyzeAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"PiiEntityRecognition\";\n  analysisInput?: MultiLanguageAnalysisInput;\n  /** Options for a Pii entity recognition action. */\n  parameters?: PiiEntityRecognitionAction;\n}\n\nexport interface AnalyzeTextLanguageDetectionInput extends AnalyzeAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"LanguageDetection\";\n  analysisInput?: LanguageDetectionAnalysisInput;\n  /** Options for a language detection action. */\n  parameters?: LanguageDetectionAction;\n}\n\nexport interface AnalyzeTextSentimentAnalysisInput extends AnalyzeAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"SentimentAnalysis\";\n  analysisInput?: MultiLanguageAnalysisInput;\n  /** Options for a sentiment analysis action. */\n  parameters?: SentimentAnalysisAction;\n}\n\nexport interface SentimentTaskResult extends AnalyzeTextTaskResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"SentimentAnalysisResults\";\n  results: SentimentResponse;\n}\n\nexport interface EntitiesTaskResult extends AnalyzeTextTaskResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"EntityRecognitionResults\";\n  results: EntitiesResult;\n}\n\nexport interface EntityLinkingTaskResult extends AnalyzeTextTaskResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"EntityLinkingResults\";\n  results: EntityLinkingResult;\n}\n\nexport interface PiiTaskResult extends AnalyzeTextTaskResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"PiiEntityRecognitionResults\";\n  results: PiiResult;\n}\n\nexport interface KeyPhraseTaskResult extends AnalyzeTextTaskResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"KeyPhraseExtractionResults\";\n  results: KeyPhraseResult;\n}\n\nexport interface LanguageDetectionTaskResult extends AnalyzeTextTaskResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"LanguageDetectionResults\";\n  results: LanguageDetectionResult;\n}\n\nexport interface AnalyzeBatchAction extends BatchActionState {\n  /** Enumeration of supported long-running Text Analysis tasks. */\n  kind: AnalyzeTextLROTaskKind;\n}\n\nexport interface AnalyzeTextLROResult extends TaskState, BatchActionState {\n  /** Enumeration of supported Text Analysis long-running operation task results. */\n  kind: AnalyzeTextLROResultsKind;\n}\n\nexport interface AnalyzeTextJobState\n  extends JobState,\n    TasksState,\n    AnalyzeTextJobStatistics {}\n\n/** Configuration common to all actions that use prebuilt models. */\nexport interface ActionPrebuilt extends ActionCommon {\n  /** The version of the model to be used by the action. */\n  modelVersion?: string;\n}\n\n/** Configuration common to all actions that use custom models. */\nexport interface ActionCustom extends ActionCommon {\n  /** The project name for the model to be used by the action. */\n  projectName: string;\n  /** The deployment name for the model to be used by the action. */\n  deploymentName: string;\n}\n\nexport interface CustomEntitiesResult extends CustomResult {\n  /** Response by document */\n  documents: CustomEntitiesResultDocumentsItem[];\n}\n\nexport interface CustomLabelClassificationResult extends CustomResult {\n  /** Response by document */\n  documents: CustomLabelClassificationResultDocumentsItem[];\n}\n\nexport interface EntitiesDocumentResult extends DocumentResult {\n  /** Recognized entities in the document. */\n  entities: Entity[];\n}\n\nexport interface ClassificationDocumentResult extends DocumentResult {\n  classifications: ClassificationCategory[];\n}\n\nexport interface HealthcareEntitiesDocumentResult extends DocumentResult {\n  /** Healthcare entities. */\n  entities: HealthcareEntity[];\n  /** Healthcare entity relations. */\n  relations: HealthcareRelation[];\n}\n\nexport interface SentimentDocumentResult extends DocumentResult {\n  /** Predicted sentiment for document (Negative, Neutral, Positive, or Mixed). */\n  sentiment: DocumentSentimentLabel;\n  /** Document level sentiment confidence scores between 0 and 1 for each sentiment class. */\n  confidenceScores: SentimentConfidenceScores;\n  /** Sentence level sentiment analysis. */\n  sentences: SentenceSentiment[];\n}\n\nexport interface LinkedEntitiesDocumentResult extends DocumentResult {\n  /** Recognized well known entities in the document. */\n  entities: LinkedEntity[];\n}\n\nexport interface PiiEntitiesDocumentResult extends DocumentResult {\n  /** Returns redacted text. */\n  redactedText: string;\n  /** Recognized entities in the document. */\n  entities: Entity[];\n}\n\nexport interface ExtractedSummaryDocumentResult extends DocumentResult {\n  /** A ranked list of sentences representing the extracted summary. */\n  sentences: SummarySentence[];\n}\n\nexport interface KeyPhrasesDocumentResult extends DocumentResult {\n  /** A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document. */\n  keyPhrases: string[];\n}\n\nexport interface LanguageDetectionDocumentResult extends DocumentResult {\n  /** Detected Language. */\n  detectedLanguage: DetectedLanguage;\n}\n\n/** An object representing the summarization result of a single document. */\nexport interface AbstractiveSummaryDocumentResult extends DocumentResult {\n  /** A list of abstractive summaries. */\n  summaries: AbstractiveSummary[];\n}\n\nexport interface HealthcareResult extends PreBuiltResult {\n  documents: HealthcareResultDocumentsItem[];\n}\n\nexport interface SentimentResponse extends PreBuiltResult {\n  /** Sentiment analysis per document. */\n  documents: SentimentResponseDocumentsItem[];\n}\n\nexport interface EntitiesResult extends PreBuiltResult {\n  /** Response by document */\n  documents: EntitiesResultDocumentsItem[];\n}\n\nexport interface EntityLinkingResult extends PreBuiltResult {\n  /** Response by document */\n  documents: EntityLinkingResultDocumentsItem[];\n}\n\nexport interface PiiResult extends PreBuiltResult {\n  /** Response by document */\n  documents: PiiResultDocumentsItem[];\n}\n\nexport interface ExtractiveSummarizationResult extends PreBuiltResult {\n  /** Response by document */\n  documents: ExtractedSummaryDocumentResult[];\n}\n\nexport interface KeyPhraseResult extends PreBuiltResult {\n  /** Response by document */\n  documents: KeyPhraseResultDocumentsItem[];\n}\n\nexport interface LanguageDetectionResult extends PreBuiltResult {\n  /** Response by document */\n  documents: LanguageDetectionDocumentResult[];\n}\n\n/** An object representing the pre-build summarization results of each document. */\nexport interface AbstractiveSummarizationResult\n  extends AbstractiveSummarizationResultBase,\n    PreBuiltResult {}\n\n/** Supported parameters for the pre-build Abstractive Summarization task. */\nexport interface AbstractiveSummarizationAction\n  extends AbstractiveSummarizationTaskParametersBase,\n    ActionPrebuilt {}\n\n/** Use custom models to ease the process of information extraction from unstructured documents like contracts or financial documents */\nexport interface CustomEntitiesLROTask extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"CustomEntityRecognition\";\n  /** Supported parameters for a Custom Entities task. */\n  parameters?: CustomEntityRecognitionAction;\n}\n\n/** Use custom models to classify text into single label taxonomy */\nexport interface CustomSingleLabelClassificationLROTask\n  extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"CustomSingleLabelClassification\";\n  /** Options for a single-label classification custom action */\n  parameters?: CustomSingleLabelClassificationAction;\n}\n\n/** Use custom models to classify text into multi label taxonomy */\nexport interface CustomMultiLabelClassificationLROTask\n  extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"CustomMultiLabelClassification\";\n  /** Options for a multi-label classification custom action */\n  parameters?: CustomMultiLabelClassificationAction;\n}\n\nexport interface HealthcareLROTask extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"Healthcare\";\n  /** Supported parameters for a Healthcare task. */\n  parameters?: HealthcareAction;\n}\n\n/** An object representing the task definition for a Sentiment Analysis task. */\nexport interface SentimentAnalysisLROTask extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"SentimentAnalysis\";\n  /** Options for a sentiment analysis action. */\n  parameters?: SentimentAnalysisAction;\n}\n\n/** An object representing the task definition for an Entities Recognition task. */\nexport interface EntitiesLROTask extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"EntityRecognition\";\n  /** Options for an entity recognition action. */\n  parameters?: EntityRecognitionAction;\n}\n\n/** An object representing the task definition for an Entity Linking task. */\nexport interface EntityLinkingLROTask extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"EntityLinking\";\n  /** Options for an entity linking action. */\n  parameters?: EntityLinkingAction;\n}\n\n/** An object representing the task definition for a PII Entities Recognition task. */\nexport interface PiiLROTask extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"PiiEntityRecognition\";\n  /** Options for a Pii entity recognition action. */\n  parameters?: PiiEntityRecognitionAction;\n}\n\n/** An object representing the task definition for an Extractive Summarization task. */\nexport interface ExtractiveSummarizationLROTask extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"ExtractiveSummarization\";\n  /** Supported parameters for an Extractive Summarization task. */\n  parameters?: ExtractiveSummarizationAction;\n}\n\n/** An object representing the task definition for a Key Phrase Extraction task. */\nexport interface KeyPhraseLROTask extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"KeyPhraseExtraction\";\n  /** Options for a key phrase recognition action. */\n  parameters?: KeyPhraseExtractionAction;\n}\n\n/** An object representing the task definition for an Abstractive Summarization task. */\nexport interface AbstractiveSummarizationLROTask extends AnalyzeBatchAction {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"AbstractiveSummarization\";\n  /** Supported parameters for the pre-build Abstractive Summarization task. */\n  parameters: AbstractiveSummarizationAction;\n}\n\nexport interface EntityRecognitionLROResult extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"EntityRecognitionLROResults\";\n  results: EntitiesResult;\n}\n\nexport interface CustomEntityRecognitionLROResult extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"CustomEntityRecognitionLROResults\";\n  results: CustomEntitiesResult;\n}\n\nexport interface CustomSingleLabelClassificationLROResult\n  extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"CustomSingleLabelClassificationLROResults\";\n  results: CustomLabelClassificationResult;\n}\n\nexport interface CustomMultiLabelClassificationLROResult\n  extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"CustomMultiLabelClassificationLROResults\";\n  results: CustomLabelClassificationResult;\n}\n\nexport interface EntityLinkingLROResult extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"EntityLinkingLROResults\";\n  results: EntityLinkingResult;\n}\n\nexport interface PiiEntityRecognitionLROResult extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"PiiEntityRecognitionLROResults\";\n  results: PiiResult;\n}\n\nexport interface ExtractiveSummarizationLROResult extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"ExtractiveSummarizationLROResults\";\n  results: ExtractiveSummarizationResult;\n}\n\nexport interface HealthcareLROResult extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"HealthcareLROResults\";\n  results: HealthcareResult;\n}\n\nexport interface SentimentLROResult extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"SentimentAnalysisLROResults\";\n  results: SentimentResponse;\n}\n\nexport interface KeyPhraseExtractionLROResult extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"KeyPhraseExtractionLROResults\";\n  results: KeyPhraseResult;\n}\n\n/** An object representing the results for an Abstractive Summarization task. */\nexport interface AbstractiveSummarizationLROResult\n  extends AnalyzeTextLROResult {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"AbstractiveSummarizationLROResults\";\n  /** An object representing the pre-build summarization results of each document. */\n  results: AbstractiveSummarizationResult;\n}\n\n/** Options for an entity linking action. */\nexport interface EntityLinkingAction extends ActionPrebuilt {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.\n   *\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/** Options for an entity recognition action. */\nexport interface EntityRecognitionAction extends ActionPrebuilt {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.\n   *\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/** Options for a key phrase recognition action. */\nexport interface KeyPhraseExtractionAction extends ActionPrebuilt {}\n\n/** Options for a Pii entity recognition action. */\nexport interface PiiEntityRecognitionAction extends ActionPrebuilt {\n  /**\n   * Filters entities to ones only included in the specified domain (e.g., if set to `Phi`, only entities in the Protected Healthcare Information domain will be returned). For a list of possible domains, see {@link KnownPiiEntityDomain}.\n   *\n   * See {@link https://aka.ms/tanerpii the service documentation} for more information.\n   */\n  domainFilter?: PiiEntityDomain;\n  /** Filters entities to ones only included in the specified array of categories. For a list of possible categories, see {@link KnownPiiCategory} */\n  categoriesFilter?: PiiEntityCategory[];\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.\n   *\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/** Options for a language detection action. */\nexport interface LanguageDetectionAction extends ActionPrebuilt {}\n\n/** Options for a sentiment analysis action. */\nexport interface SentimentAnalysisAction extends ActionPrebuilt {\n  /** Enables performing opinion mining on the input documents, a more  granular analysis around the aspects of a product or service (also known as aspect-based sentiment analysis). If set to true, {@link SentenceSentiment.opinions} will contain the results of this analysis. See {@link https://docs.microsoft.com/azure/cognitive-services/language-service/sentiment-opinion-mining/overview#opinion-mining the service documentation} for more information. */\n  includeOpinionMining?: boolean;\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.\n   *\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/** Supported parameters for a Healthcare task. */\nexport interface HealthcareAction extends ActionPrebuilt {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.\n   *\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/** Supported parameters for an Extractive Summarization task. */\nexport interface ExtractiveSummarizationAction extends ActionPrebuilt {\n  /** The max number of sentences to be part of the summary. */\n  maxSentenceCount?: number;\n  /** The sorting criteria to use for the results of Extractive Summarization. */\n  orderBy?: ExtractiveSummarizationOrderingCriteria;\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.\n   *\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/** Supported parameters for a Custom Entities task. */\nexport interface CustomEntityRecognitionAction extends ActionCustom {\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.\n   *\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/** Options for a single-label classification custom action */\nexport interface CustomSingleLabelClassificationAction extends ActionCustom {}\n\n/** Options for a multi-label classification custom action */\nexport interface CustomMultiLabelClassificationAction extends ActionCustom {}\n\nexport interface CustomEntitiesResultDocumentsItem\n  extends EntitiesDocumentResult {}\n\nexport interface EntitiesResultDocumentsItem extends EntitiesDocumentResult {}\n\nexport interface CustomLabelClassificationResultDocumentsItem\n  extends ClassificationDocumentResult {}\n\nexport interface HealthcareResultDocumentsItem\n  extends HealthcareEntitiesDocumentResult {}\n\nexport interface SentimentResponseDocumentsItem\n  extends SentimentDocumentResult {}\n\nexport interface EntityLinkingResultDocumentsItem\n  extends LinkedEntitiesDocumentResult {}\n\nexport interface PiiResultDocumentsItem extends PiiEntitiesDocumentResult {}\n\nexport interface KeyPhraseResultDocumentsItem\n  extends KeyPhrasesDocumentResult {}\n\n/** Defines headers for GeneratedClient_analyzeBatch operation. */\nexport interface GeneratedClientAnalyzeBatchHeaders {\n  operationLocation?: string;\n}\n\n/** Defines headers for AnalyzeText_cancelJob operation. */\nexport interface AnalyzeTextCancelJobHeaders {\n  operationLocation?: string;\n}\n\n/** Known values of {@link AnalyzeTextTaskKind} that the service accepts. */\nexport enum KnownAnalyzeTextTaskKind {\n  /** SentimentAnalysis */\n  SentimentAnalysis = \"SentimentAnalysis\",\n  /** EntityRecognition */\n  EntityRecognition = \"EntityRecognition\",\n  /** PiiEntityRecognition */\n  PiiEntityRecognition = \"PiiEntityRecognition\",\n  /** KeyPhraseExtraction */\n  KeyPhraseExtraction = \"KeyPhraseExtraction\",\n  /** LanguageDetection */\n  LanguageDetection = \"LanguageDetection\",\n  /** EntityLinking */\n  EntityLinking = \"EntityLinking\"\n}\n\n/**\n * Defines values for AnalyzeTextTaskKind. \\\n * {@link KnownAnalyzeTextTaskKind} can be used interchangeably with AnalyzeTextTaskKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SentimentAnalysis** \\\n * **EntityRecognition** \\\n * **PiiEntityRecognition** \\\n * **KeyPhraseExtraction** \\\n * **LanguageDetection** \\\n * **EntityLinking**\n */\nexport type AnalyzeTextTaskKind = string;\n\n/** Known values of {@link AnalyzeTextTaskResultsKind} that the service accepts. */\nexport enum KnownAnalyzeTextTaskResultsKind {\n  /** SentimentAnalysisResults */\n  SentimentAnalysisResults = \"SentimentAnalysisResults\",\n  /** EntityRecognitionResults */\n  EntityRecognitionResults = \"EntityRecognitionResults\",\n  /** PiiEntityRecognitionResults */\n  PiiEntityRecognitionResults = \"PiiEntityRecognitionResults\",\n  /** KeyPhraseExtractionResults */\n  KeyPhraseExtractionResults = \"KeyPhraseExtractionResults\",\n  /** LanguageDetectionResults */\n  LanguageDetectionResults = \"LanguageDetectionResults\",\n  /** EntityLinkingResults */\n  EntityLinkingResults = \"EntityLinkingResults\"\n}\n\n/**\n * Defines values for AnalyzeTextTaskResultsKind. \\\n * {@link KnownAnalyzeTextTaskResultsKind} can be used interchangeably with AnalyzeTextTaskResultsKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SentimentAnalysisResults** \\\n * **EntityRecognitionResults** \\\n * **PiiEntityRecognitionResults** \\\n * **KeyPhraseExtractionResults** \\\n * **LanguageDetectionResults** \\\n * **EntityLinkingResults**\n */\nexport type AnalyzeTextTaskResultsKind = string;\n\n/** Known values of {@link ErrorCode} that the service accepts. */\nexport enum KnownErrorCode {\n  /** InvalidRequest */\n  InvalidRequest = \"InvalidRequest\",\n  /** InvalidArgument */\n  InvalidArgument = \"InvalidArgument\",\n  /** Unauthorized */\n  Unauthorized = \"Unauthorized\",\n  /** Forbidden */\n  Forbidden = \"Forbidden\",\n  /** NotFound */\n  NotFound = \"NotFound\",\n  /** ProjectNotFound */\n  ProjectNotFound = \"ProjectNotFound\",\n  /** OperationNotFound */\n  OperationNotFound = \"OperationNotFound\",\n  /** AzureCognitiveSearchNotFound */\n  AzureCognitiveSearchNotFound = \"AzureCognitiveSearchNotFound\",\n  /** AzureCognitiveSearchIndexNotFound */\n  AzureCognitiveSearchIndexNotFound = \"AzureCognitiveSearchIndexNotFound\",\n  /** TooManyRequests */\n  TooManyRequests = \"TooManyRequests\",\n  /** AzureCognitiveSearchThrottling */\n  AzureCognitiveSearchThrottling = \"AzureCognitiveSearchThrottling\",\n  /** AzureCognitiveSearchIndexLimitReached */\n  AzureCognitiveSearchIndexLimitReached = \"AzureCognitiveSearchIndexLimitReached\",\n  /** InternalServerError */\n  InternalServerError = \"InternalServerError\",\n  /** ServiceUnavailable */\n  ServiceUnavailable = \"ServiceUnavailable\",\n  /** Timeout */\n  Timeout = \"Timeout\",\n  /** QuotaExceeded */\n  QuotaExceeded = \"QuotaExceeded\",\n  /** Conflict */\n  Conflict = \"Conflict\",\n  /** Warning */\n  Warning = \"Warning\"\n}\n\n/**\n * Defines values for ErrorCode. \\\n * {@link KnownErrorCode} can be used interchangeably with ErrorCode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **InvalidRequest** \\\n * **InvalidArgument** \\\n * **Unauthorized** \\\n * **Forbidden** \\\n * **NotFound** \\\n * **ProjectNotFound** \\\n * **OperationNotFound** \\\n * **AzureCognitiveSearchNotFound** \\\n * **AzureCognitiveSearchIndexNotFound** \\\n * **TooManyRequests** \\\n * **AzureCognitiveSearchThrottling** \\\n * **AzureCognitiveSearchIndexLimitReached** \\\n * **InternalServerError** \\\n * **ServiceUnavailable** \\\n * **Timeout** \\\n * **QuotaExceeded** \\\n * **Conflict** \\\n * **Warning**\n */\nexport type ErrorCode = string;\n\n/** Known values of {@link InnerErrorCode} that the service accepts. */\nexport enum KnownInnerErrorCode {\n  /** InvalidRequest */\n  InvalidRequest = \"InvalidRequest\",\n  /** InvalidParameterValue */\n  InvalidParameterValue = \"InvalidParameterValue\",\n  /** KnowledgeBaseNotFound */\n  KnowledgeBaseNotFound = \"KnowledgeBaseNotFound\",\n  /** AzureCognitiveSearchNotFound */\n  AzureCognitiveSearchNotFound = \"AzureCognitiveSearchNotFound\",\n  /** AzureCognitiveSearchThrottling */\n  AzureCognitiveSearchThrottling = \"AzureCognitiveSearchThrottling\",\n  /** ExtractionFailure */\n  ExtractionFailure = \"ExtractionFailure\",\n  /** InvalidRequestBodyFormat */\n  InvalidRequestBodyFormat = \"InvalidRequestBodyFormat\",\n  /** EmptyRequest */\n  EmptyRequest = \"EmptyRequest\",\n  /** MissingInputDocuments */\n  MissingInputDocuments = \"MissingInputDocuments\",\n  /** InvalidDocument */\n  InvalidDocument = \"InvalidDocument\",\n  /** ModelVersionIncorrect */\n  ModelVersionIncorrect = \"ModelVersionIncorrect\",\n  /** InvalidDocumentBatch */\n  InvalidDocumentBatch = \"InvalidDocumentBatch\",\n  /** UnsupportedLanguageCode */\n  UnsupportedLanguageCode = \"UnsupportedLanguageCode\",\n  /** InvalidCountryHint */\n  InvalidCountryHint = \"InvalidCountryHint\"\n}\n\n/**\n * Defines values for InnerErrorCode. \\\n * {@link KnownInnerErrorCode} can be used interchangeably with InnerErrorCode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **InvalidRequest** \\\n * **InvalidParameterValue** \\\n * **KnowledgeBaseNotFound** \\\n * **AzureCognitiveSearchNotFound** \\\n * **AzureCognitiveSearchThrottling** \\\n * **ExtractionFailure** \\\n * **InvalidRequestBodyFormat** \\\n * **EmptyRequest** \\\n * **MissingInputDocuments** \\\n * **InvalidDocument** \\\n * **ModelVersionIncorrect** \\\n * **InvalidDocumentBatch** \\\n * **UnsupportedLanguageCode** \\\n * **InvalidCountryHint**\n */\nexport type InnerErrorCode = string;\n\n/** Known values of {@link AnalyzeTextLROTaskKind} that the service accepts. */\nexport enum KnownAnalyzeTextLROTaskKind {\n  /** SentimentAnalysis */\n  SentimentAnalysis = \"SentimentAnalysis\",\n  /** EntityRecognition */\n  EntityRecognition = \"EntityRecognition\",\n  /** PiiEntityRecognition */\n  PiiEntityRecognition = \"PiiEntityRecognition\",\n  /** KeyPhraseExtraction */\n  KeyPhraseExtraction = \"KeyPhraseExtraction\",\n  /** EntityLinking */\n  EntityLinking = \"EntityLinking\",\n  /** Healthcare */\n  Healthcare = \"Healthcare\",\n  /** ExtractiveSummarization */\n  ExtractiveSummarization = \"ExtractiveSummarization\",\n  /** CustomEntityRecognition */\n  CustomEntityRecognition = \"CustomEntityRecognition\",\n  /** CustomSingleLabelClassification */\n  CustomSingleLabelClassification = \"CustomSingleLabelClassification\",\n  /** CustomMultiLabelClassification */\n  CustomMultiLabelClassification = \"CustomMultiLabelClassification\",\n  /** AbstractiveSummarization */\n  AbstractiveSummarization = \"AbstractiveSummarization\"\n}\n\n/**\n * Defines values for AnalyzeTextLROTaskKind. \\\n * {@link KnownAnalyzeTextLROTaskKind} can be used interchangeably with AnalyzeTextLROTaskKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SentimentAnalysis** \\\n * **EntityRecognition** \\\n * **PiiEntityRecognition** \\\n * **KeyPhraseExtraction** \\\n * **EntityLinking** \\\n * **Healthcare** \\\n * **ExtractiveSummarization** \\\n * **CustomEntityRecognition** \\\n * **CustomSingleLabelClassification** \\\n * **CustomMultiLabelClassification** \\\n * **AbstractiveSummarization**\n */\nexport type AnalyzeTextLROTaskKind = string;\n\n/** Known values of {@link OperationStatus} that the service accepts. */\nexport enum KnownOperationStatus {\n  /** NotStarted */\n  NotStarted = \"notStarted\",\n  /** Running */\n  Running = \"running\",\n  /** Succeeded */\n  Succeeded = \"succeeded\",\n  /** PartiallyCompleted */\n  PartiallyCompleted = \"partiallyCompleted\",\n  /** Failed */\n  Failed = \"failed\",\n  /** Cancelled */\n  Cancelled = \"cancelled\",\n  /** Cancelling */\n  Cancelling = \"cancelling\"\n}\n\n/**\n * Defines values for OperationStatus. \\\n * {@link KnownOperationStatus} can be used interchangeably with OperationStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **notStarted** \\\n * **running** \\\n * **succeeded** \\\n * **partiallyCompleted** \\\n * **failed** \\\n * **cancelled** \\\n * **cancelling**\n */\nexport type OperationStatus = string;\n\n/** Known values of {@link AnalyzeTextLROResultsKind} that the service accepts. */\nexport enum KnownAnalyzeTextLROResultsKind {\n  /** SentimentAnalysisLROResults */\n  SentimentAnalysisLROResults = \"SentimentAnalysisLROResults\",\n  /** EntityRecognitionLROResults */\n  EntityRecognitionLROResults = \"EntityRecognitionLROResults\",\n  /** PiiEntityRecognitionLROResults */\n  PiiEntityRecognitionLROResults = \"PiiEntityRecognitionLROResults\",\n  /** KeyPhraseExtractionLROResults */\n  KeyPhraseExtractionLROResults = \"KeyPhraseExtractionLROResults\",\n  /** EntityLinkingLROResults */\n  EntityLinkingLROResults = \"EntityLinkingLROResults\",\n  /** HealthcareLROResults */\n  HealthcareLROResults = \"HealthcareLROResults\",\n  /** ExtractiveSummarizationLROResults */\n  ExtractiveSummarizationLROResults = \"ExtractiveSummarizationLROResults\",\n  /** CustomEntityRecognitionLROResults */\n  CustomEntityRecognitionLROResults = \"CustomEntityRecognitionLROResults\",\n  /** CustomSingleLabelClassificationLROResults */\n  CustomSingleLabelClassificationLROResults = \"CustomSingleLabelClassificationLROResults\",\n  /** CustomMultiLabelClassificationLROResults */\n  CustomMultiLabelClassificationLROResults = \"CustomMultiLabelClassificationLROResults\",\n  /** AbstractiveSummarizationLROResults */\n  AbstractiveSummarizationLROResults = \"AbstractiveSummarizationLROResults\"\n}\n\n/**\n * Defines values for AnalyzeTextLROResultsKind. \\\n * {@link KnownAnalyzeTextLROResultsKind} can be used interchangeably with AnalyzeTextLROResultsKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SentimentAnalysisLROResults** \\\n * **EntityRecognitionLROResults** \\\n * **PiiEntityRecognitionLROResults** \\\n * **KeyPhraseExtractionLROResults** \\\n * **EntityLinkingLROResults** \\\n * **HealthcareLROResults** \\\n * **ExtractiveSummarizationLROResults** \\\n * **CustomEntityRecognitionLROResults** \\\n * **CustomSingleLabelClassificationLROResults** \\\n * **CustomMultiLabelClassificationLROResults** \\\n * **AbstractiveSummarizationLROResults**\n */\nexport type AnalyzeTextLROResultsKind = string;\n\n/** Known values of {@link State} that the service accepts. */\nexport enum KnownState {\n  /** NotStarted */\n  NotStarted = \"notStarted\",\n  /** Running */\n  Running = \"running\",\n  /** Succeeded */\n  Succeeded = \"succeeded\",\n  /** Failed */\n  Failed = \"failed\",\n  /** Cancelled */\n  Cancelled = \"cancelled\",\n  /** Cancelling */\n  Cancelling = \"cancelling\"\n}\n\n/**\n * Defines values for State. \\\n * {@link KnownState} can be used interchangeably with State,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **notStarted** \\\n * **running** \\\n * **succeeded** \\\n * **failed** \\\n * **cancelled** \\\n * **cancelling**\n */\nexport type State = string;\n\n/** Known values of {@link StringIndexType} that the service accepts. */\nexport enum KnownStringIndexType {\n  /** Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo. */\n  TextElementsV8 = \"TextElements_v8\",\n  /** Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python. */\n  UnicodeCodePoint = \"UnicodeCodePoint\",\n  /** Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript. */\n  Utf16CodeUnit = \"Utf16CodeUnit\"\n}\n\n/**\n * Defines values for StringIndexType. \\\n * {@link KnownStringIndexType} can be used interchangeably with StringIndexType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **TextElements_v8**: Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo. \\\n * **UnicodeCodePoint**: Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python. \\\n * **Utf16CodeUnit**: Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript.\n */\nexport type StringIndexType = string;\n\n/** Known values of {@link PiiEntityDomain} that the service accepts. */\nexport enum KnownPiiEntityDomain {\n  /** Indicates that entities in the Personal Health Information domain should be redacted. */\n  Phi = \"phi\",\n  /** Indicates that no domain is specified. */\n  None = \"none\"\n}\n\n/**\n * Defines values for PiiEntityDomain. \\\n * {@link KnownPiiEntityDomain} can be used interchangeably with PiiEntityDomain,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **phi**: Indicates that entities in the Personal Health Information domain should be redacted. \\\n * **none**: Indicates that no domain is specified.\n */\nexport type PiiEntityDomain = string;\n\n/** Known values of {@link PiiEntityCategory} that the service accepts. */\nexport enum KnownPiiEntityCategory {\n  /** ABARoutingNumber */\n  ABARoutingNumber = \"ABARoutingNumber\",\n  /** ARNationalIdentityNumber */\n  ARNationalIdentityNumber = \"ARNationalIdentityNumber\",\n  /** AUBankAccountNumber */\n  AUBankAccountNumber = \"AUBankAccountNumber\",\n  /** AUDriversLicenseNumber */\n  AUDriversLicenseNumber = \"AUDriversLicenseNumber\",\n  /** AUMedicalAccountNumber */\n  AUMedicalAccountNumber = \"AUMedicalAccountNumber\",\n  /** AUPassportNumber */\n  AUPassportNumber = \"AUPassportNumber\",\n  /** AUTaxFileNumber */\n  AUTaxFileNumber = \"AUTaxFileNumber\",\n  /** AUBusinessNumber */\n  AUBusinessNumber = \"AUBusinessNumber\",\n  /** AUCompanyNumber */\n  AUCompanyNumber = \"AUCompanyNumber\",\n  /** ATIdentityCard */\n  ATIdentityCard = \"ATIdentityCard\",\n  /** ATTaxIdentificationNumber */\n  ATTaxIdentificationNumber = \"ATTaxIdentificationNumber\",\n  /** ATValueAddedTaxNumber */\n  ATValueAddedTaxNumber = \"ATValueAddedTaxNumber\",\n  /** AzureDocumentDBAuthKey */\n  AzureDocumentDBAuthKey = \"AzureDocumentDBAuthKey\",\n  /** AzureIaasDatabaseConnectionAndSQLString */\n  AzureIaasDatabaseConnectionAndSQLString = \"AzureIAASDatabaseConnectionAndSQLString\",\n  /** AzureIoTConnectionString */\n  AzureIoTConnectionString = \"AzureIoTConnectionString\",\n  /** AzurePublishSettingPassword */\n  AzurePublishSettingPassword = \"AzurePublishSettingPassword\",\n  /** AzureRedisCacheString */\n  AzureRedisCacheString = \"AzureRedisCacheString\",\n  /** AzureSAS */\n  AzureSAS = \"AzureSAS\",\n  /** AzureServiceBusString */\n  AzureServiceBusString = \"AzureServiceBusString\",\n  /** AzureStorageAccountKey */\n  AzureStorageAccountKey = \"AzureStorageAccountKey\",\n  /** AzureStorageAccountGeneric */\n  AzureStorageAccountGeneric = \"AzureStorageAccountGeneric\",\n  /** BENationalNumber */\n  BENationalNumber = \"BENationalNumber\",\n  /** BENationalNumberV2 */\n  BENationalNumberV2 = \"BENationalNumberV2\",\n  /** BEValueAddedTaxNumber */\n  BEValueAddedTaxNumber = \"BEValueAddedTaxNumber\",\n  /** BrcpfNumber */\n  BrcpfNumber = \"BRCPFNumber\",\n  /** BRLegalEntityNumber */\n  BRLegalEntityNumber = \"BRLegalEntityNumber\",\n  /** BRNationalIdrg */\n  BRNationalIdrg = \"BRNationalIDRG\",\n  /** BGUniformCivilNumber */\n  BGUniformCivilNumber = \"BGUniformCivilNumber\",\n  /** CABankAccountNumber */\n  CABankAccountNumber = \"CABankAccountNumber\",\n  /** CADriversLicenseNumber */\n  CADriversLicenseNumber = \"CADriversLicenseNumber\",\n  /** CAHealthServiceNumber */\n  CAHealthServiceNumber = \"CAHealthServiceNumber\",\n  /** CAPassportNumber */\n  CAPassportNumber = \"CAPassportNumber\",\n  /** CAPersonalHealthIdentification */\n  CAPersonalHealthIdentification = \"CAPersonalHealthIdentification\",\n  /** CASocialInsuranceNumber */\n  CASocialInsuranceNumber = \"CASocialInsuranceNumber\",\n  /** CLIdentityCardNumber */\n  CLIdentityCardNumber = \"CLIdentityCardNumber\",\n  /** CNResidentIdentityCardNumber */\n  CNResidentIdentityCardNumber = \"CNResidentIdentityCardNumber\",\n  /** CreditCardNumber */\n  CreditCardNumber = \"CreditCardNumber\",\n  /** HRIdentityCardNumber */\n  HRIdentityCardNumber = \"HRIdentityCardNumber\",\n  /** HRNationalIDNumber */\n  HRNationalIDNumber = \"HRNationalIDNumber\",\n  /** HRPersonalIdentificationNumber */\n  HRPersonalIdentificationNumber = \"HRPersonalIdentificationNumber\",\n  /** HRPersonalIdentificationOIBNumberV2 */\n  HRPersonalIdentificationOIBNumberV2 = \"HRPersonalIdentificationOIBNumberV2\",\n  /** CYIdentityCard */\n  CYIdentityCard = \"CYIdentityCard\",\n  /** CYTaxIdentificationNumber */\n  CYTaxIdentificationNumber = \"CYTaxIdentificationNumber\",\n  /** CZPersonalIdentityNumber */\n  CZPersonalIdentityNumber = \"CZPersonalIdentityNumber\",\n  /** CZPersonalIdentityV2 */\n  CZPersonalIdentityV2 = \"CZPersonalIdentityV2\",\n  /** DKPersonalIdentificationNumber */\n  DKPersonalIdentificationNumber = \"DKPersonalIdentificationNumber\",\n  /** DKPersonalIdentificationV2 */\n  DKPersonalIdentificationV2 = \"DKPersonalIdentificationV2\",\n  /** DrugEnforcementAgencyNumber */\n  DrugEnforcementAgencyNumber = \"DrugEnforcementAgencyNumber\",\n  /** EEPersonalIdentificationCode */\n  EEPersonalIdentificationCode = \"EEPersonalIdentificationCode\",\n  /** EUDebitCardNumber */\n  EUDebitCardNumber = \"EUDebitCardNumber\",\n  /** EUDriversLicenseNumber */\n  EUDriversLicenseNumber = \"EUDriversLicenseNumber\",\n  /** EugpsCoordinates */\n  EugpsCoordinates = \"EUGPSCoordinates\",\n  /** EUNationalIdentificationNumber */\n  EUNationalIdentificationNumber = \"EUNationalIdentificationNumber\",\n  /** EUPassportNumber */\n  EUPassportNumber = \"EUPassportNumber\",\n  /** EUSocialSecurityNumber */\n  EUSocialSecurityNumber = \"EUSocialSecurityNumber\",\n  /** EUTaxIdentificationNumber */\n  EUTaxIdentificationNumber = \"EUTaxIdentificationNumber\",\n  /** FIEuropeanHealthNumber */\n  FIEuropeanHealthNumber = \"FIEuropeanHealthNumber\",\n  /** FINationalID */\n  FINationalID = \"FINationalID\",\n  /** FINationalIDV2 */\n  FINationalIDV2 = \"FINationalIDV2\",\n  /** FIPassportNumber */\n  FIPassportNumber = \"FIPassportNumber\",\n  /** FRDriversLicenseNumber */\n  FRDriversLicenseNumber = \"FRDriversLicenseNumber\",\n  /** FRHealthInsuranceNumber */\n  FRHealthInsuranceNumber = \"FRHealthInsuranceNumber\",\n  /** FRNationalID */\n  FRNationalID = \"FRNationalID\",\n  /** FRPassportNumber */\n  FRPassportNumber = \"FRPassportNumber\",\n  /** FRSocialSecurityNumber */\n  FRSocialSecurityNumber = \"FRSocialSecurityNumber\",\n  /** FRTaxIdentificationNumber */\n  FRTaxIdentificationNumber = \"FRTaxIdentificationNumber\",\n  /** FRValueAddedTaxNumber */\n  FRValueAddedTaxNumber = \"FRValueAddedTaxNumber\",\n  /** DEDriversLicenseNumber */\n  DEDriversLicenseNumber = \"DEDriversLicenseNumber\",\n  /** DEPassportNumber */\n  DEPassportNumber = \"DEPassportNumber\",\n  /** DEIdentityCardNumber */\n  DEIdentityCardNumber = \"DEIdentityCardNumber\",\n  /** DETaxIdentificationNumber */\n  DETaxIdentificationNumber = \"DETaxIdentificationNumber\",\n  /** DEValueAddedNumber */\n  DEValueAddedNumber = \"DEValueAddedNumber\",\n  /** GRNationalIDCard */\n  GRNationalIDCard = \"GRNationalIDCard\",\n  /** GRNationalIDV2 */\n  GRNationalIDV2 = \"GRNationalIDV2\",\n  /** GRTaxIdentificationNumber */\n  GRTaxIdentificationNumber = \"GRTaxIdentificationNumber\",\n  /** HKIdentityCardNumber */\n  HKIdentityCardNumber = \"HKIdentityCardNumber\",\n  /** HUValueAddedNumber */\n  HUValueAddedNumber = \"HUValueAddedNumber\",\n  /** HUPersonalIdentificationNumber */\n  HUPersonalIdentificationNumber = \"HUPersonalIdentificationNumber\",\n  /** HUTaxIdentificationNumber */\n  HUTaxIdentificationNumber = \"HUTaxIdentificationNumber\",\n  /** INPermanentAccount */\n  INPermanentAccount = \"INPermanentAccount\",\n  /** INUniqueIdentificationNumber */\n  INUniqueIdentificationNumber = \"INUniqueIdentificationNumber\",\n  /** IDIdentityCardNumber */\n  IDIdentityCardNumber = \"IDIdentityCardNumber\",\n  /** InternationalBankingAccountNumber */\n  InternationalBankingAccountNumber = \"InternationalBankingAccountNumber\",\n  /** IEPersonalPublicServiceNumber */\n  IEPersonalPublicServiceNumber = \"IEPersonalPublicServiceNumber\",\n  /** IEPersonalPublicServiceNumberV2 */\n  IEPersonalPublicServiceNumberV2 = \"IEPersonalPublicServiceNumberV2\",\n  /** ILBankAccountNumber */\n  ILBankAccountNumber = \"ILBankAccountNumber\",\n  /** ILNationalID */\n  ILNationalID = \"ILNationalID\",\n  /** ITDriversLicenseNumber */\n  ITDriversLicenseNumber = \"ITDriversLicenseNumber\",\n  /** ITFiscalCode */\n  ITFiscalCode = \"ITFiscalCode\",\n  /** ITValueAddedTaxNumber */\n  ITValueAddedTaxNumber = \"ITValueAddedTaxNumber\",\n  /** JPBankAccountNumber */\n  JPBankAccountNumber = \"JPBankAccountNumber\",\n  /** JPDriversLicenseNumber */\n  JPDriversLicenseNumber = \"JPDriversLicenseNumber\",\n  /** JPPassportNumber */\n  JPPassportNumber = \"JPPassportNumber\",\n  /** JPResidentRegistrationNumber */\n  JPResidentRegistrationNumber = \"JPResidentRegistrationNumber\",\n  /** JPSocialInsuranceNumber */\n  JPSocialInsuranceNumber = \"JPSocialInsuranceNumber\",\n  /** JPMyNumberCorporate */\n  JPMyNumberCorporate = \"JPMyNumberCorporate\",\n  /** JPMyNumberPersonal */\n  JPMyNumberPersonal = \"JPMyNumberPersonal\",\n  /** JPResidenceCardNumber */\n  JPResidenceCardNumber = \"JPResidenceCardNumber\",\n  /** LVPersonalCode */\n  LVPersonalCode = \"LVPersonalCode\",\n  /** LTPersonalCode */\n  LTPersonalCode = \"LTPersonalCode\",\n  /** LUNationalIdentificationNumberNatural */\n  LUNationalIdentificationNumberNatural = \"LUNationalIdentificationNumberNatural\",\n  /** LUNationalIdentificationNumberNonNatural */\n  LUNationalIdentificationNumberNonNatural = \"LUNationalIdentificationNumberNonNatural\",\n  /** MYIdentityCardNumber */\n  MYIdentityCardNumber = \"MYIdentityCardNumber\",\n  /** MTIdentityCardNumber */\n  MTIdentityCardNumber = \"MTIdentityCardNumber\",\n  /** MTTaxIDNumber */\n  MTTaxIDNumber = \"MTTaxIDNumber\",\n  /** NLCitizensServiceNumber */\n  NLCitizensServiceNumber = \"NLCitizensServiceNumber\",\n  /** NLCitizensServiceNumberV2 */\n  NLCitizensServiceNumberV2 = \"NLCitizensServiceNumberV2\",\n  /** NLTaxIdentificationNumber */\n  NLTaxIdentificationNumber = \"NLTaxIdentificationNumber\",\n  /** NLValueAddedTaxNumber */\n  NLValueAddedTaxNumber = \"NLValueAddedTaxNumber\",\n  /** NZBankAccountNumber */\n  NZBankAccountNumber = \"NZBankAccountNumber\",\n  /** NZDriversLicenseNumber */\n  NZDriversLicenseNumber = \"NZDriversLicenseNumber\",\n  /** NZInlandRevenueNumber */\n  NZInlandRevenueNumber = \"NZInlandRevenueNumber\",\n  /** NZMinistryOfHealthNumber */\n  NZMinistryOfHealthNumber = \"NZMinistryOfHealthNumber\",\n  /** NZSocialWelfareNumber */\n  NZSocialWelfareNumber = \"NZSocialWelfareNumber\",\n  /** NOIdentityNumber */\n  NOIdentityNumber = \"NOIdentityNumber\",\n  /** PHUnifiedMultiPurposeIDNumber */\n  PHUnifiedMultiPurposeIDNumber = \"PHUnifiedMultiPurposeIDNumber\",\n  /** PLIdentityCard */\n  PLIdentityCard = \"PLIdentityCard\",\n  /** PLNationalID */\n  PLNationalID = \"PLNationalID\",\n  /** PLNationalIDV2 */\n  PLNationalIDV2 = \"PLNationalIDV2\",\n  /** PLPassportNumber */\n  PLPassportNumber = \"PLPassportNumber\",\n  /** PLTaxIdentificationNumber */\n  PLTaxIdentificationNumber = \"PLTaxIdentificationNumber\",\n  /** PlregonNumber */\n  PlregonNumber = \"PLREGONNumber\",\n  /** PTCitizenCardNumber */\n  PTCitizenCardNumber = \"PTCitizenCardNumber\",\n  /** PTCitizenCardNumberV2 */\n  PTCitizenCardNumberV2 = \"PTCitizenCardNumberV2\",\n  /** PTTaxIdentificationNumber */\n  PTTaxIdentificationNumber = \"PTTaxIdentificationNumber\",\n  /** ROPersonalNumericalCode */\n  ROPersonalNumericalCode = \"ROPersonalNumericalCode\",\n  /** RUPassportNumberDomestic */\n  RUPassportNumberDomestic = \"RUPassportNumberDomestic\",\n  /** RUPassportNumberInternational */\n  RUPassportNumberInternational = \"RUPassportNumberInternational\",\n  /** SANationalID */\n  SANationalID = \"SANationalID\",\n  /** SGNationalRegistrationIdentityCardNumber */\n  SGNationalRegistrationIdentityCardNumber = \"SGNationalRegistrationIdentityCardNumber\",\n  /** SKPersonalNumber */\n  SKPersonalNumber = \"SKPersonalNumber\",\n  /** SITaxIdentificationNumber */\n  SITaxIdentificationNumber = \"SITaxIdentificationNumber\",\n  /** SIUniqueMasterCitizenNumber */\n  SIUniqueMasterCitizenNumber = \"SIUniqueMasterCitizenNumber\",\n  /** ZAIdentificationNumber */\n  ZAIdentificationNumber = \"ZAIdentificationNumber\",\n  /** KRResidentRegistrationNumber */\n  KRResidentRegistrationNumber = \"KRResidentRegistrationNumber\",\n  /** Esdni */\n  Esdni = \"ESDNI\",\n  /** ESSocialSecurityNumber */\n  ESSocialSecurityNumber = \"ESSocialSecurityNumber\",\n  /** ESTaxIdentificationNumber */\n  ESTaxIdentificationNumber = \"ESTaxIdentificationNumber\",\n  /** SQLServerConnectionString */\n  SQLServerConnectionString = \"SQLServerConnectionString\",\n  /** SENationalID */\n  SENationalID = \"SENationalID\",\n  /** SENationalIDV2 */\n  SENationalIDV2 = \"SENationalIDV2\",\n  /** SEPassportNumber */\n  SEPassportNumber = \"SEPassportNumber\",\n  /** SETaxIdentificationNumber */\n  SETaxIdentificationNumber = \"SETaxIdentificationNumber\",\n  /** SwiftCode */\n  SwiftCode = \"SWIFTCode\",\n  /** CHSocialSecurityNumber */\n  CHSocialSecurityNumber = \"CHSocialSecurityNumber\",\n  /** TWNationalID */\n  TWNationalID = \"TWNationalID\",\n  /** TWPassportNumber */\n  TWPassportNumber = \"TWPassportNumber\",\n  /** TWResidentCertificate */\n  TWResidentCertificate = \"TWResidentCertificate\",\n  /** THPopulationIdentificationCode */\n  THPopulationIdentificationCode = \"THPopulationIdentificationCode\",\n  /** TRNationalIdentificationNumber */\n  TRNationalIdentificationNumber = \"TRNationalIdentificationNumber\",\n  /** UKDriversLicenseNumber */\n  UKDriversLicenseNumber = \"UKDriversLicenseNumber\",\n  /** UKElectoralRollNumber */\n  UKElectoralRollNumber = \"UKElectoralRollNumber\",\n  /** UKNationalHealthNumber */\n  UKNationalHealthNumber = \"UKNationalHealthNumber\",\n  /** UKNationalInsuranceNumber */\n  UKNationalInsuranceNumber = \"UKNationalInsuranceNumber\",\n  /** UKUniqueTaxpayerNumber */\n  UKUniqueTaxpayerNumber = \"UKUniqueTaxpayerNumber\",\n  /** UsukPassportNumber */\n  UsukPassportNumber = \"USUKPassportNumber\",\n  /** USBankAccountNumber */\n  USBankAccountNumber = \"USBankAccountNumber\",\n  /** USDriversLicenseNumber */\n  USDriversLicenseNumber = \"USDriversLicenseNumber\",\n  /** USIndividualTaxpayerIdentification */\n  USIndividualTaxpayerIdentification = \"USIndividualTaxpayerIdentification\",\n  /** USSocialSecurityNumber */\n  USSocialSecurityNumber = \"USSocialSecurityNumber\",\n  /** UAPassportNumberDomestic */\n  UAPassportNumberDomestic = \"UAPassportNumberDomestic\",\n  /** UAPassportNumberInternational */\n  UAPassportNumberInternational = \"UAPassportNumberInternational\",\n  /** Organization */\n  Organization = \"Organization\",\n  /** Email */\n  Email = \"Email\",\n  /** URL */\n  URL = \"URL\",\n  /** Age */\n  Age = \"Age\",\n  /** PhoneNumber */\n  PhoneNumber = \"PhoneNumber\",\n  /** IPAddress */\n  IPAddress = \"IPAddress\",\n  /** Date */\n  Date = \"Date\",\n  /** Person */\n  Person = \"Person\",\n  /** Address */\n  Address = \"Address\",\n  /** All */\n  All = \"All\",\n  /** Default */\n  Default = \"Default\"\n}\n\n/**\n * Defines values for PiiEntityCategory. \\\n * {@link KnownPiiEntityCategory} can be used interchangeably with PiiEntityCategory,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **ABARoutingNumber** \\\n * **ARNationalIdentityNumber** \\\n * **AUBankAccountNumber** \\\n * **AUDriversLicenseNumber** \\\n * **AUMedicalAccountNumber** \\\n * **AUPassportNumber** \\\n * **AUTaxFileNumber** \\\n * **AUBusinessNumber** \\\n * **AUCompanyNumber** \\\n * **ATIdentityCard** \\\n * **ATTaxIdentificationNumber** \\\n * **ATValueAddedTaxNumber** \\\n * **AzureDocumentDBAuthKey** \\\n * **AzureIAASDatabaseConnectionAndSQLString** \\\n * **AzureIoTConnectionString** \\\n * **AzurePublishSettingPassword** \\\n * **AzureRedisCacheString** \\\n * **AzureSAS** \\\n * **AzureServiceBusString** \\\n * **AzureStorageAccountKey** \\\n * **AzureStorageAccountGeneric** \\\n * **BENationalNumber** \\\n * **BENationalNumberV2** \\\n * **BEValueAddedTaxNumber** \\\n * **BRCPFNumber** \\\n * **BRLegalEntityNumber** \\\n * **BRNationalIDRG** \\\n * **BGUniformCivilNumber** \\\n * **CABankAccountNumber** \\\n * **CADriversLicenseNumber** \\\n * **CAHealthServiceNumber** \\\n * **CAPassportNumber** \\\n * **CAPersonalHealthIdentification** \\\n * **CASocialInsuranceNumber** \\\n * **CLIdentityCardNumber** \\\n * **CNResidentIdentityCardNumber** \\\n * **CreditCardNumber** \\\n * **HRIdentityCardNumber** \\\n * **HRNationalIDNumber** \\\n * **HRPersonalIdentificationNumber** \\\n * **HRPersonalIdentificationOIBNumberV2** \\\n * **CYIdentityCard** \\\n * **CYTaxIdentificationNumber** \\\n * **CZPersonalIdentityNumber** \\\n * **CZPersonalIdentityV2** \\\n * **DKPersonalIdentificationNumber** \\\n * **DKPersonalIdentificationV2** \\\n * **DrugEnforcementAgencyNumber** \\\n * **EEPersonalIdentificationCode** \\\n * **EUDebitCardNumber** \\\n * **EUDriversLicenseNumber** \\\n * **EUGPSCoordinates** \\\n * **EUNationalIdentificationNumber** \\\n * **EUPassportNumber** \\\n * **EUSocialSecurityNumber** \\\n * **EUTaxIdentificationNumber** \\\n * **FIEuropeanHealthNumber** \\\n * **FINationalID** \\\n * **FINationalIDV2** \\\n * **FIPassportNumber** \\\n * **FRDriversLicenseNumber** \\\n * **FRHealthInsuranceNumber** \\\n * **FRNationalID** \\\n * **FRPassportNumber** \\\n * **FRSocialSecurityNumber** \\\n * **FRTaxIdentificationNumber** \\\n * **FRValueAddedTaxNumber** \\\n * **DEDriversLicenseNumber** \\\n * **DEPassportNumber** \\\n * **DEIdentityCardNumber** \\\n * **DETaxIdentificationNumber** \\\n * **DEValueAddedNumber** \\\n * **GRNationalIDCard** \\\n * **GRNationalIDV2** \\\n * **GRTaxIdentificationNumber** \\\n * **HKIdentityCardNumber** \\\n * **HUValueAddedNumber** \\\n * **HUPersonalIdentificationNumber** \\\n * **HUTaxIdentificationNumber** \\\n * **INPermanentAccount** \\\n * **INUniqueIdentificationNumber** \\\n * **IDIdentityCardNumber** \\\n * **InternationalBankingAccountNumber** \\\n * **IEPersonalPublicServiceNumber** \\\n * **IEPersonalPublicServiceNumberV2** \\\n * **ILBankAccountNumber** \\\n * **ILNationalID** \\\n * **ITDriversLicenseNumber** \\\n * **ITFiscalCode** \\\n * **ITValueAddedTaxNumber** \\\n * **JPBankAccountNumber** \\\n * **JPDriversLicenseNumber** \\\n * **JPPassportNumber** \\\n * **JPResidentRegistrationNumber** \\\n * **JPSocialInsuranceNumber** \\\n * **JPMyNumberCorporate** \\\n * **JPMyNumberPersonal** \\\n * **JPResidenceCardNumber** \\\n * **LVPersonalCode** \\\n * **LTPersonalCode** \\\n * **LUNationalIdentificationNumberNatural** \\\n * **LUNationalIdentificationNumberNonNatural** \\\n * **MYIdentityCardNumber** \\\n * **MTIdentityCardNumber** \\\n * **MTTaxIDNumber** \\\n * **NLCitizensServiceNumber** \\\n * **NLCitizensServiceNumberV2** \\\n * **NLTaxIdentificationNumber** \\\n * **NLValueAddedTaxNumber** \\\n * **NZBankAccountNumber** \\\n * **NZDriversLicenseNumber** \\\n * **NZInlandRevenueNumber** \\\n * **NZMinistryOfHealthNumber** \\\n * **NZSocialWelfareNumber** \\\n * **NOIdentityNumber** \\\n * **PHUnifiedMultiPurposeIDNumber** \\\n * **PLIdentityCard** \\\n * **PLNationalID** \\\n * **PLNationalIDV2** \\\n * **PLPassportNumber** \\\n * **PLTaxIdentificationNumber** \\\n * **PLREGONNumber** \\\n * **PTCitizenCardNumber** \\\n * **PTCitizenCardNumberV2** \\\n * **PTTaxIdentificationNumber** \\\n * **ROPersonalNumericalCode** \\\n * **RUPassportNumberDomestic** \\\n * **RUPassportNumberInternational** \\\n * **SANationalID** \\\n * **SGNationalRegistrationIdentityCardNumber** \\\n * **SKPersonalNumber** \\\n * **SITaxIdentificationNumber** \\\n * **SIUniqueMasterCitizenNumber** \\\n * **ZAIdentificationNumber** \\\n * **KRResidentRegistrationNumber** \\\n * **ESDNI** \\\n * **ESSocialSecurityNumber** \\\n * **ESTaxIdentificationNumber** \\\n * **SQLServerConnectionString** \\\n * **SENationalID** \\\n * **SENationalIDV2** \\\n * **SEPassportNumber** \\\n * **SETaxIdentificationNumber** \\\n * **SWIFTCode** \\\n * **CHSocialSecurityNumber** \\\n * **TWNationalID** \\\n * **TWPassportNumber** \\\n * **TWResidentCertificate** \\\n * **THPopulationIdentificationCode** \\\n * **TRNationalIdentificationNumber** \\\n * **UKDriversLicenseNumber** \\\n * **UKElectoralRollNumber** \\\n * **UKNationalHealthNumber** \\\n * **UKNationalInsuranceNumber** \\\n * **UKUniqueTaxpayerNumber** \\\n * **USUKPassportNumber** \\\n * **USBankAccountNumber** \\\n * **USDriversLicenseNumber** \\\n * **USIndividualTaxpayerIdentification** \\\n * **USSocialSecurityNumber** \\\n * **UAPassportNumberDomestic** \\\n * **UAPassportNumberInternational** \\\n * **Organization** \\\n * **Email** \\\n * **URL** \\\n * **Age** \\\n * **PhoneNumber** \\\n * **IPAddress** \\\n * **Date** \\\n * **Person** \\\n * **Address** \\\n * **All** \\\n * **Default**\n */\nexport type PiiEntityCategory = string;\n\n/** Known values of {@link WarningCode} that the service accepts. */\nexport enum KnownWarningCode {\n  /** LongWordsInDocument */\n  LongWordsInDocument = \"LongWordsInDocument\",\n  /** DocumentTruncated */\n  DocumentTruncated = \"DocumentTruncated\"\n}\n\n/**\n * Defines values for WarningCode. \\\n * {@link KnownWarningCode} can be used interchangeably with WarningCode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **LongWordsInDocument** \\\n * **DocumentTruncated**\n */\nexport type WarningCode = string;\n\n/** Known values of {@link HealthcareEntityCategory} that the service accepts. */\nexport enum KnownHealthcareEntityCategory {\n  /** BodyStructure */\n  BodyStructure = \"BodyStructure\",\n  /** Age */\n  Age = \"Age\",\n  /** Gender */\n  Gender = \"Gender\",\n  /** Ethnicity */\n  Ethnicity = \"Ethnicity\",\n  /** ExaminationName */\n  ExaminationName = \"ExaminationName\",\n  /** Date */\n  Date = \"Date\",\n  /** Direction */\n  Direction = \"Direction\",\n  /** Frequency */\n  Frequency = \"Frequency\",\n  /** MeasurementValue */\n  MeasurementValue = \"MeasurementValue\",\n  /** MeasurementUnit */\n  MeasurementUnit = \"MeasurementUnit\",\n  /** RelationalOperator */\n  RelationalOperator = \"RelationalOperator\",\n  /** Time */\n  Time = \"Time\",\n  /** Course */\n  Course = \"Course\",\n  /** GeneOrProtein */\n  GeneOrProtein = \"GeneOrProtein\",\n  /** Variant */\n  Variant = \"Variant\",\n  /** Expression */\n  Expression = \"Expression\",\n  /** MutationType */\n  MutationType = \"MutationType\",\n  /** AdministrativeEvent */\n  AdministrativeEvent = \"AdministrativeEvent\",\n  /** CareEnvironment */\n  CareEnvironment = \"CareEnvironment\",\n  /** HealthcareProfession */\n  HealthcareProfession = \"HealthcareProfession\",\n  /** Diagnosis */\n  Diagnosis = \"Diagnosis\",\n  /** SymptomOrSign */\n  SymptomOrSign = \"SymptomOrSign\",\n  /** ConditionQualifier */\n  ConditionQualifier = \"ConditionQualifier\",\n  /** ConditionScale */\n  ConditionScale = \"ConditionScale\",\n  /** MedicationClass */\n  MedicationClass = \"MedicationClass\",\n  /** MedicationName */\n  MedicationName = \"MedicationName\",\n  /** Dosage */\n  Dosage = \"Dosage\",\n  /** MedicationForm */\n  MedicationForm = \"MedicationForm\",\n  /** MedicationRoute */\n  MedicationRoute = \"MedicationRoute\",\n  /** FamilyRelation */\n  FamilyRelation = \"FamilyRelation\",\n  /** TreatmentName */\n  TreatmentName = \"TreatmentName\",\n  /** Allergen */\n  Allergen = \"Allergen\",\n  /** Employment */\n  Employment = \"Employment\",\n  /** LivingStatus */\n  LivingStatus = \"LivingStatus\",\n  /** SubstanceUse */\n  SubstanceUse = \"SubstanceUse\",\n  /** SubstanceUseAmount */\n  SubstanceUseAmount = \"SubstanceUseAmount\"\n}\n\n/**\n * Defines values for HealthcareEntityCategory. \\\n * {@link KnownHealthcareEntityCategory} can be used interchangeably with HealthcareEntityCategory,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **BodyStructure** \\\n * **Age** \\\n * **Gender** \\\n * **Ethnicity** \\\n * **ExaminationName** \\\n * **Date** \\\n * **Direction** \\\n * **Frequency** \\\n * **MeasurementValue** \\\n * **MeasurementUnit** \\\n * **RelationalOperator** \\\n * **Time** \\\n * **Course** \\\n * **GeneOrProtein** \\\n * **Variant** \\\n * **Expression** \\\n * **MutationType** \\\n * **AdministrativeEvent** \\\n * **CareEnvironment** \\\n * **HealthcareProfession** \\\n * **Diagnosis** \\\n * **SymptomOrSign** \\\n * **ConditionQualifier** \\\n * **ConditionScale** \\\n * **MedicationClass** \\\n * **MedicationName** \\\n * **Dosage** \\\n * **MedicationForm** \\\n * **MedicationRoute** \\\n * **FamilyRelation** \\\n * **TreatmentName** \\\n * **Allergen** \\\n * **Employment** \\\n * **LivingStatus** \\\n * **SubstanceUse** \\\n * **SubstanceUseAmount**\n */\nexport type HealthcareEntityCategory = string;\n\n/** Known values of {@link RelationType} that the service accepts. */\nexport enum KnownRelationType {\n  /** Abbreviation */\n  Abbreviation = \"Abbreviation\",\n  /** BodySiteOfCondition */\n  BodySiteOfCondition = \"BodySiteOfCondition\",\n  /** BodySiteOfTreatment */\n  BodySiteOfTreatment = \"BodySiteOfTreatment\",\n  /** CourseOfCondition */\n  CourseOfCondition = \"CourseOfCondition\",\n  /** CourseOfExamination */\n  CourseOfExamination = \"CourseOfExamination\",\n  /** CourseOfMedication */\n  CourseOfMedication = \"CourseOfMedication\",\n  /** CourseOfTreatment */\n  CourseOfTreatment = \"CourseOfTreatment\",\n  /** DirectionOfBodyStructure */\n  DirectionOfBodyStructure = \"DirectionOfBodyStructure\",\n  /** DirectionOfCondition */\n  DirectionOfCondition = \"DirectionOfCondition\",\n  /** DirectionOfExamination */\n  DirectionOfExamination = \"DirectionOfExamination\",\n  /** DirectionOfTreatment */\n  DirectionOfTreatment = \"DirectionOfTreatment\",\n  /** DosageOfMedication */\n  DosageOfMedication = \"DosageOfMedication\",\n  /** ExaminationFindsCondition */\n  ExaminationFindsCondition = \"ExaminationFindsCondition\",\n  /** ExpressionOfGene */\n  ExpressionOfGene = \"ExpressionOfGene\",\n  /** ExpressionOfVariant */\n  ExpressionOfVariant = \"ExpressionOfVariant\",\n  /** FormOfMedication */\n  FormOfMedication = \"FormOfMedication\",\n  /** FrequencyOfCondition */\n  FrequencyOfCondition = \"FrequencyOfCondition\",\n  /** FrequencyOfMedication */\n  FrequencyOfMedication = \"FrequencyOfMedication\",\n  /** FrequencyOfTreatment */\n  FrequencyOfTreatment = \"FrequencyOfTreatment\",\n  /** MutationTypeOfGene */\n  MutationTypeOfGene = \"MutationTypeOfGene\",\n  /** MutationTypeOfVariant */\n  MutationTypeOfVariant = \"MutationTypeOfVariant\",\n  /** QualifierOfCondition */\n  QualifierOfCondition = \"QualifierOfCondition\",\n  /** RelationOfExamination */\n  RelationOfExamination = \"RelationOfExamination\",\n  /** RouteOfMedication */\n  RouteOfMedication = \"RouteOfMedication\",\n  /** ScaleOfCondition */\n  ScaleOfCondition = \"ScaleOfCondition\",\n  /** TimeOfCondition */\n  TimeOfCondition = \"TimeOfCondition\",\n  /** TimeOfEvent */\n  TimeOfEvent = \"TimeOfEvent\",\n  /** TimeOfExamination */\n  TimeOfExamination = \"TimeOfExamination\",\n  /** TimeOfMedication */\n  TimeOfMedication = \"TimeOfMedication\",\n  /** TimeOfTreatment */\n  TimeOfTreatment = \"TimeOfTreatment\",\n  /** UnitOfCondition */\n  UnitOfCondition = \"UnitOfCondition\",\n  /** UnitOfExamination */\n  UnitOfExamination = \"UnitOfExamination\",\n  /** ValueOfCondition */\n  ValueOfCondition = \"ValueOfCondition\",\n  /** ValueOfExamination */\n  ValueOfExamination = \"ValueOfExamination\",\n  /** VariantOfGene */\n  VariantOfGene = \"VariantOfGene\"\n}\n\n/**\n * Defines values for RelationType. \\\n * {@link KnownRelationType} can be used interchangeably with RelationType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Abbreviation** \\\n * **BodySiteOfCondition** \\\n * **BodySiteOfTreatment** \\\n * **CourseOfCondition** \\\n * **CourseOfExamination** \\\n * **CourseOfMedication** \\\n * **CourseOfTreatment** \\\n * **DirectionOfBodyStructure** \\\n * **DirectionOfCondition** \\\n * **DirectionOfExamination** \\\n * **DirectionOfTreatment** \\\n * **DosageOfMedication** \\\n * **ExaminationFindsCondition** \\\n * **ExpressionOfGene** \\\n * **ExpressionOfVariant** \\\n * **FormOfMedication** \\\n * **FrequencyOfCondition** \\\n * **FrequencyOfMedication** \\\n * **FrequencyOfTreatment** \\\n * **MutationTypeOfGene** \\\n * **MutationTypeOfVariant** \\\n * **QualifierOfCondition** \\\n * **RelationOfExamination** \\\n * **RouteOfMedication** \\\n * **ScaleOfCondition** \\\n * **TimeOfCondition** \\\n * **TimeOfEvent** \\\n * **TimeOfExamination** \\\n * **TimeOfMedication** \\\n * **TimeOfTreatment** \\\n * **UnitOfCondition** \\\n * **UnitOfExamination** \\\n * **ValueOfCondition** \\\n * **ValueOfExamination** \\\n * **VariantOfGene**\n */\nexport type RelationType = string;\n\n/** Known values of {@link ExtractiveSummarizationOrderingCriteria} that the service accepts. */\nexport enum KnownExtractiveSummarizationOrderingCriteria {\n  /** Indicates that results should be sorted in order of appearance in the text. */\n  Offset = \"Offset\",\n  /** Indicates that results should be sorted in order of importance (i.e. rank score) according to the model. */\n  Rank = \"Rank\"\n}\n\n/**\n * Defines values for ExtractiveSummarizationOrderingCriteria. \\\n * {@link KnownExtractiveSummarizationOrderingCriteria} can be used interchangeably with ExtractiveSummarizationOrderingCriteria,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Offset**: Indicates that results should be sorted in order of appearance in the text. \\\n * **Rank**: Indicates that results should be sorted in order of importance (i.e. rank score) according to the model.\n */\nexport type ExtractiveSummarizationOrderingCriteria = string;\n/** Defines values for EntityConditionality. */\nexport type EntityConditionality = \"hypothetical\" | \"conditional\";\n/** Defines values for EntityCertainty. */\nexport type EntityCertainty =\n  | \"positive\"\n  | \"positivePossible\"\n  | \"neutralPossible\"\n  | \"negativePossible\"\n  | \"negative\";\n/** Defines values for EntityAssociation. */\nexport type EntityAssociation = \"subject\" | \"other\";\n/** Defines values for DocumentSentimentLabel. */\nexport type DocumentSentimentLabel =\n  | \"positive\"\n  | \"neutral\"\n  | \"negative\"\n  | \"mixed\";\n/** Defines values for SentenceSentimentLabel. */\nexport type SentenceSentimentLabel = \"positive\" | \"neutral\" | \"negative\";\n/** Defines values for TokenSentimentLabel. */\nexport type TokenSentimentLabel = \"positive\" | \"mixed\" | \"negative\";\n/** Defines values for TargetRelationType. */\nexport type TargetRelationType = \"assessment\" | \"target\";\n\n/** Optional parameters. */\nexport interface AnalyzeOptionalParams extends coreClient.OperationOptions {\n  /** (Optional) if set to true, response will contain request and document level statistics. */\n  includeStatistics?: boolean;\n}\n\n/** Contains response data for the analyze operation. */\nexport type AnalyzeResponse = AnalyzeTextTaskResultUnion;\n\n/** Optional parameters. */\nexport interface AnalyzeBatchOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the analyzeBatch operation. */\nexport type AnalyzeBatchResponse = GeneratedClientAnalyzeBatchHeaders;\n\n/** Optional parameters. */\nexport interface AnalyzeTextJobStatusOptionalParams\n  extends coreClient.OperationOptions {\n  /** (Optional) if set to true, response will contain request and document level statistics. */\n  includeStatistics?: boolean;\n  /** The maximum number of resources to return from the collection. */\n  top?: number;\n  /** An offset into the collection of the first resource to be returned. */\n  skip?: number;\n}\n\n/** Contains response data for the jobStatus operation. */\nexport type AnalyzeTextJobStatusResponse = AnalyzeTextJobState;\n\n/** Optional parameters. */\nexport interface AnalyzeTextCancelJobOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the cancelJob operation. */\nexport type AnalyzeTextCancelJobResponse = AnalyzeTextCancelJobHeaders;\n\n/** Optional parameters. */\nexport interface GeneratedClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** Api Version */\n  apiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AbstractiveSummary,\n  AssessmentSentiment,\n  ClassificationCategory,\n  CustomEntityRecognitionAction,\n  CustomMultiLabelClassificationAction,\n  CustomSingleLabelClassificationAction,\n  DetectedLanguage,\n  DocumentSentimentLabel,\n  DocumentWarning,\n  Entity,\n  EntityDataSource,\n  EntityLinkingAction,\n  EntityRecognitionAction,\n  ExtractiveSummarizationAction,\n  HealthcareAction,\n  HealthcareAssertion,\n  HealthcareEntityCategory,\n  KeyPhraseExtractionAction,\n  KnownErrorCode,\n  KnownInnerErrorCode,\n  LanguageDetectionAction,\n  LinkedEntity,\n  PiiEntityRecognitionAction,\n  RelationType,\n  SentenceSentimentLabel,\n  SentimentAnalysisAction,\n  SentimentConfidenceScores,\n  StringIndexType,\n  SummarySentence,\n  TargetConfidenceScores,\n  TextDocumentBatchStatistics,\n  TextDocumentStatistics,\n  TokenSentimentLabel,\n} from \"./generated\";\nimport { CommonClientOptions, OperationOptions } from \"@azure/core-client\";\nimport { OperationState, SimplePollerLike } from \"@azure/core-lro\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\n/**\n * Configuration options for {@link TextAnalysisClient}.\n */\nexport interface TextAnalysisClientOptions extends CommonClientOptions {\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  defaultCountryHint?: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  defaultLanguage?: string;\n  /**\n   * The version of the Cognitive Language Service API to use.\n   */\n  serviceVersion?: string;\n}\n\n/**\n * Options common to all operations.\n */\nexport interface TextAnalysisOperationOptions extends OperationOptions {\n  /**\n   * If set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Options for the begin analyze actions operation.\n */\nexport interface BeginAnalyzeBatchOptions extends TextAnalysisOperationOptions {\n  /**\n   * Time delay between poll requests, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * The operation's display name.\n   */\n  displayName?: string;\n}\n\n/**\n * Options for the begin analyze actions operation.\n */\nexport interface RestoreAnalyzeBatchPollerOptions extends TextAnalysisOperationOptions {\n  /**\n   * Time delay between poll requests, in milliseconds.\n   */\n  updateIntervalInMs?: number;\n}\n\n/**\n * Type of actions supported by the {@link TextAnalysisClient.analyze} method.\n */\nexport const AnalyzeActionNames = {\n  EntityLinking: \"EntityLinking\",\n  EntityRecognition: \"EntityRecognition\",\n  KeyPhraseExtraction: \"KeyPhraseExtraction\",\n  PiiEntityRecognition: \"PiiEntityRecognition\",\n  LanguageDetection: \"LanguageDetection\",\n  SentimentAnalysis: \"SentimentAnalysis\",\n} as const;\n\n/**\n * Type of actions supported by the {@link TextAnalysisClient.beginAnalyzeBatch} method.\n */\nexport const AnalyzeBatchActionNames = {\n  SentimentAnalysis: \"SentimentAnalysis\",\n  EntityRecognition: \"EntityRecognition\",\n  PiiEntityRecognition: \"PiiEntityRecognition\",\n  KeyPhraseExtraction: \"KeyPhraseExtraction\",\n  EntityLinking: \"EntityLinking\",\n  Healthcare: \"Healthcare\",\n  ExtractiveSummarization: \"ExtractiveSummarization\",\n  AbstractiveSummarization: \"AbstractiveSummarization\",\n  CustomEntityRecognition: \"CustomEntityRecognition\",\n  CustomSingleLabelClassification: \"CustomSingleLabelClassification\",\n  CustomMultiLabelClassification: \"CustomMultiLabelClassification\",\n} as const;\n\n/**\n * Type of actions supported by the {@link TextAnalysisClient.analyze} method.\n */\nexport type AnalyzeActionName = keyof typeof AnalyzeActionNames;\n\n/**\n * The type of parameters for every action in ${@link AnalyzeActionNames}.\n */\nexport type AnalyzeActionParameters<ActionName extends AnalyzeActionName> = {\n  EntityLinking: EntityLinkingAction;\n  EntityRecognition: EntityRecognitionAction;\n  PiiEntityRecognition: PiiEntityRecognitionAction;\n  KeyPhraseExtraction: KeyPhraseExtractionAction;\n  SentimentAnalysis: SentimentAnalysisAction;\n  LanguageDetection: LanguageDetectionAction;\n}[ActionName];\n\n/**\n * The type of results of every action in ${@link AnalyzeActionNames}.\n */\nexport type AnalyzeResult<ActionName extends AnalyzeActionName> = {\n  EntityLinking: EntityLinkingResult[];\n  EntityRecognition: EntityRecognitionResult[];\n  PiiEntityRecognition: PiiEntityRecognitionResult[];\n  KeyPhraseExtraction: KeyPhraseExtractionResult[];\n  SentimentAnalysis: SentimentAnalysisResult[];\n  LanguageDetection: LanguageDetectionResult[];\n}[ActionName];\n\n/** Options for an Abstractive Summarization action. */\nexport interface AbstractiveSummarizationAction {\n  /** The approximate number of sentences to be part of the summary. */\n  sentenceCount?: number;\n  /**\n   * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.\n   *\n   * The default is the JavaScript's default which is \"Utf16CodeUnit\".\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/**\n * Enum of possible error codes of a {@link TextAnalysisError}.\n */\nexport const KnownTextAnalysisErrorCode = { ...KnownErrorCode, ...KnownInnerErrorCode };\n\n/**\n * Type describing an API error.\n */\nexport interface TextAnalysisError {\n  /**\n   * A code describing the kind of error produced. See {@link KnownTextAnalysisErrorCode}.\n   */\n  readonly code: string;\n  /**\n   * A message from the service explaining the error\n   */\n  readonly message: string;\n  /**\n   * The target of the particular error (for example, the name of an invalid parameter)\n   */\n  readonly target?: string;\n}\n\n/**\n * Base type for results of an action corresponding to a single input document.\n */\nexport interface TextAnalysisSuccessResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * Statistics about the input document and how it was processed by the service.\n   * This property will have a value when includeStatistics is set to true in\n   * the client call.\n   */\n  readonly statistics?: TextDocumentStatistics;\n\n  /**\n   * An array of warning data corresponding to this document.\n   *\n   * If no warnings were returned, this array will be empty.\n   */\n  readonly warnings: DocumentWarning[];\n\n  /**\n   * Discriminant to determine if this is an error result.\n   */\n  readonly error?: undefined;\n}\n\n/**\n * Base type for error results of an action corresponding to a single document.\n */\nexport interface TextAnalysisErrorResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * The Error for this document result.\n   */\n  readonly error: TextAnalysisError;\n}\n\n/**\n * The result of an entity recognition action on a single document.\n */\nexport type EntityRecognitionResult = EntityRecognitionSuccessResult | EntityRecognitionErrorResult;\n\n/**\n * The result of an entity recognition action on a single document, containing\n * a collection of {@link Entity} objects identified in that document.\n */\nexport interface EntityRecognitionSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: Entity[];\n}\n\n/**\n * An error result from an entity recognition action on a single document.\n */\nexport type EntityRecognitionErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of an entity recognition action on a single document.\n */\nexport type PiiEntityRecognitionResult =\n  | PiiEntityRecognitionSuccessResult\n  | PiiEntityRecognitionErrorResult;\n\n/**\n * The result of a pii entity recognition action on a single document,\n * containing the collection of {@link Entity} objects identified in that\n * document.\n */\nexport interface PiiEntityRecognitionSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: Entity[];\n  /**\n   * The text redacted.\n   */\n  readonly redactedText: string;\n}\n\n/**\n * An error result from a pii entity recognition action on a single document.\n */\nexport type PiiEntityRecognitionErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of an entity linking action on a single document.\n */\nexport type EntityLinkingResult = EntityLinkingSuccessResult | EntityLinkingErrorResult;\n\n/**\n * The result of a entity linking action on a single document, containing a\n * collection of the {@link LinkedEntity} objects identified in that document.\n */\nexport interface EntityLinkingSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: LinkedEntity[];\n}\n\n/**\n * An error result from an entity linking action on a single document.\n */\nexport type EntityLinkingErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of a language detection action on a single document.\n */\nexport type LanguageDetectionResult = LanguageDetectionSuccessResult | LanguageDetectionErrorResult;\n\n/**\n * The result of a language detection action on a single document,\n * containing a prediction of what language the document is written in.\n */\nexport interface LanguageDetectionSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The top detected language by confidence score.\n   */\n  readonly primaryLanguage: DetectedLanguage;\n}\n\n/**\n * An error result from a language detection action on a single document.\n */\nexport type LanguageDetectionErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of a sentiment analysis action on a single document.\n */\nexport type KeyPhraseExtractionResult =\n  | KeyPhraseExtractionSuccessResult\n  | KeyPhraseExtractionErrorResult;\n\n/**\n * The result of a key phrase extraction action on a single document,\n * containing a collection of the key phrases identified in that document.\n */\nexport interface KeyPhraseExtractionSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * A list of representative words or phrases. The number of key phrases\n   * returned is proportional to the number of words in the input document.\n   */\n  readonly keyPhrases: string[];\n}\n\n/**\n * An error result from a key phrase extraction action on a single document.\n */\nexport type KeyPhraseExtractionErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of a sentiment analysis action on a single document.\n */\nexport type SentimentAnalysisResult = SentimentAnalysisSuccessResult | SentimentAnalysisErrorResult;\n\n/**\n * The result of a sentiment analysis action on a single document,\n * containing the predicted sentiment for each sentence as well as for the full\n * document.\n */\nexport interface SentimentAnalysisSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * Predicted sentiment for document. For a list of possible values, see {@link DocumentSentimentLabel}\n   */\n  readonly sentiment: DocumentSentimentLabel;\n  /**\n   * Document level sentiment confidence scores between 0 and 1 for each\n   * sentiment class.\n   */\n  readonly confidenceScores: SentimentConfidenceScores;\n  /**\n   * The predicted sentiment for each sentence in the corresponding document.\n   */\n  readonly sentences: SentenceSentiment[];\n}\n\n/**\n * The predicted sentiment for a given span of text. For more information\n * regarding text sentiment, see {@link https://docs.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview}.\n */\nexport interface SentenceSentiment {\n  /**\n   * The sentence text.\n   */\n  readonly text: string;\n  /**\n   * The predicted Sentiment for the sentence. For a list of possible values,\n   * see {@link SentenceSentimentLabel}\n   */\n  readonly sentiment: SentenceSentimentLabel;\n  /**\n   * The sentiment confidence score between 0 and 1 for the sentence for all\n   * classes.\n   */\n  readonly confidenceScores: SentimentConfidenceScores;\n  /**\n   * The sentence text offset from the start of the document.\n   */\n  readonly offset: number;\n  /**\n   * The length of the sentence text.\n   */\n  readonly length: number;\n  /**\n   * The list of opinions mined from this sentence. For example in \"The food is\n   * good, but the service is bad\", the following two opinions will be returned:\n   * \"food is good\" and \"service is bad\".\n   *\n   * It is non-empty only returned if {@link includeOpinionMining} was set to\n   * `true`.\n   */\n  readonly opinions: Opinion[];\n}\n\n/**\n * TargetSentiment contains the predicted sentiment, confidence scores and other\n * information about a target of a product. A target of a product/service is a\n * key component of that product/service. For example in \"The food at Hotel Foo\n * is good\", \"food\" is a target of \"Hotel Foo\".\n */\nexport interface TargetSentiment {\n  /**\n   * The sentiment confidence score between 0 and 1 for the target for\n   * 'positive' and 'negative' labels.\n   */\n  readonly confidenceScores: TargetConfidenceScores;\n  /**\n   * The predicted Sentiment for the Target. For a list of possible values,\n   * see {@link TokenSentimentLabel}\n   */\n  readonly sentiment: TokenSentimentLabel;\n  /**\n   * The target text.\n   */\n  readonly text: string;\n  /**\n   * The Target text offset from the start of the sentence.\n   */\n  readonly offset: number;\n  /**\n   * The length of the Target text.\n   */\n  readonly length: number;\n}\n\n/**\n * A mined opinion object represents an opinion we've extracted from a sentence.\n * It consists of both a target that these assessments are about, and the actual\n * assessments themselves.\n */\nexport interface Opinion {\n  /**\n   * The target of a product/service that this assessment is about.\n   */\n  readonly target: TargetSentiment;\n  /**\n   * The actual assessments of the target.\n   */\n  readonly assessments: AssessmentSentiment[];\n}\n\n/**\n * A healthcare entity represented as a node in a directed graph where the edges are\n * a particular type of relationship between the source and target nodes.\n */\nexport interface HealthcareEntity extends Entity {\n  /**\n   * Normalized name for the entity. For example, the normalized text for \"histologically\" is \"histologic\".\n   */\n  readonly normalizedText?: string;\n  /**\n   * Whether the entity is negated.\n   */\n  readonly assertion?: HealthcareAssertion;\n  /**\n   * Entity references in known data sources.\n   */\n  readonly dataSources: EntityDataSource[];\n  /**\n   * Defines values for HealthcareEntityCategory.\n   * {@link KnownHealthcareEntityCategory} can be used interchangeably with HealthcareEntityCategory,\n   *  this enum contains the known values that the service supports.\n   * ### Known values supported by the service\n   * **BODY_STRUCTURE**\n   * **AGE**\n   * **GENDER**\n   * **EXAMINATION_NAME**\n   * **DATE**\n   * **DIRECTION**\n   * **FREQUENCY**\n   * **MEASUREMENT_VALUE**\n   * **MEASUREMENT_UNIT**\n   * **RELATIONAL_OPERATOR**\n   * **TIME**\n   * **GENE_OR_PROTEIN**\n   * **VARIANT**\n   * **ADMINISTRATIVE_EVENT**\n   * **CARE_ENVIRONMENT**\n   * **HEALTHCARE_PROFESSION**\n   * **DIAGNOSIS**\n   * **SYMPTOM_OR_SIGN**\n   * **CONDITION_QUALIFIER**\n   * **MEDICATION_CLASS**\n   * **MEDICATION_NAME**\n   * **DOSAGE**\n   * **MEDICATION_FORM**\n   * **MEDICATION_ROUTE**\n   * **FAMILY_RELATION**\n   * **TREATMENT_NAME**\n   */\n  readonly category: HealthcareEntityCategory;\n}\n\n/**\n * The type of different roles a healthcare entity can play in a relation.\n */\nexport type HealthcareEntityRelationRoleType = string;\n\n/**\n * A healthcare entity that plays a specific role in a relation.\n */\nexport interface HealthcareEntityRelationRole {\n  /**\n   * A healthcare entity\n   */\n  readonly entity: HealthcareEntity;\n  /**\n   * The role of the healthcare entity in a particular relation.\n   */\n  readonly name: HealthcareEntityRelationRoleType;\n}\n\n/**\n * A relationship between two or more healthcare entities.\n */\nexport interface HealthcareEntityRelation {\n  /**\n   * The type of the healthcare relation.\n   */\n  readonly relationType: RelationType;\n  /**\n   * The list of healthcare entities and their roles in the healthcare relation.\n   */\n  readonly roles: HealthcareEntityRelationRole[];\n  /**\n   * The confidence score between 0 and 1 of the extracted relation.\n   */\n  readonly confidenceScore?: number;\n}\n\n/**\n * The results of a successful healthcare analysis action for a single document.\n */\nexport interface HealthcareSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * Healthcare entities.\n   */\n  readonly entities: HealthcareEntity[];\n  /**\n   * Relations between healthcare entities.\n   */\n  readonly entityRelations: HealthcareEntityRelation[];\n}\n\n/**\n * An error result from the healthcare analysis action on a single document.\n */\nexport type HealthcareErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of the healthcare analysis action on a single document.\n */\nexport type HealthcareResult = HealthcareSuccessResult | HealthcareErrorResult;\n\n/**\n * The result of the extractive summarization action on a single document.\n */\nexport type ExtractiveSummarizationResult =\n  | ExtractiveSummarizationSuccessResult\n  | ExtractiveSummarizationErrorResult;\n\n/**\n * The result of the extractive summarization action on a single document,\n * containing a collection of the summary identified in that document.\n */\nexport interface ExtractiveSummarizationSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * A list of sentences composing a summary of the input document.\n   */\n  readonly sentences: SummarySentence[];\n}\n\n/**\n * An error result from the extractive summarization action on a single document.\n */\nexport type ExtractiveSummarizationErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of the abstractive summarization action on a single document.\n */\nexport type AbstractiveSummarizationResult =\n  | AbstractiveSummarizationSuccessResult\n  | AbstractiveSummarizationErrorResult;\n\n/**\n * The result of the abstractive summarization action on a single document,\n * containing a collection of the summaries identified for that document.\n */\nexport interface AbstractiveSummarizationSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * A list of summaries of the input document.\n   */\n  readonly summaries: AbstractiveSummary[];\n}\n\n/**\n * An error result from the abstractive summarization action on a single document.\n */\nexport type AbstractiveSummarizationErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of the custom entity recognition action on a single document.\n */\nexport type CustomEntityRecognitionResult =\n  | CustomEntityRecognitionSuccessResult\n  | CustomEntityRecognitionErrorResult;\n\n/**\n * The result of the custom entity recognition action on a single document,\n * containing a collection of the entities identified in that document.\n */\nexport interface CustomEntityRecognitionSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: Entity[];\n}\n\n/**\n * An error result from the custom entity recognition action on a single document.\n */\nexport type CustomEntityRecognitionErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of the single-label classification action on a single document.\n */\nexport type CustomSingleLabelClassificationResult =\n  | CustomSingleLabelClassificationSuccessResult\n  | CustomSingleLabelClassificationErrorResult;\n\n/**\n * The result of a successful single-label classification action on a single document,\n * containing the result of the classification.\n */\nexport interface CustomSingleLabelClassificationSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of classifications in the input document.\n   */\n  readonly classifications: ClassificationCategory[];\n}\n\n/**\n * An error result from the single-label classification action on a single document.\n */\nexport type CustomSingleLabelClassificationErrorResult = TextAnalysisErrorResult;\n\n/**\n * The result of the multi-label classification action on a multi document.\n */\nexport type CustomMultiLabelClassificationResult =\n  | CustomMultiLabelClassificationSuccessResult\n  | CustomMultiLabelClassificationErrorResult;\n\n/**\n * The result of a successful multi-label classification action on a multi document,\n * containing the result of the classification.\n */\nexport interface CustomMultiLabelClassificationSuccessResult extends TextAnalysisSuccessResult {\n  /**\n   * The collection of classifications in the input document.\n   */\n  readonly classifications: ClassificationCategory[];\n}\n\n/**\n * An error result from the multi-label classification action on a multi document.\n */\nexport type CustomMultiLabelClassificationErrorResult = TextAnalysisErrorResult;\n\n/**\n * Options common to all batch actions.\n */\nexport interface AnalyzeBatchActionCommon {\n  /**\n   * The name of the action.\n   */\n  actionName?: string;\n}\n\n/** Options for an entity linking batch action. */\nexport interface EntityLinkingBatchAction extends AnalyzeBatchActionCommon, EntityLinkingAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"EntityLinking\";\n}\n\n/** Options for an entity recognition batch action. */\nexport interface EntityRecognitionBatchAction\n  extends AnalyzeBatchActionCommon,\n    EntityRecognitionAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"EntityRecognition\";\n}\n\n/** Options for an key phrase extraction batch action. */\nexport interface KeyPhraseExtractionBatchAction\n  extends AnalyzeBatchActionCommon,\n    KeyPhraseExtractionAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"KeyPhraseExtraction\";\n}\n\n/** Options for a pii entity recognition batch action. */\nexport interface PiiEntityRecognitionBatchAction\n  extends AnalyzeBatchActionCommon,\n    PiiEntityRecognitionAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"PiiEntityRecognition\";\n}\n\n/** Options for a healthcare batch action. */\nexport interface HealthcareBatchAction extends AnalyzeBatchActionCommon, HealthcareAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"Healthcare\";\n}\n\n/** Options for a sentiment analysis batch action. */\nexport interface SentimentAnalysisBatchAction\n  extends AnalyzeBatchActionCommon,\n    SentimentAnalysisAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"SentimentAnalysis\";\n}\n\n/** Options for an extractive summarization batch action. */\nexport interface ExtractiveSummarizationBatchAction\n  extends AnalyzeBatchActionCommon,\n    ExtractiveSummarizationAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"ExtractiveSummarization\";\n}\n\n/** Options for an abstractive summarization batch action. */\nexport interface AbstractiveSummarizationBatchAction\n  extends AnalyzeBatchActionCommon,\n    AbstractiveSummarizationAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"AbstractiveSummarization\";\n}\n\n/** Options for a custom entity recognition batch action. */\nexport interface CustomEntityRecognitionBatchAction\n  extends AnalyzeBatchActionCommon,\n    CustomEntityRecognitionAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"CustomEntityRecognition\";\n}\n\n/** Options for a custom single-label classification batch action. */\nexport interface CustomSingleLabelClassificationBatchAction\n  extends AnalyzeBatchActionCommon,\n    CustomSingleLabelClassificationAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"CustomSingleLabelClassification\";\n}\n\n/** Options for a custom multi-label classification batch action. */\nexport interface CustomMultiLabelClassificationBatchAction\n  extends AnalyzeBatchActionCommon,\n    CustomMultiLabelClassificationAction {\n  /**\n   * The kind of the action.\n   */\n  kind: \"CustomMultiLabelClassification\";\n}\n\n/**\n * Batch of actions.\n */\nexport type AnalyzeBatchAction =\n  | EntityLinkingBatchAction\n  | EntityRecognitionBatchAction\n  | KeyPhraseExtractionBatchAction\n  | PiiEntityRecognitionBatchAction\n  | HealthcareBatchAction\n  | SentimentAnalysisBatchAction\n  | ExtractiveSummarizationBatchAction\n  | AbstractiveSummarizationBatchAction\n  | CustomEntityRecognitionBatchAction\n  | CustomSingleLabelClassificationBatchAction\n  | CustomMultiLabelClassificationBatchAction;\n\n/**\n * Type of actions supported by the {@link TextAnalysisClient.beginAnalyzeBatch} method.\n */\nexport type AnalyzeBatchActionName = keyof typeof AnalyzeBatchActionNames;\n\n/** The State of a batched action */\nexport interface BatchActionState<Kind extends AnalyzeBatchActionName> {\n  /**\n   * The kind of the action results.\n   */\n  readonly kind: Kind;\n  /**\n   * The name of the action.\n   */\n  readonly actionName?: string;\n  /**\n   * Action statistics.\n   */\n  readonly statistics?: TextDocumentBatchStatistics;\n}\n\n/**\n * Action metadata.\n */\nexport interface ActionMetadata {\n  /**\n   * The model version used to perform the action.\n   */\n  readonly modelVersion: string;\n}\n\n/**\n * Custom action metadata.\n */\nexport interface CustomActionMetadata {\n  /**\n   * The name of the project used to perform the action.\n   */\n  readonly projectName: string;\n  /**\n   * The name of the deployment used to perform the action.\n   */\n  readonly deploymentName: string;\n}\n\n/**\n * The state of a succeeded batched action.\n */\nexport interface BatchActionSuccessResult<T, Kind extends AnalyzeBatchActionName>\n  extends BatchActionState<Kind> {\n  /**\n   * The list of document results.\n   */\n  readonly results: T[];\n  /**\n   * When this action was completed by the service.\n   */\n  readonly completedOn: Date;\n  /**\n   * Discriminant to determine if that this is an error result.\n   */\n  readonly error?: undefined;\n}\n\n/**\n * The error of an analyze batch action.\n */\nexport interface BatchActionErrorResult<Kind extends AnalyzeBatchActionName>\n  extends BatchActionState<Kind> {\n  /**\n   * When this action was completed by the service.\n   */\n  readonly failedOn: Date;\n  /**\n   * The Error for this action result.\n   */\n  readonly error: TextAnalysisError;\n}\n\n/**\n * The result of a batched action.\n */\nexport type BatchActionResult<T, Kind extends AnalyzeBatchActionName> =\n  | BatchActionSuccessResult<T, Kind>\n  | BatchActionErrorResult<Kind>;\n\n/**\n * The result of an entity linking batch action.\n */\nexport type EntityLinkingBatchResult = ActionMetadata &\n  BatchActionResult<EntityLinkingResult, \"EntityLinking\">;\n\n/**\n * The result of an entity recognition batch action.\n */\nexport type EntityRecognitionBatchResult = ActionMetadata &\n  BatchActionResult<EntityRecognitionResult, \"EntityRecognition\">;\n\n/**\n * The result of a key phrase extraction batch action.\n */\nexport type KeyPhraseExtractionBatchResult = ActionMetadata &\n  BatchActionResult<KeyPhraseExtractionResult, \"KeyPhraseExtraction\">;\n\n/**\n * The result of a pii entity recognition batch action.\n */\nexport type PiiEntityRecognitionBatchResult = ActionMetadata &\n  BatchActionResult<PiiEntityRecognitionResult, \"PiiEntityRecognition\">;\n\n/**\n * The result of a sentiment analysis batch action.\n */\nexport type SentimentAnalysisBatchResult = ActionMetadata &\n  BatchActionResult<SentimentAnalysisResult, \"SentimentAnalysis\">;\n\n/**\n * The result of a healthcare batch action.\n */\nexport type HealthcareBatchResult = ActionMetadata &\n  BatchActionResult<HealthcareResult, \"Healthcare\">;\n\n/**\n * The result of an extractive summarization batch action.\n */\nexport type ExtractiveSummarizationBatchResult = ActionMetadata &\n  BatchActionResult<ExtractiveSummarizationResult, \"ExtractiveSummarization\">;\n\n/**\n * The result of an abstractive summarization batch action.\n */\nexport type AbstractiveSummarizationBatchResult = ActionMetadata &\n  BatchActionResult<AbstractiveSummarizationResult, \"AbstractiveSummarization\">;\n\n/**\n * The result of a custom entity recognition batch action.\n */\nexport type CustomEntityRecognitionBatchResult = CustomActionMetadata &\n  BatchActionResult<CustomEntityRecognitionResult, \"CustomEntityRecognition\">;\n\n/**\n * The result of a custom single-label classification batch action.\n */\nexport type CustomSingleLabelClassificationBatchResult = CustomActionMetadata &\n  BatchActionResult<CustomSingleLabelClassificationResult, \"CustomSingleLabelClassification\">;\n\n/**\n * The result of a custom multi-label classification batch action.\n */\nexport type CustomMultiLabelClassificationBatchResult = CustomActionMetadata &\n  BatchActionResult<CustomMultiLabelClassificationResult, \"CustomMultiLabelClassification\">;\n/**\n * Results of a batch of actions.\n */\nexport type AnalyzeBatchResult =\n  | EntityLinkingBatchResult\n  | EntityRecognitionBatchResult\n  | KeyPhraseExtractionBatchResult\n  | PiiEntityRecognitionBatchResult\n  | SentimentAnalysisBatchResult\n  | HealthcareBatchResult\n  | ExtractiveSummarizationBatchResult\n  | AbstractiveSummarizationBatchResult\n  | CustomEntityRecognitionBatchResult\n  | CustomSingleLabelClassificationBatchResult\n  | CustomMultiLabelClassificationBatchResult;\n\n/**\n * An error result from a sentiment analysis action on a single document.\n */\nexport type SentimentAnalysisErrorResult = TextAnalysisErrorResult;\n\n/**\n * Paged results of the {@link TextAnalysisClient.beginAnalyzeBatch} operation.\n */\nexport type PagedAnalyzeBatchResult = PagedAsyncIterableIterator<AnalyzeBatchResult>;\n\n/**\n * A poller that polls long-running operations started by {@link TextAnalysisClient.beginAnalyzeBatch}.\n */\nexport type AnalyzeBatchPoller = PollerLike<AnalyzeBatchOperationState, PagedAnalyzeBatchResult>;\n\n/**\n * The metadata for long-running operations started by {@link TextAnalysisClient.beginAnalyzeBatch}.\n */\nexport interface AnalyzeBatchOperationMetadata {\n  /**\n   * The date and time the operation was created.\n   */\n  readonly createdOn: Date;\n  /**\n   * The date and time when the operation results will expire on the server.\n   */\n  readonly expiresOn?: Date;\n  /**\n   * The operation id.\n   */\n  readonly id: string;\n  /**\n   * The time the operation status was last updated.\n   */\n  readonly modifiedOn: Date;\n  /**\n   * Number of successfully completed actions.\n   */\n  readonly actionSucceededCount: number;\n  /**\n   * Number of failed actions.\n   */\n  readonly actionFailedCount: number;\n  /**\n   * Number of actions still in progress.\n   */\n  readonly actionInProgressCount: number;\n  /**\n   * The operation's display name.\n   */\n  readonly displayName?: string;\n}\n\n/**\n * The state of the begin analyze polling operation.\n */\nexport interface AnalyzeBatchOperationState\n  extends OperationState<PagedAnalyzeBatchResult>,\n    AnalyzeBatchOperationMetadata {}\n\n/**\n * Abstract representation of a poller, intended to expose just the minimal API that the user needs to work with.\n */\nexport interface PollerLike<TState extends OperationState<TResult>, TResult>\n  extends SimplePollerLike<TState, TResult> {\n  /**\n   * sends a cancellation request.\n   */\n  sendCancellationRequest: () => Promise<void>;\n}\n"],"names":["createClientLogger","AnalyzeActionMapper","AnalyzeTextJobsInputMapper","__rest","RestError","serializer","createSerializer","jobStatusOperationSpec","Mappers.AnalyzeTextJobState","Mappers.ErrorResponse","Parameters.accept","Parameters.top","Parameters.skip","Parameters.includeStatistics","getPagedAsyncIterator","coreClient","Parameters.apiVersion","Parameters.endpoint","Parameters.jobId","Mappers.AnalyzeTextCancelJobHeaders","Mappers.AnalyzeTextTaskResult","Parameters.body","Parameters.contentType","Mappers.GeneratedClientAnalyzeBatchHeaders","Parameters.body1","isTokenCredential","bearerTokenAuthenticationPolicy","createTracingClient","createHttpPoller","KnownErrorCode","KnownInnerErrorCode","KnownStringIndexType","KnownPiiEntityDomain","KnownPiiEntityCategory","KnownHealthcareEntityCategory","KnownRelationType","KnownExtractiveSummarizationOrderingCriteria"],"mappings":"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"}